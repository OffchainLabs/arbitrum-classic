aliases:
  - &restore_yarn_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_yarn_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
  - &restore_ethbridge_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_ethbridge_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &restore_go_cache
    keys:
      - go-mod-v11-{{ .Branch }}-{{ checksum "packages/arb-rpc-node/go.sum" }}
      - go-mod-v11-{{ .Branch }}-
      - go-mod-v11-
  - &save_go_cache
    key: go-mod-v11-{{ .Branch }}-{{ checksum "packages/arb-rpc-node/go.sum" }}
    paths:
      - ~/go/pkg/mod
  - &test-path /tmp/test-results
  - &ethbridge-test-path /tmp/test-results/ethbridge.xml
version: 2
workflows:
  version: 2
  build:
    jobs:
      - go-deps
      - cpp-avm-build
      - cpp-avm:
          requires:
            - cpp-avm-build
      - frontend
      - ethbridge
      # - ethbridge-coverage
      - backend:
          requires:
            - go-deps
            - cpp-avm-build
      - arb-bridge-peripherals:
          requires:
            - go-deps
            - cpp-avm-build
jobs:
  go-deps:
    docker:
      - image: offchainlabs/backend-base:0.3.1
    steps:
      - checkout
      - restore_cache: *restore_go_cache
      - run:
          command: |
            cd packages/arb-node-core
            go mod download
      - save_cache: *save_go_cache
  frontend:
    docker:
      - image: offchainlabs/frontend-base:0.1.0
    environment:
      TEST_RESULTS: *test-path
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recommend-shallow packages/arb-os
      - run: mkdir -p $TEST_RESULTS
      - restore_cache: *restore_yarn_cache
      - run: yarn install --cache-folder ~/.cache/yarn
      - save_cache: *save_yarn_cache
      - run:
          name: test arb-provider-ethers
          command: |
            yarn
            yarn test:ci --reporter-options output=${TEST_RESULTS}/arb-provider-ethers.xml
            yarn lint --format junit -o ${TEST_RESULTS}/arb-provider-ethers-lint.xml
          working_directory: /home/user/project/packages/arb-provider-ethers
      - run:
          name: Upload Coverage to Codecov
          command: codecovbash
          working_directory: /home/user/project/packages
      - store_test_results:
          path: *test-path
  ethbridge:
    docker:
      - image: offchainlabs/ethbridge-base:0.2.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recommend-shallow packages/arb-os

      - run: mkdir -p $TEST_RESULTS
      - restore_cache: *restore_yarn_cache
      - run:
          name: install
          command: |
            yarn install --cache-folder ~/.cache/yarn
            yarn build
          working_directory: /home/user/project
      - run:
          name: test arb-bridge-eth
          command: |
            yarn typechain
            yarn test:ci
          working_directory: /home/user/project/packages/arb-bridge-eth
      - store_test_results:
          path: *test-path

  # ethbridge-coverage:
  #   docker:
  #     - image: offchainlabs/ethbridge-base:0.2.1
  #   environment: # environment variables for the build itself
  #     TEST_RESULTS: *test-path # path to where test results will be saved
  #   steps:
  #     - checkout
  #     - run: mkdir -p $TEST_RESULTS
  #     - restore_cache: *restore_yarn_cache
  #     - run:
  #         name: install
  #         command: |
  #           yarn install --cache-folder ~/.cache/yarn
  #           yarn build
  #         working_directory: /home/user/project
  #     - run:
  #         name: test arb-bridge-eth
  #         command: |
  #           yarn test:coverage --network development
  #           yarn lint:js --format junit -o ${TEST_RESULTS}/arb-bridge-eth-lint.xml
  #           yarn lint:solidity
  #         environment:
  #           MOCHA_FILE: *ethbridge-test-path
  #         working_directory: /home/user/project/packages/arb-bridge-eth
  #     - run:
  #         name: Upload Coverage to Codecov
  #         command: codecovbash -R /home/user/project -c -F unit
  #         working_directory: /home/user/project/packages
  #     - store_test_results:
  #         path: *test-path

  cpp-avm-build:
    docker:
      - image: offchainlabs/cpp-base:0.3.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: git submodule update --init --recommend-shallow packages/arb-avm-cpp
      - run:
          command: |
            mkdir -p packages/arb-avm-cpp/debug
            cd packages/arb-avm-cpp/debug
            cmake -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=True ..
            cmake --build . -j 2
            cd ../
            ./scripts/install-cmachine-debug
      - persist_to_workspace: # store the built files into the workspace for other jobs.
          root: /home/user/project/packages/arb-avm-cpp/
          paths:
            - ./cmachine/*.a
            - ./debug/*
  cpp-avm:
    docker:
      - image: offchainlabs/cpp-base:0.3.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recommend-shallow packages/arb-os
      - run: mkdir -p $TEST_RESULTS
      - attach_workspace:
          at: /home/user/workspace
      - run:
          command: cp -r /home/user/workspace/debug /home/user/project/packages/arb-avm-cpp/
          working_directory: /home/user/project
      - run:
          name: test arb-avm-cpp
          command: |
            ./bin/avm_tests -r junit > ${TEST_RESULTS}/arb-avm-cpp.xml
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info --output-file coverage.info '/usr/*' '*/tests/*' '*/external/*'
            lcov --list coverage.info
          working_directory: /home/user/project/packages/arb-avm-cpp/debug
      - run: codecovbash -R /home/user/project -c -F unit
      - store_test_results:
          path: *test-path
  backend:
    docker:
      - image: offchainlabs/backend-base:0.3.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recommend-shallow packages/arb-os
      - run: mkdir -p $TEST_RESULTS
      - attach_workspace:
          at: /home/user/workspace
      - run:
          name: 'Setup Enviroment'
          command: |
            export ARB_PACKAGES_VAR=$(go list ./... | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            echo "export ARB_PACKAGES=$ARB_PACKAGES_VAR" >> $BASH_ENV
            echo "export CGO_LDFLAGS='-lgcov --coverage'" >> $BASH_ENV
      - run:
          command: cp /home/user/workspace/cmachine/*.a /home/user/project/packages/arb-avm-cpp/cmachine
      - restore_cache: *restore_go_cache
      - run:
          name: test arb-util
          command: gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-util.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-util
      - run:
          name: test arb-avm-cpp
          command: gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-avm-cpp.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-avm-cpp
      - run:
          name: test arb-evm
          command: gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-evm.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-evm
      - run:
          name: test arb-node-core
          command: gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-node-core.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-node-core
      - run:
          name: test arb-rpc-node
          command: gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-rpc-node.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-rpc-node
      - run: codecovbash -R /home/user/project -c -F unit
      - store_test_results:
          path: *test-path

  arb-bridge-peripherals:
    docker:
      - image: offchainlabs/integration-base:0.3.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recommend-shallow packages/arb-os
      - run: mkdir -p $TEST_RESULTS
      - attach_workspace:
          at: /home/user/workspace
      - run:
          name: 'Setup Enviroment'
          command: |
            export ARB_PACKAGES_VAR=$(go list ./... | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            echo "export ARB_PACKAGES=$ARB_PACKAGES_VAR" >> $BASH_ENV
            echo "export CGO_LDFLAGS='-lgcov --coverage'" >> $BASH_ENV
      - run:
          command: cp /home/user/workspace/cmachine/*.a /home/user/project/packages/arb-avm-cpp/cmachine
      - restore_cache: *restore_go_cache
      - run:
          name: Run dev node
          command: go run arb-dev-node.go
          working_directory: /home/user/project/packages/arb-rpc-node/cmd/arb-dev-node
          background: true
      - restore_cache: *restore_yarn_cache
      - run:
          name: install
          command: |
            yarn install --cache-folder ~/.cache/yarn
            yarn build
          working_directory: /home/user/project
      - run:
          name: test arb-bridge-peripherals l1
          command: |
            yarn test:l1
          working_directory: /home/user/project/packages/arb-bridge-peripherals
      - run:
          name: test arb-bridge-peripherals l2
          command: |
            yarn test:l2
          working_directory: /home/user/project/packages/arb-bridge-peripherals
      - store_test_results:
          path: *test-path
