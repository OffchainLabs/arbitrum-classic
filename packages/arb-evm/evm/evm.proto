/*
 * Copyright 2019, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package evm;
option go_package = "github.com/offchainlabs/arbitrum/packages/arb-evm/evm";

message NodeLocation {
    string nodeHash = 1;
    uint64 nodeHeight = 2;
    string l1TxHash = 3;
}

message FullLogBuf {
    string address = 1;
    string blockHash = 2;
    uint64 blockHeight = 3;
    string data = 4;
    string index = 5;
    repeated string topics = 6;
    string transactionIndex = 7;
    string transactionHash = 8;
}

message AVMLogProof {
    string logPreHash = 1;
    string logPostHash = 2;
    repeated string logValHashes = 3;
}

message TxInfoBuf {
    bool found = 1;
    string rawVal = 2;
    string txHash = 3;
    uint64 txIndex = 4;
    uint64 startLogIndex = 5;
    string blockHash = 6;
    uint64 blockHeight = 7;
    AVMLogProof proof = 8;
}

message TopicGroup {
    repeated string topics = 1;
}

message BlockCountArgs {
}

message BlockCountReply {
    uint64 height = 1;
}

message FindLogsArgs {
    string fromHeight = 1;
    string toHeight = 2;
    repeated string addresses = 3;
    repeated TopicGroup topicGroups = 4;
}

message FindLogsReply {
    repeated FullLogBuf logs = 4;
}

message GetOutputMessageArgs {
    uint64 index = 1;
}

message GetOutputMessageReply {
    string rawVal = 1;
}

message GetRequestResultArgs {
    string txHash = 1;
}

message GetRequestResultReply {
    string rawVal = 1;
}

message GetChainAddressArgs {

}

message GetChainAddressReply {
    string chainAddress = 1;
}

message CallMessageArgs {
    string data = 1;
    string sender = 2;
}

message CallMessageReply {
    string rawVal = 1;
}

message BlockInfoArgs {
    uint64 height = 1;
}

message BlockInfoReply {
    string hash = 1;
    string rawVal = 2;
    string bloom = 3;
}

message SendTransactionArgs {
    string signedTransaction = 1;
}

message SendTransactionReply {
    string transactionHash = 1;
}

service RollupValidator {
    rpc GetBlockCount (BlockCountArgs) returns (BlockCountReply);
    rpc GetBlockInfo (BlockInfoArgs) returns (BlockInfoReply);
    rpc GetOutputMessage (GetOutputMessageArgs) returns (GetOutputMessageReply);
    rpc GetRequestResult (GetRequestResultArgs) returns (GetRequestResultReply);
    rpc CallMessage (CallMessageArgs) returns (CallMessageReply);
    rpc FindLogs (FindLogsArgs) returns (FindLogsReply);
    rpc GetChainAddress (GetChainAddressArgs) returns (GetChainAddressReply);
    rpc SendTransaction (SendTransactionArgs) returns (SendTransactionReply);
}
