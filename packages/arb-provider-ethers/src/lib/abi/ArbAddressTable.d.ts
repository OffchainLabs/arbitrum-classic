/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface ArbAddressTableInterface extends Interface {
  functions: {
    addressExists: TypedFunctionDescription<{
      encode([addr]: [string]): string
    }>

    compress: TypedFunctionDescription<{ encode([addr]: [string]): string }>

    decompress: TypedFunctionDescription<{
      encode([buf, offset]: [Arrayish, BigNumberish]): string
    }>

    lookup: TypedFunctionDescription<{ encode([addr]: [string]): string }>

    lookupIndex: TypedFunctionDescription<{
      encode([index]: [BigNumberish]): string
    }>

    register: TypedFunctionDescription<{ encode([addr]: [string]): string }>

    size: TypedFunctionDescription<{ encode([]: []): string }>
  }

  events: {}
}

export class ArbAddressTable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ArbAddressTable
  attach(addressOrName: string): ArbAddressTable
  deployed(): Promise<ArbAddressTable>

  on(event: EventFilter | string, listener: Listener): ArbAddressTable
  once(event: EventFilter | string, listener: Listener): ArbAddressTable
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ArbAddressTable
  removeAllListeners(eventName: EventFilter | string): ArbAddressTable
  removeListener(eventName: any, listener: Listener): ArbAddressTable

  interface: ArbAddressTableInterface

  functions: {
    addressExists(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>

    'addressExists(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>

    compress(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'compress(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    decompress(
      buf: Arrayish,
      offset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string
      1: BigNumber
    }>

    'decompress(bytes,uint256)'(
      buf: Arrayish,
      offset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string
      1: BigNumber
    }>

    lookup(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'lookup(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    lookupIndex(
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'lookupIndex(uint256)'(
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    register(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'register(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    size(overrides?: TransactionOverrides): Promise<BigNumber>

    'size()'(overrides?: TransactionOverrides): Promise<BigNumber>
  }

  addressExists(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>

  'addressExists(address)'(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>

  compress(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'compress(address)'(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  decompress(
    buf: Arrayish,
    offset: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string
    1: BigNumber
  }>

  'decompress(bytes,uint256)'(
    buf: Arrayish,
    offset: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string
    1: BigNumber
  }>

  lookup(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

  'lookup(address)'(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  lookupIndex(
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'lookupIndex(uint256)'(
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  register(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'register(address)'(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  size(overrides?: TransactionOverrides): Promise<BigNumber>

  'size()'(overrides?: TransactionOverrides): Promise<BigNumber>

  filters: {}

  estimate: {
    addressExists(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'addressExists(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    compress(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'compress(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    decompress(
      buf: Arrayish,
      offset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'decompress(bytes,uint256)'(
      buf: Arrayish,
      offset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    lookup(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'lookup(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    lookupIndex(
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'lookupIndex(uint256)'(
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    register(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'register(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    size(overrides?: TransactionOverrides): Promise<BigNumber>

    'size()'(overrides?: TransactionOverrides): Promise<BigNumber>
  }
}
