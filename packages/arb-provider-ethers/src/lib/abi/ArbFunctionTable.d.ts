/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface ArbFunctionTableInterface extends Interface {
  functions: {
    get: TypedFunctionDescription<{
      encode([addr, index]: [string, BigNumberish]): string
    }>

    size: TypedFunctionDescription<{ encode([addr]: [string]): string }>

    upload: TypedFunctionDescription<{ encode([buf]: [Arrayish]): string }>
  }

  events: {}
}

export class ArbFunctionTable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ArbFunctionTable
  attach(addressOrName: string): ArbFunctionTable
  deployed(): Promise<ArbFunctionTable>

  on(event: EventFilter | string, listener: Listener): ArbFunctionTable
  once(event: EventFilter | string, listener: Listener): ArbFunctionTable
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ArbFunctionTable
  removeAllListeners(eventName: EventFilter | string): ArbFunctionTable
  removeListener(eventName: any, listener: Listener): ArbFunctionTable

  interface: ArbFunctionTableInterface

  functions: {
    get(
      addr: string,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber
      1: boolean
      2: BigNumber
    }>

    'get(address,uint256)'(
      addr: string,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber
      1: boolean
      2: BigNumber
    }>

    size(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'size(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    upload(
      buf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'upload(bytes)'(
      buf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>
  }

  get(
    addr: string,
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber
    1: boolean
    2: BigNumber
  }>

  'get(address,uint256)'(
    addr: string,
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber
    1: boolean
    2: BigNumber
  }>

  size(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

  'size(address)'(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  upload(
    buf: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'upload(bytes)'(
    buf: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  filters: {}

  estimate: {
    get(
      addr: string,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'get(address,uint256)'(
      addr: string,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    size(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>

    'size(address)'(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    upload(buf: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>

    'upload(bytes)'(
      buf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>
  }
}
