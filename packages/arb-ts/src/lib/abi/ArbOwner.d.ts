/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ArbOwnerInterface extends ethers.utils.Interface {
  functions: {
    'addToReserveFunds()': FunctionFragment
    'bindAddressToPluggable(address,uint256)': FunctionFragment
    'continueCodeUpload(bytes)': FunctionFragment
    'finishCodeUploadAsArbosUpgrade()': FunctionFragment
    'finishCodeUploadAsPluggable(uint256,bool)': FunctionFragment
    'getFeeRecipients()': FunctionFragment
    'giveOwnership(address)': FunctionFragment
    'setFairGasPriceSender(address)': FunctionFragment
    'setFeeRecipients(address,address)': FunctionFragment
    'setFeesEnabled(bool)': FunctionFragment
    'setGasAccountingParams(uint256,uint256,uint256)': FunctionFragment
    'setSecondsPerSend(uint256)': FunctionFragment
    'startCodeUpload()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addToReserveFunds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'bindAddressToPluggable',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'continueCodeUpload',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'finishCodeUploadAsArbosUpgrade',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'finishCodeUploadAsPluggable',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getFeeRecipients',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'giveOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFairGasPriceSender',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeRecipients',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFeesEnabled',
    values: [boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setGasAccountingParams',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setSecondsPerSend',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'startCodeUpload',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'addToReserveFunds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'bindAddressToPluggable',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'continueCodeUpload',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'finishCodeUploadAsArbosUpgrade',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'finishCodeUploadAsPluggable',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFeeRecipients',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'giveOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFairGasPriceSender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeRecipients',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeesEnabled',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setGasAccountingParams',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSecondsPerSend',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'startCodeUpload',
    data: BytesLike
  ): Result

  events: {}
}

export class ArbOwner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ArbOwnerInterface

  functions: {
    addToReserveFunds(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'addToReserveFunds()'(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'bindAddressToPluggable(address,uint256)'(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'continueCodeUpload(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    finishCodeUploadAsArbosUpgrade(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'finishCodeUploadAsArbosUpgrade()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'finishCodeUploadAsPluggable(uint256,bool)'(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getFeeRecipients(overrides?: CallOverrides): Promise<[string, string]>

    'getFeeRecipients()'(overrides?: CallOverrides): Promise<[string, string]>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFairGasPriceSender(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFairGasPriceSender(address)'(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFeeRecipients(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeRecipients(address,address)'(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFeesEnabled(
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeesEnabled(bool)'(
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setGasAccountingParams(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setGasAccountingParams(uint256,uint256,uint256)'(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setSecondsPerSend(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSecondsPerSend(uint256)'(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    startCodeUpload(overrides?: Overrides): Promise<ContractTransaction>

    'startCodeUpload()'(overrides?: Overrides): Promise<ContractTransaction>
  }

  addToReserveFunds(overrides?: PayableOverrides): Promise<ContractTransaction>

  'addToReserveFunds()'(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  bindAddressToPluggable(
    addr: string,
    pluggableId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'bindAddressToPluggable(address,uint256)'(
    addr: string,
    pluggableId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  continueCodeUpload(
    marshalledCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'continueCodeUpload(bytes)'(
    marshalledCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  finishCodeUploadAsArbosUpgrade(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'finishCodeUploadAsArbosUpgrade()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  finishCodeUploadAsPluggable(
    id: BigNumberish,
    keepState: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'finishCodeUploadAsPluggable(uint256,bool)'(
    id: BigNumberish,
    keepState: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getFeeRecipients(overrides?: CallOverrides): Promise<[string, string]>

  'getFeeRecipients()'(overrides?: CallOverrides): Promise<[string, string]>

  giveOwnership(
    newOwnerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'giveOwnership(address)'(
    newOwnerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFairGasPriceSender(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFairGasPriceSender(address)'(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFeeRecipients(
    netFeeRecipient: string,
    congestionFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeRecipients(address,address)'(
    netFeeRecipient: string,
    congestionFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFeesEnabled(
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeesEnabled(bool)'(
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setGasAccountingParams(
    speedLimitPerBlock: BigNumberish,
    gasPoolMax: BigNumberish,
    maxTxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setGasAccountingParams(uint256,uint256,uint256)'(
    speedLimitPerBlock: BigNumberish,
    gasPoolMax: BigNumberish,
    maxTxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setSecondsPerSend(
    blocksPerSend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSecondsPerSend(uint256)'(
    blocksPerSend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  startCodeUpload(overrides?: Overrides): Promise<ContractTransaction>

  'startCodeUpload()'(overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    addToReserveFunds(overrides?: CallOverrides): Promise<void>

    'addToReserveFunds()'(overrides?: CallOverrides): Promise<void>

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'bindAddressToPluggable(address,uint256)'(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'continueCodeUpload(bytes)'(
      marshalledCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    finishCodeUploadAsArbosUpgrade(overrides?: CallOverrides): Promise<void>

    'finishCodeUploadAsArbosUpgrade()'(overrides?: CallOverrides): Promise<void>

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'finishCodeUploadAsPluggable(uint256,bool)'(
      id: BigNumberish,
      keepState: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    getFeeRecipients(overrides?: CallOverrides): Promise<[string, string]>

    'getFeeRecipients()'(overrides?: CallOverrides): Promise<[string, string]>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFairGasPriceSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setFairGasPriceSender(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFeeRecipients(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeRecipients(address,address)'(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFeesEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>

    'setFeesEnabled(bool)'(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setGasAccountingParams(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setGasAccountingParams(uint256,uint256,uint256)'(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setSecondsPerSend(
      blocksPerSend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setSecondsPerSend(uint256)'(
      blocksPerSend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    startCodeUpload(overrides?: CallOverrides): Promise<void>

    'startCodeUpload()'(overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    addToReserveFunds(overrides?: PayableOverrides): Promise<BigNumber>

    'addToReserveFunds()'(overrides?: PayableOverrides): Promise<BigNumber>

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'bindAddressToPluggable(address,uint256)'(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'continueCodeUpload(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    finishCodeUploadAsArbosUpgrade(overrides?: Overrides): Promise<BigNumber>

    'finishCodeUploadAsArbosUpgrade()'(
      overrides?: Overrides
    ): Promise<BigNumber>

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'finishCodeUploadAsPluggable(uint256,bool)'(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    getFeeRecipients(overrides?: CallOverrides): Promise<BigNumber>

    'getFeeRecipients()'(overrides?: CallOverrides): Promise<BigNumber>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFairGasPriceSender(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFairGasPriceSender(address)'(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFeeRecipients(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeRecipients(address,address)'(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFeesEnabled(enabled: boolean, overrides?: Overrides): Promise<BigNumber>

    'setFeesEnabled(bool)'(
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setGasAccountingParams(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setGasAccountingParams(uint256,uint256,uint256)'(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setSecondsPerSend(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSecondsPerSend(uint256)'(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    startCodeUpload(overrides?: Overrides): Promise<BigNumber>

    'startCodeUpload()'(overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    addToReserveFunds(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'addToReserveFunds()'(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'bindAddressToPluggable(address,uint256)'(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'continueCodeUpload(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    finishCodeUploadAsArbosUpgrade(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'finishCodeUploadAsArbosUpgrade()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'finishCodeUploadAsPluggable(uint256,bool)'(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getFeeRecipients(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFeeRecipients()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFairGasPriceSender(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFairGasPriceSender(address)'(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFeeRecipients(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeRecipients(address,address)'(
      netFeeRecipient: string,
      congestionFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFeesEnabled(
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeesEnabled(bool)'(
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setGasAccountingParams(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setGasAccountingParams(uint256,uint256,uint256)'(
      speedLimitPerBlock: BigNumberish,
      gasPoolMax: BigNumberish,
      maxTxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setSecondsPerSend(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSecondsPerSend(uint256)'(
      blocksPerSend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    startCodeUpload(overrides?: Overrides): Promise<PopulatedTransaction>

    'startCodeUpload()'(overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
