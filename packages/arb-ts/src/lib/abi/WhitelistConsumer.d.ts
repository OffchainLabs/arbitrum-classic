/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface WhitelistConsumerInterface extends ethers.utils.Interface {
  functions: {
    'updateWhitelistSource(address)': FunctionFragment
    'whitelist()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'updateWhitelistSource',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'whitelist', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'updateWhitelistSource',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result

  events: {
    'WhitelistSourceUpdated(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'WhitelistSourceUpdated'): EventFragment
}

export class WhitelistConsumer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: WhitelistConsumerInterface

  functions: {
    updateWhitelistSource(
      newSource: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateWhitelistSource(address)'(
      newSource: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    whitelist(overrides?: CallOverrides): Promise<[string]>

    'whitelist()'(overrides?: CallOverrides): Promise<[string]>
  }

  updateWhitelistSource(
    newSource: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateWhitelistSource(address)'(
    newSource: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  whitelist(overrides?: CallOverrides): Promise<string>

  'whitelist()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    updateWhitelistSource(
      newSource: string,
      overrides?: CallOverrides
    ): Promise<void>

    'updateWhitelistSource(address)'(
      newSource: string,
      overrides?: CallOverrides
    ): Promise<void>

    whitelist(overrides?: CallOverrides): Promise<string>

    'whitelist()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    WhitelistSourceUpdated(newSource: null): EventFilter
  }

  estimateGas: {
    updateWhitelistSource(
      newSource: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateWhitelistSource(address)'(
      newSource: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    whitelist(overrides?: CallOverrides): Promise<BigNumber>

    'whitelist()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    updateWhitelistSource(
      newSource: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateWhitelistSource(address)'(
      newSource: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'whitelist()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
