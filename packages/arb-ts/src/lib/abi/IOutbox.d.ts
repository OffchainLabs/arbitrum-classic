/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface IOutboxInterface extends ethers.utils.Interface {
  functions: {
    'l2ToL1BatchNum()': FunctionFragment
    'l2ToL1Block()': FunctionFragment
    'l2ToL1EthBlock()': FunctionFragment
    'l2ToL1OutputId()': FunctionFragment
    'l2ToL1Sender()': FunctionFragment
    'l2ToL1Timestamp()': FunctionFragment
    'outboxEntryExists(uint256)': FunctionFragment
    'processOutgoingMessages(bytes,uint256[])': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'l2ToL1BatchNum',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Block',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1EthBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1OutputId',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Timestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'outboxEntryExists',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'processOutgoingMessages',
    values: [BytesLike, BigNumberish[]]
  ): string

  decodeFunctionResult(
    functionFragment: 'l2ToL1BatchNum',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2ToL1Block', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1EthBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1OutputId',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Timestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'outboxEntryExists',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'processOutgoingMessages',
    data: BytesLike
  ): Result

  events: {
    'OutBoxTransactionExecuted(address,address,uint256,uint256)': EventFragment
    'OutboxEntryCreated(uint256,uint256,bytes32,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OutBoxTransactionExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OutboxEntryCreated'): EventFragment
}

export class IOutbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IOutboxInterface

  functions: {
    l2ToL1BatchNum(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1Block(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1OutputId(overrides?: CallOverrides): Promise<[string]>

    l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    outboxEntryExists(
      batchNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1OutputId(overrides?: CallOverrides): Promise<string>

  l2ToL1Sender(overrides?: CallOverrides): Promise<string>

  l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

  outboxEntryExists(
    batchNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  processOutgoingMessages(
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1OutputId(overrides?: CallOverrides): Promise<string>

    l2ToL1Sender(overrides?: CallOverrides): Promise<string>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    outboxEntryExists(
      batchNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OutBoxTransactionExecuted(
      destAddr?: string | null,
      l2Sender?: string | null,
      outboxEntryIndex?: BigNumberish | null,
      transactionIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        destAddr: string
        l2Sender: string
        outboxEntryIndex: BigNumber
        transactionIndex: BigNumber
      }
    >

    OutboxEntryCreated(
      batchNum?: BigNumberish | null,
      outboxEntryIndex?: null,
      outputRoot?: null,
      numInBatch?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        batchNum: BigNumber
        outboxEntryIndex: BigNumber
        outputRoot: string
        numInBatch: BigNumber
      }
    >
  }

  estimateGas: {
    l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1OutputId(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    outboxEntryExists(
      batchNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    l2ToL1BatchNum(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Block(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1OutputId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    outboxEntryExists(
      batchNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
