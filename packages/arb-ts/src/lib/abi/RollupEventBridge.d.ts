/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface RollupEventBridgeInterface extends ethers.utils.Interface {
  functions: {
    'claimNode(uint256,address)': FunctionFragment
    'initialize(address,address)': FunctionFragment
    'isMaster()': FunctionFragment
    'nodeConfirmed(uint256)': FunctionFragment
    'nodeCreated(uint256,uint256,uint256,address)': FunctionFragment
    'nodeRejected(uint256)': FunctionFragment
    'rollupInitialized(uint256,uint256,uint256,address,address,bytes)': FunctionFragment
    'stakeCreated(address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'claimNode',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'isMaster', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'nodeConfirmed',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'nodeCreated',
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'nodeRejected',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rollupInitialized',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'stakeCreated',
    values: [string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'claimNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isMaster', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'nodeConfirmed',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'nodeCreated', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'nodeRejected',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rollupInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakeCreated',
    data: BytesLike
  ): Result

  events: {
    'InboxMessageDelivered(uint256,bytes)': EventFragment
    'InboxMessageDeliveredFromOrigin(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'InboxMessageDelivered'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'InboxMessageDeliveredFromOrigin'
  ): EventFragment
}

export class RollupEventBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: RollupEventBridgeInterface

  functions: {
    claimNode(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimNode(uint256,address)'(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address)'(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isMaster(overrides?: CallOverrides): Promise<[boolean]>

    'isMaster()'(overrides?: CallOverrides): Promise<[boolean]>

    nodeConfirmed(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'nodeConfirmed(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    nodeCreated(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'nodeCreated(uint256,uint256,uint256,address)'(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    nodeRejected(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'nodeRejected(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rollupInitialized(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rollupInitialized(uint256,uint256,uint256,address,address,bytes)'(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    stakeCreated(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'stakeCreated(address,uint256)'(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  claimNode(
    nodeNum: BigNumberish,
    staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimNode(uint256,address)'(
    nodeNum: BigNumberish,
    staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _bridge: string,
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address)'(
    _bridge: string,
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isMaster(overrides?: CallOverrides): Promise<boolean>

  'isMaster()'(overrides?: CallOverrides): Promise<boolean>

  nodeConfirmed(
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'nodeConfirmed(uint256)'(
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  nodeCreated(
    nodeNum: BigNumberish,
    prev: BigNumberish,
    deadline: BigNumberish,
    asserter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'nodeCreated(uint256,uint256,uint256,address)'(
    nodeNum: BigNumberish,
    prev: BigNumberish,
    deadline: BigNumberish,
    asserter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  nodeRejected(
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'nodeRejected(uint256)'(
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rollupInitialized(
    confirmPeriodBlocks: BigNumberish,
    arbGasSpeedLimitPerBlock: BigNumberish,
    baseStake: BigNumberish,
    stakeToken: string,
    owner: string,
    extraConfig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rollupInitialized(uint256,uint256,uint256,address,address,bytes)'(
    confirmPeriodBlocks: BigNumberish,
    arbGasSpeedLimitPerBlock: BigNumberish,
    baseStake: BigNumberish,
    stakeToken: string,
    owner: string,
    extraConfig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  stakeCreated(
    staker: string,
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'stakeCreated(address,uint256)'(
    staker: string,
    nodeNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    claimNode(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>

    'claimNode(uint256,address)'(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>

    initialize(
      _bridge: string,
      _rollup: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address)'(
      _bridge: string,
      _rollup: string,
      overrides?: CallOverrides
    ): Promise<void>

    isMaster(overrides?: CallOverrides): Promise<boolean>

    'isMaster()'(overrides?: CallOverrides): Promise<boolean>

    nodeConfirmed(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'nodeConfirmed(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    nodeCreated(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: CallOverrides
    ): Promise<void>

    'nodeCreated(uint256,uint256,uint256,address)'(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: CallOverrides
    ): Promise<void>

    nodeRejected(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'nodeRejected(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rollupInitialized(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'rollupInitialized(uint256,uint256,uint256,address,address,bytes)'(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    stakeCreated(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'stakeCreated(address,uint256)'(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    InboxMessageDelivered(
      messageNum: BigNumberish | null,
      data: null
    ): EventFilter

    InboxMessageDeliveredFromOrigin(
      messageNum: BigNumberish | null
    ): EventFilter
  }

  estimateGas: {
    claimNode(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimNode(uint256,address)'(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address)'(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isMaster(overrides?: CallOverrides): Promise<BigNumber>

    'isMaster()'(overrides?: CallOverrides): Promise<BigNumber>

    nodeConfirmed(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'nodeConfirmed(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    nodeCreated(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'nodeCreated(uint256,uint256,uint256,address)'(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    nodeRejected(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'nodeRejected(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    rollupInitialized(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rollupInitialized(uint256,uint256,uint256,address,address,bytes)'(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    stakeCreated(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'stakeCreated(address,uint256)'(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    claimNode(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimNode(uint256,address)'(
      nodeNum: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address)'(
      _bridge: string,
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isMaster()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nodeConfirmed(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'nodeConfirmed(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    nodeCreated(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'nodeCreated(uint256,uint256,uint256,address)'(
      nodeNum: BigNumberish,
      prev: BigNumberish,
      deadline: BigNumberish,
      asserter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    nodeRejected(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'nodeRejected(uint256)'(
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rollupInitialized(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rollupInitialized(uint256,uint256,uint256,address,address,bytes)'(
      confirmPeriodBlocks: BigNumberish,
      arbGasSpeedLimitPerBlock: BigNumberish,
      baseStake: BigNumberish,
      stakeToken: string,
      owner: string,
      extraConfig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    stakeCreated(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'stakeCreated(address,uint256)'(
      staker: string,
      nodeNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
