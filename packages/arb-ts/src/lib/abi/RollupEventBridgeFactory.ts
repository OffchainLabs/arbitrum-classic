/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import { RollupEventBridge } from './RollupEventBridge'

export class RollupEventBridgeFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    _bridge: string,
    _rollup: string,
    overrides?: Overrides
  ): Promise<RollupEventBridge> {
    return super.deploy(
      _bridge,
      _rollup,
      overrides || {}
    ) as Promise<RollupEventBridge>
  }
  getDeployTransaction(
    _bridge: string,
    _rollup: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_bridge, _rollup, overrides || {})
  }
  attach(address: string): RollupEventBridge {
    return super.attach(address) as RollupEventBridge
  }
  connect(signer: Signer): RollupEventBridgeFactory {
    return super.connect(signer) as RollupEventBridgeFactory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RollupEventBridge {
    return new Contract(address, _abi, signerOrProvider) as RollupEventBridge
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_bridge',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_rollup',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'nodeNum',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'staker',
        type: 'address',
      },
    ],
    name: 'claimNode',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'nodeNum',
        type: 'uint256',
      },
    ],
    name: 'nodeConfirmed',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'nodeNum',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'prev',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'asserter',
        type: 'address',
      },
    ],
    name: 'nodeCreated',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'nodeNum',
        type: 'uint256',
      },
    ],
    name: 'nodeRejected',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'confirmPeriodBlocks',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'extraChallengeTimeBlocks',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'arbGasSpeedLimitPerBlock',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'baseStake',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'stakeToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'extraConfig',
        type: 'bytes',
      },
    ],
    name: 'rollupInitialized',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'staker',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nodeNum',
        type: 'uint256',
      },
    ],
    name: 'stakeCreated',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516109033803806109038339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b031991821617909155600180549390921692169190911790556108898061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806316b9109b1461006757806330a826b41461008657806364126c7c146100a35780638b8ca199146100cf578063b0f2af2914610107578063f03c04a5146101a8575b600080fd5b6100846004803603602081101561007d57600080fd5b50356101d4565b005b6100846004803603602081101561009c57600080fd5b5035610260565b610084600480360360408110156100b957600080fd5b50803590602001356001600160a01b03166102e7565b610084600480360360808110156100e557600080fd5b50803590602081013590604081013590606001356001600160a01b031661051a565b610084600480360360e081101561011d57600080fd5b8135916020810135916040820135916060810135916001600160a01b03608083013581169260a08101359091169181019060e0810160c082013564010000000081111561016957600080fd5b82018360208201111561017b57600080fd5b8035906020019184600183028401116401000000008311171561019d57600080fd5b5090925090506105c4565b610084600480360360408110156101be57600080fd5b506001600160a01b038135169060200135610721565b6001546001600160a01b03163314610221576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600160f81b6020808301919091526021808301859052835180840390910181526041909201909252805191012061025b816107c6565b505050565b6001546001600160a01b031633146102ad576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600160f91b6020808301919091526021808301859052835180840390910181526041909201909252805191012061025b816107c6565b6001546001600160a01b03163314610334576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60015460408051634f0f4aa960e01b81526004810185905290516001600160a01b03909216916000918391634f0f4aa991602480820192602092909190829003018186803b15801561038557600080fd5b505afa158015610399573d6000803e3d6000fd5b505050506040513d60208110156103af57600080fd5b5051604080516348b4573960e11b81526001600160a01b038681166004830152915192935090831691639168ae7291602480820192602092909190829003018186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d602081101561042857600080fd5b5051610468576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b604482015290519081900360640190fd5b816001600160a01b0316632b2af0ab856040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505060408051600160fa1b602080830191909152602182018990526001600160a01b038816604180840191909152835180840390910181526061909201909252805191012091506105129050816107c6565b505050505050565b6001546001600160a01b03163314610567576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b6040805160006020808301919091526021820187905260418201869052436061830152608182018590526001600160a01b03841660a1808401919091528351808403909101815260c19092019092528051910120610512816107c6565b6001546001600160a01b03163314610611576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b6000888888888860601b60601c6001600160a01b03168860601b60601c6001600160a01b03168888604051602001808981526020018881526020018781526020018681526020018581526020018481526020018383808284376040805191909301818103601f190182528084528151602092830120600080546302bbfad160e01b8452600480850152336024850152604484018390529551919f506001600160a01b039095169d506302bbfad19c5060648083019c50929a50985088900301955086945090925089915050803b1580156106ea57600080fd5b505af11580156106fe573d6000803e3d6000fd5b505050506040513d602081101561071457600080fd5b5050505050505050505050565b6001546001600160a01b0316331461076e576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600360f81b6020808301919091526001600160a01b0385166021830152604182018490524360618084019190915283518084039091018152608190920190925280519101206107c0816107c6565b50505050565b60008054604080516302bbfad160e01b8152600860048201523360248201526044810185905290516001600160a01b03909216916302bbfad19160648082019260209290919082900301818787803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b505050506040513d602081101561084b57600080fd5b50519291505056fea26469706673582212208cd7ccd7bf1ad301e3c09762f42e7a91c610c1090aeb8469a28215d37ef1427964736f6c634300060b0033'
