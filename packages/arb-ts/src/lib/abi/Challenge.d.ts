/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ChallengeInterface extends ethers.utils.Interface {
  functions: {
    'asserter()': FunctionFragment
    'asserterTimeLeft()': FunctionFragment
    'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])': FunctionFragment
    'bridge()': FunctionFragment
    'challengeState()': FunctionFragment
    'challenger()': FunctionFragment
    'challengerTimeLeft()': FunctionFragment
    'currentResponder()': FunctionFragment
    'currentResponderTimeLeft()': FunctionFragment
    'executors(uint256)': FunctionFragment
    'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)': FunctionFragment
    'isMaster()': FunctionFragment
    'lastMoveBlock()': FunctionFragment
    'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)': FunctionFragment
    'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)': FunctionFragment
    'timeout()': FunctionFragment
    'turn()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'asserter', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'asserterTimeLeft',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'bisectExecution',
    values: [
      BytesLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string
  encodeFunctionData(functionFragment: 'bridge', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'challengeState',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'challenger', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'challengerTimeLeft',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'currentResponder',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'currentResponderTimeLeft',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'executors',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initializeChallenge',
    values: [
      string[],
      string,
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string
  encodeFunctionData(functionFragment: 'isMaster', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'lastMoveBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'oneStepProveExecution',
    values: [
      BytesLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish, BigNumberish],
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'proveContinuedExecution',
    values: [
      BytesLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'timeout', values?: undefined): string
  encodeFunctionData(functionFragment: 'turn', values?: undefined): string

  decodeFunctionResult(functionFragment: 'asserter', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'asserterTimeLeft',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'bisectExecution',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'bridge', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'challengeState',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'challenger', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'challengerTimeLeft',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentResponder',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentResponderTimeLeft',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'executors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'initializeChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isMaster', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastMoveBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'oneStepProveExecution',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proveContinuedExecution',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'timeout', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'turn', data: BytesLike): Result

  events: {
    'AsserterTimedOut()': EventFragment
    'Bisected(bytes32,uint256,uint256,bytes32[])': EventFragment
    'ChallengerTimedOut()': EventFragment
    'ContinuedExecutionProven()': EventFragment
    'InitiatedChallenge()': EventFragment
    'OneStepProofCompleted()': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AsserterTimedOut'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Bisected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChallengerTimedOut'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ContinuedExecutionProven'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InitiatedChallenge'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OneStepProofCompleted'): EventFragment
}

export class Challenge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ChallengeInterface

  functions: {
    asserter(overrides?: CallOverrides): Promise<[string]>

    'asserter()'(overrides?: CallOverrides): Promise<[string]>

    asserterTimeLeft(overrides?: CallOverrides): Promise<[BigNumber]>

    'asserterTimeLeft()'(overrides?: CallOverrides): Promise<[BigNumber]>

    bisectExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    bridge(overrides?: CallOverrides): Promise<[string]>

    'bridge()'(overrides?: CallOverrides): Promise<[string]>

    challengeState(overrides?: CallOverrides): Promise<[string]>

    'challengeState()'(overrides?: CallOverrides): Promise<[string]>

    challenger(overrides?: CallOverrides): Promise<[string]>

    'challenger()'(overrides?: CallOverrides): Promise<[string]>

    challengerTimeLeft(overrides?: CallOverrides): Promise<[BigNumber]>

    'challengerTimeLeft()'(overrides?: CallOverrides): Promise<[BigNumber]>

    currentResponder(overrides?: CallOverrides): Promise<[string]>

    'currentResponder()'(overrides?: CallOverrides): Promise<[string]>

    currentResponderTimeLeft(overrides?: CallOverrides): Promise<[BigNumber]>

    'currentResponderTimeLeft()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    initializeChallenge(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isMaster(overrides?: CallOverrides): Promise<[boolean]>

    'isMaster()'(overrides?: CallOverrides): Promise<[boolean]>

    lastMoveBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastMoveBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>

    oneStepProveExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    proveContinuedExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    timeout(overrides?: Overrides): Promise<ContractTransaction>

    'timeout()'(overrides?: Overrides): Promise<ContractTransaction>

    turn(overrides?: CallOverrides): Promise<[number]>

    'turn()'(overrides?: CallOverrides): Promise<[number]>
  }

  asserter(overrides?: CallOverrides): Promise<string>

  'asserter()'(overrides?: CallOverrides): Promise<string>

  asserterTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

  'asserterTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

  bisectExecution(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _gasUsedBefore: BigNumberish,
    _assertionRest: BytesLike,
    _chainHashes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])'(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _gasUsedBefore: BigNumberish,
    _assertionRest: BytesLike,
    _chainHashes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  bridge(overrides?: CallOverrides): Promise<string>

  'bridge()'(overrides?: CallOverrides): Promise<string>

  challengeState(overrides?: CallOverrides): Promise<string>

  'challengeState()'(overrides?: CallOverrides): Promise<string>

  challenger(overrides?: CallOverrides): Promise<string>

  'challenger()'(overrides?: CallOverrides): Promise<string>

  challengerTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

  'challengerTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

  currentResponder(overrides?: CallOverrides): Promise<string>

  'currentResponder()'(overrides?: CallOverrides): Promise<string>

  currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

  'currentResponderTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

  executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'executors(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  initializeChallenge(
    _executors: string[],
    _resultReceiver: string,
    _executionHash: BytesLike,
    _maxMessageCount: BigNumberish,
    _asserter: string,
    _challenger: string,
    _asserterTimeLeft: BigNumberish,
    _challengerTimeLeft: BigNumberish,
    _bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)'(
    _executors: string[],
    _resultReceiver: string,
    _executionHash: BytesLike,
    _maxMessageCount: BigNumberish,
    _asserter: string,
    _challenger: string,
    _asserterTimeLeft: BigNumberish,
    _challengerTimeLeft: BigNumberish,
    _bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isMaster(overrides?: CallOverrides): Promise<boolean>

  'isMaster()'(overrides?: CallOverrides): Promise<boolean>

  lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>

  'lastMoveBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  oneStepProveExecution(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _initialMessagesRead: BigNumberish,
    _initialSendAcc: BytesLike,
    _initialLogAcc: BytesLike,
    _initialState: [BigNumberish, BigNumberish, BigNumberish],
    _executionProof: BytesLike,
    _bufferProof: BytesLike,
    prover: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)'(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _initialMessagesRead: BigNumberish,
    _initialSendAcc: BytesLike,
    _initialLogAcc: BytesLike,
    _initialState: [BigNumberish, BigNumberish, BigNumberish],
    _executionProof: BytesLike,
    _bufferProof: BytesLike,
    prover: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  proveContinuedExecution(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _gasUsedBefore: BigNumberish,
    _assertionRest: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)'(
    _merkleNodes: BytesLike[],
    _merkleRoute: BigNumberish,
    _challengedSegmentStart: BigNumberish,
    _challengedSegmentLength: BigNumberish,
    _oldEndHash: BytesLike,
    _gasUsedBefore: BigNumberish,
    _assertionRest: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  timeout(overrides?: Overrides): Promise<ContractTransaction>

  'timeout()'(overrides?: Overrides): Promise<ContractTransaction>

  turn(overrides?: CallOverrides): Promise<number>

  'turn()'(overrides?: CallOverrides): Promise<number>

  callStatic: {
    asserter(overrides?: CallOverrides): Promise<string>

    'asserter()'(overrides?: CallOverrides): Promise<string>

    asserterTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'asserterTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    bisectExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>

    'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>

    bridge(overrides?: CallOverrides): Promise<string>

    'bridge()'(overrides?: CallOverrides): Promise<string>

    challengeState(overrides?: CallOverrides): Promise<string>

    'challengeState()'(overrides?: CallOverrides): Promise<string>

    challenger(overrides?: CallOverrides): Promise<string>

    'challenger()'(overrides?: CallOverrides): Promise<string>

    challengerTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'challengerTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    currentResponder(overrides?: CallOverrides): Promise<string>

    'currentResponder()'(overrides?: CallOverrides): Promise<string>

    currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'currentResponderTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    initializeChallenge(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: CallOverrides
    ): Promise<void>

    isMaster(overrides?: CallOverrides): Promise<boolean>

    'isMaster()'(overrides?: CallOverrides): Promise<boolean>

    lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastMoveBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    oneStepProveExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    proveContinuedExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    timeout(overrides?: CallOverrides): Promise<void>

    'timeout()'(overrides?: CallOverrides): Promise<void>

    turn(overrides?: CallOverrides): Promise<number>

    'turn()'(overrides?: CallOverrides): Promise<number>
  }

  filters: {
    AsserterTimedOut(): EventFilter

    Bisected(
      challengeRoot: BytesLike | null,
      challengedSegmentStart: null,
      challengedSegmentLength: null,
      chainHashes: null
    ): EventFilter

    ChallengerTimedOut(): EventFilter

    ContinuedExecutionProven(): EventFilter

    InitiatedChallenge(): EventFilter

    OneStepProofCompleted(): EventFilter
  }

  estimateGas: {
    asserter(overrides?: CallOverrides): Promise<BigNumber>

    'asserter()'(overrides?: CallOverrides): Promise<BigNumber>

    asserterTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'asserterTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    bisectExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>

    bridge(overrides?: CallOverrides): Promise<BigNumber>

    'bridge()'(overrides?: CallOverrides): Promise<BigNumber>

    challengeState(overrides?: CallOverrides): Promise<BigNumber>

    'challengeState()'(overrides?: CallOverrides): Promise<BigNumber>

    challenger(overrides?: CallOverrides): Promise<BigNumber>

    'challenger()'(overrides?: CallOverrides): Promise<BigNumber>

    challengerTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'challengerTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    currentResponder(overrides?: CallOverrides): Promise<BigNumber>

    'currentResponder()'(overrides?: CallOverrides): Promise<BigNumber>

    currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>

    'currentResponderTimeLeft()'(overrides?: CallOverrides): Promise<BigNumber>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initializeChallenge(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isMaster(overrides?: CallOverrides): Promise<BigNumber>

    'isMaster()'(overrides?: CallOverrides): Promise<BigNumber>

    lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastMoveBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    oneStepProveExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    proveContinuedExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    timeout(overrides?: Overrides): Promise<BigNumber>

    'timeout()'(overrides?: Overrides): Promise<BigNumber>

    turn(overrides?: CallOverrides): Promise<BigNumber>

    'turn()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    asserter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'asserter()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    asserterTimeLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'asserterTimeLeft()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    bisectExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      _chainHashes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'bridge()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    challengeState(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challengeState()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    challenger(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challenger()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    challengerTimeLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challengerTimeLeft()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentResponder(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'currentResponder()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentResponderTimeLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentResponderTimeLeft()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    executors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initializeChallenge(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _executors: string[],
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isMaster()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastMoveBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'lastMoveBlock()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oneStepProveExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256[3],bytes,bytes,uint8)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _initialMessagesRead: BigNumberish,
      _initialSendAcc: BytesLike,
      _initialLogAcc: BytesLike,
      _initialState: [BigNumberish, BigNumberish, BigNumberish],
      _executionProof: BytesLike,
      _bufferProof: BytesLike,
      prover: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    proveContinuedExecution(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)'(
      _merkleNodes: BytesLike[],
      _merkleRoute: BigNumberish,
      _challengedSegmentStart: BigNumberish,
      _challengedSegmentLength: BigNumberish,
      _oldEndHash: BytesLike,
      _gasUsedBefore: BigNumberish,
      _assertionRest: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    timeout(overrides?: Overrides): Promise<PopulatedTransaction>

    'timeout()'(overrides?: Overrides): Promise<PopulatedTransaction>

    turn(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'turn()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
