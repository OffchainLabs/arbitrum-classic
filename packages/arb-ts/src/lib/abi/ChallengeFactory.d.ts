/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ChallengeFactoryInterface extends ethers.utils.Interface {
  functions: {
    'challengeTemplate()': FunctionFragment
    'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)': FunctionFragment
    'executors(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'challengeTemplate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'createChallenge',
    values: [
      string,
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'executors',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'challengeTemplate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'executors', data: BytesLike): Result

  events: {}
}

export class ChallengeFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ChallengeFactoryInterface

  functions: {
    challengeTemplate(overrides?: CallOverrides): Promise<[string]>

    'challengeTemplate()'(overrides?: CallOverrides): Promise<[string]>

    createChallenge(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>
  }

  challengeTemplate(overrides?: CallOverrides): Promise<string>

  'challengeTemplate()'(overrides?: CallOverrides): Promise<string>

  createChallenge(
    _resultReceiver: string,
    _executionHash: BytesLike,
    _maxMessageCount: BigNumberish,
    _asserter: string,
    _challenger: string,
    _asserterTimeLeft: BigNumberish,
    _challengerTimeLeft: BigNumberish,
    _bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)'(
    _resultReceiver: string,
    _executionHash: BytesLike,
    _maxMessageCount: BigNumberish,
    _asserter: string,
    _challenger: string,
    _asserterTimeLeft: BigNumberish,
    _challengerTimeLeft: BigNumberish,
    _bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'executors(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  callStatic: {
    challengeTemplate(overrides?: CallOverrides): Promise<string>

    'challengeTemplate()'(overrides?: CallOverrides): Promise<string>

    createChallenge(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: CallOverrides
    ): Promise<string>

    'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: CallOverrides
    ): Promise<string>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    challengeTemplate(overrides?: CallOverrides): Promise<BigNumber>

    'challengeTemplate()'(overrides?: CallOverrides): Promise<BigNumber>

    createChallenge(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    executors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    challengeTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challengeTemplate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createChallenge(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'createChallenge(address,bytes32,uint256,address,address,uint256,uint256,address)'(
      _resultReceiver: string,
      _executionHash: BytesLike,
      _maxMessageCount: BigNumberish,
      _asserter: string,
      _challenger: string,
      _asserterTimeLeft: BigNumberish,
      _challengerTimeLeft: BigNumberish,
      _bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    executors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'executors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
