/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface IRollupAdminInterface extends ethers.utils.Interface {
  functions: {
    'pause()': FunctionFragment
    'removeOldOutbox(address)': FunctionFragment
    'resume()': FunctionFragment
    'setArbGasSpeedLimitPerBlock(uint256)': FunctionFragment
    'setBaseStake(uint256)': FunctionFragment
    'setChallengeExecutionBisectionDegree(uint256)': FunctionFragment
    'setConfirmPeriodBlocks(uint256)': FunctionFragment
    'setExtraChallengeTimeBlocks(uint256)': FunctionFragment
    'setFacets(address,address)': FunctionFragment
    'setInbox(address,bool)': FunctionFragment
    'setMinimumAssertionPeriod(uint256)': FunctionFragment
    'setOutbox(address)': FunctionFragment
    'setOwner(address)': FunctionFragment
    'setSequencer(address)': FunctionFragment
    'setSequencerInboxMaxDelayBlocks(uint256)': FunctionFragment
    'setSequencerInboxMaxDelaySeconds(uint256)': FunctionFragment
    'setStakeToken(address)': FunctionFragment
    'setValidator(address[],bool[])': FunctionFragment
    'setWhitelistEntries(address,address[],bool[])': FunctionFragment
    'updateWhitelistConsumers(address,address,address[])': FunctionFragment
    'upgradeBeacon(address,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeOldOutbox',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setArbGasSpeedLimitPerBlock',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setBaseStake',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setChallengeExecutionBisectionDegree',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setConfirmPeriodBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setExtraChallengeTimeBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setFacets',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setInbox',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setMinimumAssertionPeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setOutbox', values: [string]): string
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string
  encodeFunctionData(functionFragment: 'setSequencer', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setSequencerInboxMaxDelayBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setSequencerInboxMaxDelaySeconds',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setStakeToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setValidator',
    values: [string[], boolean[]]
  ): string
  encodeFunctionData(
    functionFragment: 'setWhitelistEntries',
    values: [string, string[], boolean[]]
  ): string
  encodeFunctionData(
    functionFragment: 'updateWhitelistConsumers',
    values: [string, string, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeBeacon',
    values: [string, string]
  ): string

  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeOldOutbox',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setArbGasSpeedLimitPerBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setBaseStake',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setChallengeExecutionBisectionDegree',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setConfirmPeriodBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setExtraChallengeTimeBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setFacets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInbox', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMinimumAssertionPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setOutbox', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setSequencer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSequencerInboxMaxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSequencerInboxMaxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setStakeToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setValidator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setWhitelistEntries',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateWhitelistConsumers',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'upgradeBeacon',
    data: BytesLike
  ): Result

  events: {}
}

export class IRollupAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IRollupAdminInterface

  functions: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeOldOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeOldOutbox(
    _outbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setArbGasSpeedLimitPerBlock(
    newArbGasSpeedLimitPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setBaseStake(
    newBaseStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setChallengeExecutionBisectionDegree(
    newChallengeExecutionBisectionDegree: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setConfirmPeriodBlocks(
    newConfirmPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setExtraChallengeTimeBlocks(
    newExtraTimeBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setFacets(
    newAdminFacet: string,
    newUserFacet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setInbox(
    _inbox: string,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMinimumAssertionPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOutbox(
    _outbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSequencer(
    newSequencer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSequencerInboxMaxDelayBlocks(
    newSequencerInboxMaxDelayBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSequencerInboxMaxDelaySeconds(
    newSequencerInboxMaxDelaySeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setStakeToken(
    newStakeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setValidator(
    _validator: string[],
    _val: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWhitelistEntries(
    whitelist: string,
    user: string[],
    val: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateWhitelistConsumers(
    whitelist: string,
    newWhitelist: string,
    targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  upgradeBeacon(
    beacon: string,
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    pause(overrides?: CallOverrides): Promise<void>

    removeOldOutbox(_outbox: string, overrides?: CallOverrides): Promise<void>

    resume(overrides?: CallOverrides): Promise<void>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: CallOverrides
    ): Promise<void>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setOutbox(_outbox: string, overrides?: CallOverrides): Promise<void>

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>

    setSequencer(newSequencer: string, overrides?: CallOverrides): Promise<void>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setStakeToken(
      newStakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeOldOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeOldOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
