/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface InboxCoreInterface extends ethers.utils.Interface {
  functions: {
    'inboxMaxAcc()': FunctionFragment
    'inboxMaxCount()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'inboxMaxAcc',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'inboxMaxCount',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'inboxMaxAcc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'inboxMaxCount',
    data: BytesLike
  ): Result

  events: {}
}

export class InboxCore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InboxCoreInterface

  functions: {
    inboxMaxAcc(overrides?: CallOverrides): Promise<[string]>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<[string]>

    inboxMaxCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  inboxMaxAcc(overrides?: CallOverrides): Promise<string>

  'inboxMaxAcc()'(overrides?: CallOverrides): Promise<string>

  inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

  'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    inboxMaxAcc(overrides?: CallOverrides): Promise<string>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<string>

    inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    inboxMaxAcc(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<BigNumber>

    inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    inboxMaxAcc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inboxMaxCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
