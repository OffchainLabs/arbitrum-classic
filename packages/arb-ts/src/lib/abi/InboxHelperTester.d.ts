/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface InboxHelperTesterInterface extends ethers.utils.Interface {
  functions: {
    'chainId(address)': FunctionFragment
    'requestID(uint256,address)': FunctionFragment
    'retryableTicketID(uint256,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'chainId', values: [string]): string
  encodeFunctionData(
    functionFragment: 'requestID',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'retryableTicketID',
    values: [BigNumberish, string]
  ): string

  decodeFunctionResult(functionFragment: 'chainId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'requestID', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'retryableTicketID',
    data: BytesLike
  ): Result

  events: {}
}

export class InboxHelperTester extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InboxHelperTesterInterface

  functions: {
    chainId(rollup: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'chainId(address)'(
      rollup: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    requestID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'requestID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    retryableTicketID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'retryableTicketID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<[string]>
  }

  chainId(rollup: string, overrides?: CallOverrides): Promise<BigNumber>

  'chainId(address)'(
    rollup: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  requestID(
    messageNum: BigNumberish,
    rollup: string,
    overrides?: CallOverrides
  ): Promise<string>

  'requestID(uint256,address)'(
    messageNum: BigNumberish,
    rollup: string,
    overrides?: CallOverrides
  ): Promise<string>

  retryableTicketID(
    messageNum: BigNumberish,
    rollup: string,
    overrides?: CallOverrides
  ): Promise<string>

  'retryableTicketID(uint256,address)'(
    messageNum: BigNumberish,
    rollup: string,
    overrides?: CallOverrides
  ): Promise<string>

  callStatic: {
    chainId(rollup: string, overrides?: CallOverrides): Promise<BigNumber>

    'chainId(address)'(
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requestID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<string>

    'requestID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<string>

    retryableTicketID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<string>

    'retryableTicketID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    chainId(rollup: string, overrides?: CallOverrides): Promise<BigNumber>

    'chainId(address)'(
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requestID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requestID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    retryableTicketID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'retryableTicketID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    chainId(
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'chainId(address)'(
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requestID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requestID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    retryableTicketID(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'retryableTicketID(uint256,address)'(
      messageNum: BigNumberish,
      rollup: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
