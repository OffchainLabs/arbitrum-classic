/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface EthERC20BridgeInterface extends ethers.utils.Interface {
  functions: {
    'calculateL2ERC20Address(address)': FunctionFragment
    'calculateL2ERC777Address(address)': FunctionFragment
    'codeHash()': FunctionFragment
    'customL2Tokens(address)': FunctionFragment
    'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment
    'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment
    'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment
    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)': FunctionFragment
    'finalizeBuddyDeploy(bool)': FunctionFragment
    'inbox()': FunctionFragment
    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)': FunctionFragment
    'l2Buddy()': FunctionFragment
    'l2Connection()': FunctionFragment
    'l2Deployer()': FunctionFragment
    'notifyCustomToken(address,uint256,uint256,uint256)': FunctionFragment
    'registerCustomL2Token(address)': FunctionFragment
    'updateTokenInfo(address,bool,uint256,uint256,uint256)': FunctionFragment
    'withdrawFromL2(uint256,address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'calculateL2ERC20Address',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateL2ERC777Address',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'codeHash', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'customL2Tokens',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'depositAsCustomToken',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'depositAsERC20',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'depositAsERC777',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'fastWithdrawalFromL2',
    values: [string, BytesLike, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeBuddyDeploy',
    values: [boolean]
  ): string
  encodeFunctionData(functionFragment: 'inbox', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initiateBuddyDeploy',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'l2Buddy', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'l2Connection',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'l2Deployer', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'notifyCustomToken',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'registerCustomL2Token',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'updateTokenInfo',
    values: [string, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFromL2',
    values: [BigNumberish, string, string, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'calculateL2ERC20Address',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateL2ERC777Address',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'codeHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'customL2Tokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositAsCustomToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositAsERC20',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositAsERC777',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'fastWithdrawalFromL2',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'finalizeBuddyDeploy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'inbox', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'initiateBuddyDeploy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2Buddy', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2Connection',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2Deployer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'notifyCustomToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'registerCustomL2Token',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateTokenInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFromL2',
    data: BytesLike
  ): Result

  events: {
    'ActivateCustomToken(uint256,address,address)': EventFragment
    'DeployBuddyContract(uint256,address)': EventFragment
    'DepositCustomToken(address,address,uint256,uint256,address)': EventFragment
    'DepositERC20(address,address,uint256,uint256,address)': EventFragment
    'DepositERC777(address,address,uint256,uint256,address)': EventFragment
    'UpdateTokenInfo(uint256,address,bytes,bytes,bytes)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ActivateCustomToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DeployBuddyContract'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositCustomToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositERC20'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositERC777'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateTokenInfo'): EventFragment
}

export class EthERC20Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: EthERC20BridgeInterface

  functions: {
    calculateL2ERC20Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'calculateL2ERC20Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    calculateL2ERC777Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'calculateL2ERC777Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    codeHash(overrides?: CallOverrides): Promise<[string]>

    'codeHash()'(overrides?: CallOverrides): Promise<[string]>

    customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<[string]>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    depositAsCustomToken(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'finalizeBuddyDeploy(bool)'(
      success: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    inbox(overrides?: CallOverrides): Promise<[string]>

    'inbox()'(overrides?: CallOverrides): Promise<[string]>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)'(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    l2Buddy(overrides?: CallOverrides): Promise<[string]>

    'l2Buddy()'(overrides?: CallOverrides): Promise<[string]>

    l2Connection(overrides?: CallOverrides): Promise<[number]>

    'l2Connection()'(overrides?: CallOverrides): Promise<[number]>

    l2Deployer(overrides?: CallOverrides): Promise<[string]>

    'l2Deployer()'(overrides?: CallOverrides): Promise<[string]>

    notifyCustomToken(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'notifyCustomToken(address,uint256,uint256,uint256)'(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    updateTokenInfo(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'updateTokenInfo(address,bool,uint256,uint256,uint256)'(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  calculateL2ERC20Address(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  'calculateL2ERC20Address(address)'(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  calculateL2ERC777Address(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  'calculateL2ERC777Address(address)'(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  codeHash(overrides?: CallOverrides): Promise<string>

  'codeHash()'(overrides?: CallOverrides): Promise<string>

  customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>

  'customL2Tokens(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>

  depositAsCustomToken(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  depositAsERC20(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  depositAsERC777(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  fastWithdrawalFromL2(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  finalizeBuddyDeploy(
    success: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'finalizeBuddyDeploy(bool)'(
    success: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  inbox(overrides?: CallOverrides): Promise<string>

  'inbox()'(overrides?: CallOverrides): Promise<string>

  initiateBuddyDeploy(
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    contractInitCode: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'initiateBuddyDeploy(uint256,uint256,uint256,bytes)'(
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    contractInitCode: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  l2Buddy(overrides?: CallOverrides): Promise<string>

  'l2Buddy()'(overrides?: CallOverrides): Promise<string>

  l2Connection(overrides?: CallOverrides): Promise<number>

  'l2Connection()'(overrides?: CallOverrides): Promise<number>

  l2Deployer(overrides?: CallOverrides): Promise<string>

  'l2Deployer()'(overrides?: CallOverrides): Promise<string>

  notifyCustomToken(
    l1Address: string,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'notifyCustomToken(address,uint256,uint256,uint256)'(
    l1Address: string,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  registerCustomL2Token(
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'registerCustomL2Token(address)'(
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  updateTokenInfo(
    erc20: string,
    isERC20: boolean,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'updateTokenInfo(address,bool,uint256,uint256,uint256)'(
    erc20: string,
    isERC20: boolean,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdrawFromL2(
    exitNum: BigNumberish,
    erc20: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawFromL2(uint256,address,address,uint256)'(
    exitNum: BigNumberish,
    erc20: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    calculateL2ERC20Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    'calculateL2ERC20Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    calculateL2ERC777Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    'calculateL2ERC777Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    codeHash(overrides?: CallOverrides): Promise<string>

    'codeHash()'(overrides?: CallOverrides): Promise<string>

    customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>

    depositAsCustomToken(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'finalizeBuddyDeploy(bool)'(
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    inbox(overrides?: CallOverrides): Promise<string>

    'inbox()'(overrides?: CallOverrides): Promise<string>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)'(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    l2Buddy(overrides?: CallOverrides): Promise<string>

    'l2Buddy()'(overrides?: CallOverrides): Promise<string>

    l2Connection(overrides?: CallOverrides): Promise<number>

    'l2Connection()'(overrides?: CallOverrides): Promise<number>

    l2Deployer(overrides?: CallOverrides): Promise<string>

    'l2Deployer()'(overrides?: CallOverrides): Promise<string>

    notifyCustomToken(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'notifyCustomToken(address,uint256,uint256,uint256)'(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    registerCustomL2Token(
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    updateTokenInfo(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'updateTokenInfo(address,bool,uint256,uint256,uint256)'(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    ActivateCustomToken(
      seqNum: BigNumberish | null,
      l1Address: string | null,
      l2Address: null
    ): EventFilter

    DeployBuddyContract(
      seqNum: BigNumberish | null,
      l2Address: null
    ): EventFilter

    DepositCustomToken(
      destination: string | null,
      sender: null,
      seqNum: BigNumberish | null,
      value: null,
      tokenAddress: null
    ): EventFilter

    DepositERC20(
      destination: string | null,
      sender: null,
      seqNum: BigNumberish | null,
      amount: null,
      tokenAddress: null
    ): EventFilter

    DepositERC777(
      destination: string | null,
      sender: null,
      seqNum: BigNumberish | null,
      amount: null,
      tokenAddress: null
    ): EventFilter

    UpdateTokenInfo(
      seqNum: BigNumberish | null,
      l1Address: string | null,
      name: null,
      symbol: null,
      decimals: null
    ): EventFilter
  }

  estimateGas: {
    calculateL2ERC20Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateL2ERC20Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateL2ERC777Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateL2ERC777Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    codeHash(overrides?: CallOverrides): Promise<BigNumber>

    'codeHash()'(overrides?: CallOverrides): Promise<BigNumber>

    customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositAsCustomToken(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'finalizeBuddyDeploy(bool)'(
      success: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    inbox(overrides?: CallOverrides): Promise<BigNumber>

    'inbox()'(overrides?: CallOverrides): Promise<BigNumber>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)'(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    l2Buddy(overrides?: CallOverrides): Promise<BigNumber>

    'l2Buddy()'(overrides?: CallOverrides): Promise<BigNumber>

    l2Connection(overrides?: CallOverrides): Promise<BigNumber>

    'l2Connection()'(overrides?: CallOverrides): Promise<BigNumber>

    l2Deployer(overrides?: CallOverrides): Promise<BigNumber>

    'l2Deployer()'(overrides?: CallOverrides): Promise<BigNumber>

    notifyCustomToken(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'notifyCustomToken(address,uint256,uint256,uint256)'(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    updateTokenInfo(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'updateTokenInfo(address,bool,uint256,uint256,uint256)'(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    calculateL2ERC20Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateL2ERC20Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateL2ERC777Address(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateL2ERC777Address(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    codeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'codeHash()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    customL2Tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    depositAsCustomToken(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositAsCustomToken(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositAsERC20(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositAsERC777(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'finalizeBuddyDeploy(bool)'(
      success: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)'(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    l2Buddy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2Buddy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2Connection(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2Connection()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2Deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2Deployer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    notifyCustomToken(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'notifyCustomToken(address,uint256,uint256,uint256)'(
      l1Address: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateTokenInfo(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'updateTokenInfo(address,bool,uint256,uint256,uint256)'(
      erc20: string,
      isERC20: boolean,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
