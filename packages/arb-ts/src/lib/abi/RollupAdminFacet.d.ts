/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface RollupAdminFacetInterface extends ethers.utils.Interface {
  functions: {
    '_stakerMap(address)': FunctionFragment
    'amountStaked(address)': FunctionFragment
    'arbGasSpeedLimitPerBlock()': FunctionFragment
    'baseStake()': FunctionFragment
    'challengeExecutionBisectionDegree()': FunctionFragment
    'challengeFactory()': FunctionFragment
    'confirmPeriodBlocks()': FunctionFragment
    'currentChallenge(address)': FunctionFragment
    'delayedBridge()': FunctionFragment
    'extraChallengeTimeBlocks()': FunctionFragment
    'firstUnresolvedNode()': FunctionFragment
    'getNode(uint256)': FunctionFragment
    'getNodeHash(uint256)': FunctionFragment
    'getStakerAddress(uint256)': FunctionFragment
    'isMaster()': FunctionFragment
    'isStaked(address)': FunctionFragment
    'isZombie(address)': FunctionFragment
    'lastStakeBlock()': FunctionFragment
    'latestConfirmed()': FunctionFragment
    'latestNodeCreated()': FunctionFragment
    'latestStakedNode(address)': FunctionFragment
    'minimumAssertionPeriod()': FunctionFragment
    'nodeFactory()': FunctionFragment
    'outbox()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'removeOldOutbox(address)': FunctionFragment
    'resume()': FunctionFragment
    'rollupEventBridge()': FunctionFragment
    'sequencerBridge()': FunctionFragment
    'sequencerInboxMaxDelayBlocks()': FunctionFragment
    'sequencerInboxMaxDelaySeconds()': FunctionFragment
    'setArbGasSpeedLimitPerBlock(uint256)': FunctionFragment
    'setBaseStake(uint256)': FunctionFragment
    'setChallengeExecutionBisectionDegree(uint256)': FunctionFragment
    'setConfirmPeriodBlocks(uint256)': FunctionFragment
    'setExtraChallengeTimeBlocks(uint256)': FunctionFragment
    'setFacets(address,address)': FunctionFragment
    'setInbox(address,bool)': FunctionFragment
    'setMinimumAssertionPeriod(uint256)': FunctionFragment
    'setOutbox(address)': FunctionFragment
    'setOwner(address)': FunctionFragment
    'setSequencer(address)': FunctionFragment
    'setSequencerInboxMaxDelayBlocks(uint256)': FunctionFragment
    'setSequencerInboxMaxDelaySeconds(uint256)': FunctionFragment
    'setStakeToken(address)': FunctionFragment
    'setValidator(address[],bool[])': FunctionFragment
    'setWhitelistEntries(address,address[],bool[])': FunctionFragment
    'stakeToken()': FunctionFragment
    'stakerCount()': FunctionFragment
    'updateWhitelistConsumers(address,address,address[])': FunctionFragment
    'upgradeBeacon(address,address)': FunctionFragment
    'withdrawableFunds(address)': FunctionFragment
    'zombieAddress(uint256)': FunctionFragment
    'zombieCount()': FunctionFragment
    'zombieLatestStakedNode(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_stakerMap', values: [string]): string
  encodeFunctionData(functionFragment: 'amountStaked', values: [string]): string
  encodeFunctionData(
    functionFragment: 'arbGasSpeedLimitPerBlock',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'baseStake', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'challengeExecutionBisectionDegree',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'challengeFactory',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'confirmPeriodBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'currentChallenge',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'delayedBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'extraChallengeTimeBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'firstUnresolvedNode',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNode',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeHash',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getStakerAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'isMaster', values?: undefined): string
  encodeFunctionData(functionFragment: 'isStaked', values: [string]): string
  encodeFunctionData(functionFragment: 'isZombie', values: [string]): string
  encodeFunctionData(
    functionFragment: 'lastStakeBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestConfirmed',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestNodeCreated',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestStakedNode',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'minimumAssertionPeriod',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'nodeFactory',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'outbox', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeOldOutbox',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rollupEventBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerInboxMaxDelayBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerInboxMaxDelaySeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setArbGasSpeedLimitPerBlock',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setBaseStake',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setChallengeExecutionBisectionDegree',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setConfirmPeriodBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setExtraChallengeTimeBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setFacets',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setInbox',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setMinimumAssertionPeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setOutbox', values: [string]): string
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string
  encodeFunctionData(functionFragment: 'setSequencer', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setSequencerInboxMaxDelayBlocks',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setSequencerInboxMaxDelaySeconds',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setStakeToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setValidator',
    values: [string[], boolean[]]
  ): string
  encodeFunctionData(
    functionFragment: 'setWhitelistEntries',
    values: [string, string[], boolean[]]
  ): string
  encodeFunctionData(functionFragment: 'stakeToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'stakerCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateWhitelistConsumers',
    values: [string, string, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeBeacon',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableFunds',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'zombieLatestStakedNode',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: '_stakerMap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'amountStaked',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'arbGasSpeedLimitPerBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'baseStake', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'challengeExecutionBisectionDegree',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'challengeFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmPeriodBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'delayedBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'extraChallengeTimeBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'firstUnresolvedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNodeHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getStakerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isMaster', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isStaked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isZombie', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastStakeBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestConfirmed',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestNodeCreated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestStakedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'minimumAssertionPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'nodeFactory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'outbox', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeOldOutbox',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rollupEventBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerInboxMaxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerInboxMaxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setArbGasSpeedLimitPerBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setBaseStake',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setChallengeExecutionBisectionDegree',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setConfirmPeriodBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setExtraChallengeTimeBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setFacets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInbox', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMinimumAssertionPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setOutbox', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setSequencer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSequencerInboxMaxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSequencerInboxMaxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setStakeToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setValidator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setWhitelistEntries',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'stakeToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateWhitelistConsumers',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'upgradeBeacon',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableFunds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'zombieAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'zombieCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'zombieLatestStakedNode',
    data: BytesLike
  ): Result

  events: {
    'NodeConfirmed(uint256,bytes32,uint256,bytes32,uint256)': EventFragment
    'NodeCreated(uint256,bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32[3][2],uint256[4][2])': EventFragment
    'NodeRejected(uint256)': EventFragment
    'NodesDestroyed(uint256,uint256)': EventFragment
    'OwnerFunctionCalled(uint256)': EventFragment
    'Paused(address)': EventFragment
    'RollupChallengeStarted(address,address,address,uint256)': EventFragment
    'RollupCreated(bytes32)': EventFragment
    'StakerReassigned(address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'NodeConfirmed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodeCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodeRejected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodesDestroyed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnerFunctionCalled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RollupChallengeStarted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RollupCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StakerReassigned'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class RollupAdminFacet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: RollupAdminFacetInterface

  functions: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'arbGasSpeedLimitPerBlock()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    baseStake(overrides?: CallOverrides): Promise<[BigNumber]>

    'baseStake()'(overrides?: CallOverrides): Promise<[BigNumber]>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    challengeFactory(overrides?: CallOverrides): Promise<[string]>

    'challengeFactory()'(overrides?: CallOverrides): Promise<[string]>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<[BigNumber]>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    delayedBridge(overrides?: CallOverrides): Promise<[string]>

    'delayedBridge()'(overrides?: CallOverrides): Promise<[string]>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    'extraChallengeTimeBlocks()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<[BigNumber]>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    isMaster(overrides?: CallOverrides): Promise<[boolean]>

    'isMaster()'(overrides?: CallOverrides): Promise<[boolean]>

    isStaked(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isZombie(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    lastStakeBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestConfirmed(overrides?: CallOverrides): Promise<[BigNumber]>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestNodeCreated(overrides?: CallOverrides): Promise<[BigNumber]>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>

    nodeFactory(overrides?: CallOverrides): Promise<[string]>

    'nodeFactory()'(overrides?: CallOverrides): Promise<[string]>

    outbox(overrides?: CallOverrides): Promise<[string]>

    'outbox()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides): Promise<ContractTransaction>

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    removeOldOutbox(
      _outbox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeOldOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    resume(overrides?: Overrides): Promise<ContractTransaction>

    'resume()'(overrides?: Overrides): Promise<ContractTransaction>

    rollupEventBridge(overrides?: CallOverrides): Promise<[string]>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<[string]>

    sequencerBridge(overrides?: CallOverrides): Promise<[string]>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<[string]>

    sequencerInboxMaxDelayBlocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    sequencerInboxMaxDelaySeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setArbGasSpeedLimitPerBlock(uint256)'(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setBaseStake(uint256)'(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setChallengeExecutionBisectionDegree(uint256)'(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setConfirmPeriodBlocks(uint256)'(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setExtraChallengeTimeBlocks(uint256)'(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFacets(address,address)'(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setInbox(address,bool)'(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setMinimumAssertionPeriod(uint256)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setOutbox(
      _outbox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setOwner(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSequencerInboxMaxDelayBlocks(uint256)'(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSequencerInboxMaxDelaySeconds(uint256)'(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setStakeToken(address)'(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setValidator(address[],bool[])'(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setWhitelistEntries(address,address[],bool[])'(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    stakeToken(overrides?: CallOverrides): Promise<[string]>

    'stakeToken()'(overrides?: CallOverrides): Promise<[string]>

    stakerCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'stakerCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateWhitelistConsumers(address,address,address[])'(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'upgradeBeacon(address,address)'(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    zombieCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'zombieCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>
  }

  _stakerMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      index: BigNumber
      latestStakedNode: BigNumber
      amountStaked: BigNumber
      currentChallenge: string
      isStaked: boolean
    }
  >

  '_stakerMap(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      index: BigNumber
      latestStakedNode: BigNumber
      amountStaked: BigNumber
      currentChallenge: string
      isStaked: boolean
    }
  >

  amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

  'amountStaked(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

  'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  baseStake(overrides?: CallOverrides): Promise<BigNumber>

  'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

  challengeExecutionBisectionDegree(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'challengeExecutionBisectionDegree()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  challengeFactory(overrides?: CallOverrides): Promise<string>

  'challengeFactory()'(overrides?: CallOverrides): Promise<string>

  confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

  currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

  'currentChallenge(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<string>

  delayedBridge(overrides?: CallOverrides): Promise<string>

  'delayedBridge()'(overrides?: CallOverrides): Promise<string>

  extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

  firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

  'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

  getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getNode(uint256)'(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getNodeHash(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getStakerAddress(
    stakerNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'getStakerAddress(uint256)'(
    stakerNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  isMaster(overrides?: CallOverrides): Promise<boolean>

  'isMaster()'(overrides?: CallOverrides): Promise<boolean>

  isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

  'isStaked(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

  'isZombie(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

  'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

  'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

  latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

  'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

  latestStakedNode(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'latestStakedNode(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

  'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

  nodeFactory(overrides?: CallOverrides): Promise<string>

  'nodeFactory()'(overrides?: CallOverrides): Promise<string>

  outbox(overrides?: CallOverrides): Promise<string>

  'outbox()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides): Promise<ContractTransaction>

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  removeOldOutbox(
    _outbox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeOldOutbox(address)'(
    _outbox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  resume(overrides?: Overrides): Promise<ContractTransaction>

  'resume()'(overrides?: Overrides): Promise<ContractTransaction>

  rollupEventBridge(overrides?: CallOverrides): Promise<string>

  'rollupEventBridge()'(overrides?: CallOverrides): Promise<string>

  sequencerBridge(overrides?: CallOverrides): Promise<string>

  'sequencerBridge()'(overrides?: CallOverrides): Promise<string>

  sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'sequencerInboxMaxDelayBlocks()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

  'sequencerInboxMaxDelaySeconds()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  setArbGasSpeedLimitPerBlock(
    newArbGasSpeedLimitPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setArbGasSpeedLimitPerBlock(uint256)'(
    newArbGasSpeedLimitPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setBaseStake(
    newBaseStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setBaseStake(uint256)'(
    newBaseStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setChallengeExecutionBisectionDegree(
    newChallengeExecutionBisectionDegree: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setChallengeExecutionBisectionDegree(uint256)'(
    newChallengeExecutionBisectionDegree: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setConfirmPeriodBlocks(
    newConfirmPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setConfirmPeriodBlocks(uint256)'(
    newConfirmPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setExtraChallengeTimeBlocks(
    newExtraTimeBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setExtraChallengeTimeBlocks(uint256)'(
    newExtraTimeBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFacets(
    newAdminFacet: string,
    newUserFacet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFacets(address,address)'(
    newAdminFacet: string,
    newUserFacet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setInbox(
    _inbox: string,
    _enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setInbox(address,bool)'(
    _inbox: string,
    _enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setMinimumAssertionPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setMinimumAssertionPeriod(uint256)'(
    newPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setOutbox(
    _outbox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setOutbox(address)'(
    _outbox: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setOwner(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setSequencer(
    newSequencer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSequencer(address)'(
    newSequencer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setSequencerInboxMaxDelayBlocks(
    newSequencerInboxMaxDelayBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSequencerInboxMaxDelayBlocks(uint256)'(
    newSequencerInboxMaxDelayBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setSequencerInboxMaxDelaySeconds(
    newSequencerInboxMaxDelaySeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSequencerInboxMaxDelaySeconds(uint256)'(
    newSequencerInboxMaxDelaySeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setStakeToken(
    newStakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setStakeToken(address)'(
    newStakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setValidator(
    _validator: string[],
    _val: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setValidator(address[],bool[])'(
    _validator: string[],
    _val: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setWhitelistEntries(
    whitelist: string,
    user: string[],
    val: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setWhitelistEntries(address,address[],bool[])'(
    whitelist: string,
    user: string[],
    val: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  stakeToken(overrides?: CallOverrides): Promise<string>

  'stakeToken()'(overrides?: CallOverrides): Promise<string>

  stakerCount(overrides?: CallOverrides): Promise<BigNumber>

  'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

  updateWhitelistConsumers(
    whitelist: string,
    newWhitelist: string,
    targets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateWhitelistConsumers(address,address,address[])'(
    whitelist: string,
    newWhitelist: string,
    targets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  upgradeBeacon(
    beacon: string,
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'upgradeBeacon(address,address)'(
    beacon: string,
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawableFunds(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'withdrawableFunds(address)'(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  zombieAddress(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'zombieAddress(uint256)'(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  zombieCount(overrides?: CallOverrides): Promise<BigNumber>

  'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

  zombieLatestStakedNode(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'zombieLatestStakedNode(uint256)'(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    baseStake(overrides?: CallOverrides): Promise<BigNumber>

    'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    challengeFactory(overrides?: CallOverrides): Promise<string>

    'challengeFactory()'(overrides?: CallOverrides): Promise<string>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<string>

    delayedBridge(overrides?: CallOverrides): Promise<string>

    'delayedBridge()'(overrides?: CallOverrides): Promise<string>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    isMaster(overrides?: CallOverrides): Promise<boolean>

    'isMaster()'(overrides?: CallOverrides): Promise<boolean>

    isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    nodeFactory(overrides?: CallOverrides): Promise<string>

    'nodeFactory()'(overrides?: CallOverrides): Promise<string>

    outbox(overrides?: CallOverrides): Promise<string>

    'outbox()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    'pause()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    removeOldOutbox(_outbox: string, overrides?: CallOverrides): Promise<void>

    'removeOldOutbox(address)'(
      _outbox: string,
      overrides?: CallOverrides
    ): Promise<void>

    resume(overrides?: CallOverrides): Promise<void>

    'resume()'(overrides?: CallOverrides): Promise<void>

    rollupEventBridge(overrides?: CallOverrides): Promise<string>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<string>

    sequencerBridge(overrides?: CallOverrides): Promise<string>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<string>

    sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setArbGasSpeedLimitPerBlock(uint256)'(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setBaseStake(uint256)'(
      newBaseStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setChallengeExecutionBisectionDegree(uint256)'(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setConfirmPeriodBlocks(uint256)'(
      newConfirmPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setExtraChallengeTimeBlocks(uint256)'(
      newExtraTimeBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setFacets(address,address)'(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: CallOverrides
    ): Promise<void>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'setInbox(address,bool)'(
      _inbox: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setMinimumAssertionPeriod(uint256)'(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setOutbox(_outbox: string, overrides?: CallOverrides): Promise<void>

    'setOutbox(address)'(
      _outbox: string,
      overrides?: CallOverrides
    ): Promise<void>

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>

    'setOwner(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    setSequencer(newSequencer: string, overrides?: CallOverrides): Promise<void>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: CallOverrides
    ): Promise<void>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setSequencerInboxMaxDelayBlocks(uint256)'(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setSequencerInboxMaxDelaySeconds(uint256)'(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setStakeToken(
      newStakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setStakeToken(address)'(
      newStakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    'setValidator(address[],bool[])'(
      _validator: string[],
      _val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    'setWhitelistEntries(address,address[],bool[])'(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    stakeToken(overrides?: CallOverrides): Promise<string>

    'stakeToken()'(overrides?: CallOverrides): Promise<string>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    'updateWhitelistConsumers(address,address,address[])'(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    'upgradeBeacon(address,address)'(
      beacon: string,
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    NodeConfirmed(
      nodeNum: BigNumberish | null,
      afterSendAcc: null,
      afterSendCount: null,
      afterLogAcc: null,
      afterLogCount: null
    ): EventFilter

    NodeCreated(
      nodeNum: BigNumberish | null,
      parentNodeHash: BytesLike | null,
      nodeHash: null,
      executionHash: null,
      inboxMaxCount: null,
      afterInboxBatchEndCount: null,
      afterInboxBatchAcc: null,
      assertionBytes32Fields: null,
      assertionIntFields: null
    ): EventFilter

    NodeRejected(nodeNum: BigNumberish | null): EventFilter

    NodesDestroyed(
      startNode: BigNumberish | null,
      endNode: BigNumberish | null
    ): EventFilter

    OwnerFunctionCalled(id: BigNumberish | null): EventFilter

    Paused(account: null): EventFilter

    RollupChallengeStarted(
      challengeContract: string | null,
      asserter: null,
      challenger: null,
      challengedNode: null
    ): EventFilter

    RollupCreated(machineHash: null): EventFilter

    StakerReassigned(staker: string | null, newNode: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    _stakerMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    baseStake(overrides?: CallOverrides): Promise<BigNumber>

    'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    challengeFactory(overrides?: CallOverrides): Promise<BigNumber>

    'challengeFactory()'(overrides?: CallOverrides): Promise<BigNumber>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    delayedBridge(overrides?: CallOverrides): Promise<BigNumber>

    'delayedBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isMaster(overrides?: CallOverrides): Promise<BigNumber>

    'isMaster()'(overrides?: CallOverrides): Promise<BigNumber>

    isStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isZombie(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    nodeFactory(overrides?: CallOverrides): Promise<BigNumber>

    'nodeFactory()'(overrides?: CallOverrides): Promise<BigNumber>

    outbox(overrides?: CallOverrides): Promise<BigNumber>

    'outbox()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides): Promise<BigNumber>

    'pause()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    removeOldOutbox(_outbox: string, overrides?: Overrides): Promise<BigNumber>

    'removeOldOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    resume(overrides?: Overrides): Promise<BigNumber>

    'resume()'(overrides?: Overrides): Promise<BigNumber>

    rollupEventBridge(overrides?: CallOverrides): Promise<BigNumber>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    sequencerBridge(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setArbGasSpeedLimitPerBlock(uint256)'(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setBaseStake(uint256)'(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setChallengeExecutionBisectionDegree(uint256)'(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setConfirmPeriodBlocks(uint256)'(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setExtraChallengeTimeBlocks(uint256)'(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFacets(address,address)'(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setInbox(address,bool)'(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setMinimumAssertionPeriod(uint256)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setOutbox(_outbox: string, overrides?: Overrides): Promise<BigNumber>

    'setOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>

    'setOwner(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSequencerInboxMaxDelayBlocks(uint256)'(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSequencerInboxMaxDelaySeconds(uint256)'(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setStakeToken(address)'(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'setValidator(address[],bool[])'(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'setWhitelistEntries(address,address[],bool[])'(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>

    'stakeToken()'(overrides?: CallOverrides): Promise<BigNumber>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateWhitelistConsumers(address,address,address[])'(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'upgradeBeacon(address,address)'(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    arbGasSpeedLimitPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'arbGasSpeedLimitPerBlock()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    baseStake(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'baseStake()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    challengeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challengeFactory()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    confirmPeriodBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'confirmPeriodBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    delayedBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'delayedBridge()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    extraChallengeTimeBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'extraChallengeTimeBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    firstUnresolvedNode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'firstUnresolvedNode()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isMaster()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isZombie(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastStakeBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestConfirmed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestConfirmed()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    latestNodeCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestNodeCreated()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    minimumAssertionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'minimumAssertionPeriod()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    nodeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nodeFactory()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    outbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'outbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides): Promise<PopulatedTransaction>

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeOldOutbox(
      _outbox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeOldOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    resume(overrides?: Overrides): Promise<PopulatedTransaction>

    'resume()'(overrides?: Overrides): Promise<PopulatedTransaction>

    rollupEventBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rollupEventBridge()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sequencerBridge()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerInboxMaxDelayBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerInboxMaxDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setArbGasSpeedLimitPerBlock(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setArbGasSpeedLimitPerBlock(uint256)'(
      newArbGasSpeedLimitPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setBaseStake(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setBaseStake(uint256)'(
      newBaseStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setChallengeExecutionBisectionDegree(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setChallengeExecutionBisectionDegree(uint256)'(
      newChallengeExecutionBisectionDegree: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setConfirmPeriodBlocks(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setConfirmPeriodBlocks(uint256)'(
      newConfirmPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setExtraChallengeTimeBlocks(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setExtraChallengeTimeBlocks(uint256)'(
      newExtraTimeBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFacets(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFacets(address,address)'(
      newAdminFacet: string,
      newUserFacet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setInbox(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setInbox(address,bool)'(
      _inbox: string,
      _enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setMinimumAssertionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setMinimumAssertionPeriod(uint256)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setOutbox(
      _outbox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setOutbox(address)'(
      _outbox: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setOwner(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setSequencerInboxMaxDelayBlocks(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSequencerInboxMaxDelayBlocks(uint256)'(
      newSequencerInboxMaxDelayBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setSequencerInboxMaxDelaySeconds(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSequencerInboxMaxDelaySeconds(uint256)'(
      newSequencerInboxMaxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setStakeToken(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setStakeToken(address)'(
      newStakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setValidator(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setValidator(address[],bool[])'(
      _validator: string[],
      _val: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setWhitelistEntries(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setWhitelistEntries(address,address[],bool[])'(
      whitelist: string,
      user: string[],
      val: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stakeToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stakerCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateWhitelistConsumers(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateWhitelistConsumers(address,address,address[])'(
      whitelist: string,
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    upgradeBeacon(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'upgradeBeacon(address,address)'(
      beacon: string,
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'zombieCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
