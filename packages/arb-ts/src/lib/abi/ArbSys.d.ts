/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ArbSysInterface extends ethers.utils.Interface {
  functions: {
    'arbBlockNumber()': FunctionFragment
    'arbChainID()': FunctionFragment
    'arbOSVersion()': FunctionFragment
    'getStorageAt(address,uint256)': FunctionFragment
    'getTransactionCount(address)': FunctionFragment
    'isTopLevelCall()': FunctionFragment
    'sendTxToL1(address,bytes)': FunctionFragment
    'withdrawEth(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'arbBlockNumber',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'arbChainID', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'arbOSVersion',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStorageAt',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTransactionCount',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'isTopLevelCall',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sendTxToL1',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'withdrawEth', values: [string]): string

  decodeFunctionResult(
    functionFragment: 'arbBlockNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'arbChainID', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'arbOSVersion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStorageAt',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTransactionCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isTopLevelCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'sendTxToL1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawEth', data: BytesLike): Result

  events: {
    'EthWithdrawal(address,uint256)': EventFragment
    'L2ToL1Transaction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EthWithdrawal'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'L2ToL1Transaction'): EventFragment
}

export class ArbSys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ArbSysInterface

  functions: {
    arbBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>

    arbChainID(overrides?: CallOverrides): Promise<[BigNumber]>

    arbOSVersion(overrides?: CallOverrides): Promise<[BigNumber]>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    isTopLevelCall(overrides?: CallOverrides): Promise<[boolean]>

    sendTxToL1(
      destination: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawEth(
      destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

  arbChainID(overrides?: CallOverrides): Promise<BigNumber>

  arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

  getStorageAt(
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getTransactionCount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  isTopLevelCall(overrides?: CallOverrides): Promise<boolean>

  sendTxToL1(
    destination: string,
    calldataForL1: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawEth(
    destination: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    arbChainID(overrides?: CallOverrides): Promise<BigNumber>

    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isTopLevelCall(overrides?: CallOverrides): Promise<boolean>

    sendTxToL1(
      destination: string,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawEth(
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    EthWithdrawal(
      destAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { destAddr: string; amount: BigNumber }
    >

    L2ToL1Transaction(
      caller?: null,
      destination?: string | null,
      uniqueId?: BigNumberish | null,
      batchNumber?: BigNumberish | null,
      indexInBatch?: null,
      arbBlockNum?: null,
      ethBlockNum?: null,
      timestamp?: null,
      callvalue?: null,
      data?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        caller: string
        destination: string
        uniqueId: BigNumber
        batchNumber: BigNumber
        indexInBatch: BigNumber
        arbBlockNum: BigNumber
        ethBlockNum: BigNumber
        timestamp: BigNumber
        callvalue: BigNumber
        data: string
      }
    >
  }

  estimateGas: {
    arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    arbChainID(overrides?: CallOverrides): Promise<BigNumber>

    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isTopLevelCall(overrides?: CallOverrides): Promise<BigNumber>

    sendTxToL1(
      destination: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawEth(
      destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    arbBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>

    arbChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    arbOSVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isTopLevelCall(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sendTxToL1(
      destination: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawEth(
      destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
