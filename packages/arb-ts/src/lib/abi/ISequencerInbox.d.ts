/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ISequencerInboxInterface extends ethers.utils.Interface {
  functions: {
    'inboxAccs(uint256)': FunctionFragment
    'maxDelayBlocks()': FunctionFragment
    'maxDelaySeconds()': FunctionFragment
    'messageCount()': FunctionFragment
    'proveBatchContainsSequenceNumber(bytes,uint256)': FunctionFragment
    'setSequencer(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'inboxAccs',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'maxDelayBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'maxDelaySeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'messageCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'proveBatchContainsSequenceNumber',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setSequencer', values: [string]): string

  decodeFunctionResult(functionFragment: 'inboxAccs', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'maxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'maxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'messageCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proveBatchContainsSequenceNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSequencer',
    data: BytesLike
  ): Result

  events: {
    'DelayedInboxForced(uint256,bytes32,uint256,uint256,bytes32[2],uint256)': EventFragment
    'SequencerAddressUpdated(address)': EventFragment
    'SequencerBatchDelivered(uint256,bytes32,uint256,bytes32,bytes,uint256[],uint256[],uint256,address)': EventFragment
    'SequencerBatchDeliveredFromOrigin(uint256,bytes32,uint256,bytes32,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DelayedInboxForced'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SequencerAddressUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SequencerBatchDelivered'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'SequencerBatchDeliveredFromOrigin'
  ): EventFragment
}

export class ISequencerInbox extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ISequencerInboxInterface

  functions: {
    inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'inboxAccs(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    maxDelayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    'maxDelayBlocks()'(overrides?: CallOverrides): Promise<[BigNumber]>

    maxDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>

    'maxDelaySeconds()'(overrides?: CallOverrides): Promise<[BigNumber]>

    messageCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'messageCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    'proveBatchContainsSequenceNumber(bytes,uint256)'(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>

  'inboxAccs(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'maxDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

  maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

  'maxDelaySeconds()'(overrides?: CallOverrides): Promise<BigNumber>

  messageCount(overrides?: CallOverrides): Promise<BigNumber>

  'messageCount()'(overrides?: CallOverrides): Promise<BigNumber>

  proveBatchContainsSequenceNumber(
    proof: BytesLike,
    inboxCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  'proveBatchContainsSequenceNumber(bytes,uint256)'(
    proof: BytesLike,
    inboxCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  setSequencer(
    newSequencer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSequencer(address)'(
    newSequencer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    'inboxAccs(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'maxDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'maxDelaySeconds()'(overrides?: CallOverrides): Promise<BigNumber>

    messageCount(overrides?: CallOverrides): Promise<BigNumber>

    'messageCount()'(overrides?: CallOverrides): Promise<BigNumber>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    'proveBatchContainsSequenceNumber(bytes,uint256)'(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    setSequencer(newSequencer: string, overrides?: CallOverrides): Promise<void>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    DelayedInboxForced(
      firstMessageNum: BigNumberish | null,
      beforeAcc: BytesLike | null,
      newMessageCount: null,
      totalDelayedMessagesRead: null,
      afterAccAndDelayed: null,
      seqBatchIndex: null
    ): EventFilter

    SequencerAddressUpdated(newAddress: null): EventFilter

    SequencerBatchDelivered(
      firstMessageNum: BigNumberish | null,
      beforeAcc: BytesLike | null,
      newMessageCount: null,
      afterAcc: null,
      transactions: null,
      lengths: null,
      sectionsMetadata: null,
      seqBatchIndex: null,
      sequencer: null
    ): EventFilter

    SequencerBatchDeliveredFromOrigin(
      firstMessageNum: BigNumberish | null,
      beforeAcc: BytesLike | null,
      newMessageCount: null,
      afterAcc: null,
      seqBatchIndex: null
    ): EventFilter
  }

  estimateGas: {
    inboxAccs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'inboxAccs(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'maxDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'maxDelaySeconds()'(overrides?: CallOverrides): Promise<BigNumber>

    messageCount(overrides?: CallOverrides): Promise<BigNumber>

    'messageCount()'(overrides?: CallOverrides): Promise<BigNumber>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'proveBatchContainsSequenceNumber(bytes,uint256)'(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    inboxAccs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'inboxAccs(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxDelayBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'maxDelayBlocks()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxDelaySeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'maxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'messageCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'proveBatchContainsSequenceNumber(bytes,uint256)'(
      proof: BytesLike,
      inboxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setSequencer(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSequencer(address)'(
      newSequencer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
