/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import { Contract, ContractTransaction } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface UpgradeableProxyInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export class UpgradeableProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: UpgradeableProxyInterface

  functions: {}

  callStatic: {}

  filters: {
    Upgraded(implementation: string | null): EventFilter
  }

  estimateGas: {}

  populateTransaction: {}
}
