/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface SequencerInboxInterface extends ethers.utils.Interface {
  functions: {
    'addSequencerL2Batch(bytes,uint256[],uint256[],bytes32)': FunctionFragment
    'addSequencerL2BatchFromOrigin(bytes,uint256[],uint256[],bytes32)': FunctionFragment
    'delayedInbox()': FunctionFragment
    'forceInclusion(uint256,uint8,uint256[2],uint256,uint256,address,bytes32,bytes32)': FunctionFragment
    'getInboxAccsLength()': FunctionFragment
    'inboxAccs(uint256)': FunctionFragment
    'initialize(address,address,address)': FunctionFragment
    'isMaster()': FunctionFragment
    'isSequencer(address)': FunctionFragment
    'maxDelayBlocks()': FunctionFragment
    'maxDelaySeconds()': FunctionFragment
    'messageCount()': FunctionFragment
    'postUpgradeInit()': FunctionFragment
    'proveBatchContainsSequenceNumber(bytes,uint256)': FunctionFragment
    'proveInboxContainsMessage(bytes,uint256)': FunctionFragment
    'rollup()': FunctionFragment
    'sequencer()': FunctionFragment
    'setIsSequencer(address,bool)': FunctionFragment
    'setMaxDelay(uint256,uint256)': FunctionFragment
    'totalDelayedMessagesRead()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addSequencerL2Batch',
    values: [BytesLike, BigNumberish[], BigNumberish[], BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'addSequencerL2BatchFromOrigin',
    values: [BytesLike, BigNumberish[], BigNumberish[], BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'delayedInbox',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'forceInclusion',
    values: [
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getInboxAccsLength',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'inboxAccs',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string]
  ): string
  encodeFunctionData(functionFragment: 'isMaster', values?: undefined): string
  encodeFunctionData(functionFragment: 'isSequencer', values: [string]): string
  encodeFunctionData(
    functionFragment: 'maxDelayBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'maxDelaySeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'messageCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'postUpgradeInit',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'proveBatchContainsSequenceNumber',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'proveInboxContainsMessage',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'rollup', values?: undefined): string
  encodeFunctionData(functionFragment: 'sequencer', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setIsSequencer',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxDelay',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'totalDelayedMessagesRead',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'addSequencerL2Batch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addSequencerL2BatchFromOrigin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'delayedInbox',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'forceInclusion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInboxAccsLength',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'inboxAccs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isMaster', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isSequencer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'maxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'maxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'messageCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'postUpgradeInit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proveBatchContainsSequenceNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proveInboxContainsMessage',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rollup', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sequencer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setIsSequencer',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setMaxDelay', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalDelayedMessagesRead',
    data: BytesLike
  ): Result

  events: {
    'DelayedInboxForced(uint256,bytes32,uint256,uint256,bytes32[2],uint256)': EventFragment
    'IsSequencerUpdated(address,bool)': EventFragment
    'MaxDelayUpdated(uint256,uint256)': EventFragment
    'SequencerBatchDelivered(uint256,bytes32,uint256,bytes32,bytes,uint256[],uint256[],uint256,address)': EventFragment
    'SequencerBatchDeliveredFromOrigin(uint256,bytes32,uint256,bytes32,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DelayedInboxForced'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'IsSequencerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MaxDelayUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SequencerBatchDelivered'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'SequencerBatchDeliveredFromOrigin'
  ): EventFragment
}

export class SequencerInbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SequencerInboxInterface

  functions: {
    addSequencerL2Batch(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    addSequencerL2BatchFromOrigin(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    delayedInbox(overrides?: CallOverrides): Promise<[string]>

    forceInclusion(
      _totalDelayedMessagesRead: BigNumberish,
      kind: BigNumberish,
      l1BlockAndTimestamp: [BigNumberish, BigNumberish],
      inboxSeqNum: BigNumberish,
      gasPriceL1: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      delayedAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getInboxAccsLength(overrides?: CallOverrides): Promise<[BigNumber]>

    inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    initialize(
      _delayedInbox: string,
      _sequencer: string,
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isMaster(overrides?: CallOverrides): Promise<[boolean]>

    isSequencer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    maxDelayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    maxDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>

    messageCount(overrides?: CallOverrides): Promise<[BigNumber]>

    postUpgradeInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    proveInboxContainsMessage(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    rollup(overrides?: CallOverrides): Promise<[string]>

    sequencer(overrides?: CallOverrides): Promise<[string]>

    setIsSequencer(
      addr: string,
      newIsSequencer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMaxDelay(
      newMaxDelayBlocks: BigNumberish,
      newMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  addSequencerL2Batch(
    transactions: BytesLike,
    lengths: BigNumberish[],
    sectionsMetadata: BigNumberish[],
    afterAcc: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  addSequencerL2BatchFromOrigin(
    transactions: BytesLike,
    lengths: BigNumberish[],
    sectionsMetadata: BigNumberish[],
    afterAcc: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  delayedInbox(overrides?: CallOverrides): Promise<string>

  forceInclusion(
    _totalDelayedMessagesRead: BigNumberish,
    kind: BigNumberish,
    l1BlockAndTimestamp: [BigNumberish, BigNumberish],
    inboxSeqNum: BigNumberish,
    gasPriceL1: BigNumberish,
    sender: string,
    messageDataHash: BytesLike,
    delayedAcc: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getInboxAccsLength(overrides?: CallOverrides): Promise<BigNumber>

  inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  initialize(
    _delayedInbox: string,
    _sequencer: string,
    _rollup: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isMaster(overrides?: CallOverrides): Promise<boolean>

  isSequencer(arg0: string, overrides?: CallOverrides): Promise<boolean>

  maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

  maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

  messageCount(overrides?: CallOverrides): Promise<BigNumber>

  postUpgradeInit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  proveBatchContainsSequenceNumber(
    proof: BytesLike,
    _messageCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  proveInboxContainsMessage(
    proof: BytesLike,
    _messageCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  rollup(overrides?: CallOverrides): Promise<string>

  sequencer(overrides?: CallOverrides): Promise<string>

  setIsSequencer(
    addr: string,
    newIsSequencer: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMaxDelay(
    newMaxDelayBlocks: BigNumberish,
    newMaxDelaySeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    addSequencerL2Batch(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    addSequencerL2BatchFromOrigin(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    delayedInbox(overrides?: CallOverrides): Promise<string>

    forceInclusion(
      _totalDelayedMessagesRead: BigNumberish,
      kind: BigNumberish,
      l1BlockAndTimestamp: [BigNumberish, BigNumberish],
      inboxSeqNum: BigNumberish,
      gasPriceL1: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      delayedAcc: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    getInboxAccsLength(overrides?: CallOverrides): Promise<BigNumber>

    inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    initialize(
      _delayedInbox: string,
      _sequencer: string,
      _rollup: string,
      overrides?: CallOverrides
    ): Promise<void>

    isMaster(overrides?: CallOverrides): Promise<boolean>

    isSequencer(arg0: string, overrides?: CallOverrides): Promise<boolean>

    maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    messageCount(overrides?: CallOverrides): Promise<BigNumber>

    postUpgradeInit(overrides?: CallOverrides): Promise<void>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    proveInboxContainsMessage(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    rollup(overrides?: CallOverrides): Promise<string>

    sequencer(overrides?: CallOverrides): Promise<string>

    setIsSequencer(
      addr: string,
      newIsSequencer: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setMaxDelay(
      newMaxDelayBlocks: BigNumberish,
      newMaxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    DelayedInboxForced(
      firstMessageNum?: BigNumberish | null,
      beforeAcc?: BytesLike | null,
      newMessageCount?: null,
      totalDelayedMessagesRead?: null,
      afterAccAndDelayed?: null,
      seqBatchIndex?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, [string, string], BigNumber],
      {
        firstMessageNum: BigNumber
        beforeAcc: string
        newMessageCount: BigNumber
        totalDelayedMessagesRead: BigNumber
        afterAccAndDelayed: [string, string]
        seqBatchIndex: BigNumber
      }
    >

    IsSequencerUpdated(
      addr?: null,
      isSequencer?: null
    ): TypedEventFilter<
      [string, boolean],
      { addr: string; isSequencer: boolean }
    >

    MaxDelayUpdated(
      newMaxDelayBlocks?: null,
      newMaxDelaySeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newMaxDelayBlocks: BigNumber; newMaxDelaySeconds: BigNumber }
    >

    SequencerBatchDelivered(
      firstMessageNum?: BigNumberish | null,
      beforeAcc?: BytesLike | null,
      newMessageCount?: null,
      afterAcc?: null,
      transactions?: null,
      lengths?: null,
      sectionsMetadata?: null,
      seqBatchIndex?: null,
      sequencer?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber[],
        BigNumber[],
        BigNumber,
        string
      ],
      {
        firstMessageNum: BigNumber
        beforeAcc: string
        newMessageCount: BigNumber
        afterAcc: string
        transactions: string
        lengths: BigNumber[]
        sectionsMetadata: BigNumber[]
        seqBatchIndex: BigNumber
        sequencer: string
      }
    >

    SequencerBatchDeliveredFromOrigin(
      firstMessageNum?: BigNumberish | null,
      beforeAcc?: BytesLike | null,
      newMessageCount?: null,
      afterAcc?: null,
      seqBatchIndex?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        firstMessageNum: BigNumber
        beforeAcc: string
        newMessageCount: BigNumber
        afterAcc: string
        seqBatchIndex: BigNumber
      }
    >
  }

  estimateGas: {
    addSequencerL2Batch(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    addSequencerL2BatchFromOrigin(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    delayedInbox(overrides?: CallOverrides): Promise<BigNumber>

    forceInclusion(
      _totalDelayedMessagesRead: BigNumberish,
      kind: BigNumberish,
      l1BlockAndTimestamp: [BigNumberish, BigNumberish],
      inboxSeqNum: BigNumberish,
      gasPriceL1: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      delayedAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getInboxAccsLength(overrides?: CallOverrides): Promise<BigNumber>

    inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _delayedInbox: string,
      _sequencer: string,
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isMaster(overrides?: CallOverrides): Promise<BigNumber>

    isSequencer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    maxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    messageCount(overrides?: CallOverrides): Promise<BigNumber>

    postUpgradeInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proveInboxContainsMessage(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rollup(overrides?: CallOverrides): Promise<BigNumber>

    sequencer(overrides?: CallOverrides): Promise<BigNumber>

    setIsSequencer(
      addr: string,
      newIsSequencer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMaxDelay(
      newMaxDelayBlocks: BigNumberish,
      newMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addSequencerL2Batch(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    addSequencerL2BatchFromOrigin(
      transactions: BytesLike,
      lengths: BigNumberish[],
      sectionsMetadata: BigNumberish[],
      afterAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    delayedInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    forceInclusion(
      _totalDelayedMessagesRead: BigNumberish,
      kind: BigNumberish,
      l1BlockAndTimestamp: [BigNumberish, BigNumberish],
      inboxSeqNum: BigNumberish,
      gasPriceL1: BigNumberish,
      sender: string,
      messageDataHash: BytesLike,
      delayedAcc: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getInboxAccsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inboxAccs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _delayedInbox: string,
      _sequencer: string,
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isSequencer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxDelayBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxDelaySeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    postUpgradeInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    proveBatchContainsSequenceNumber(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    proveInboxContainsMessage(
      proof: BytesLike,
      _messageCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sequencer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setIsSequencer(
      addr: string,
      newIsSequencer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMaxDelay(
      newMaxDelayBlocks: BigNumberish,
      newMaxDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    totalDelayedMessagesRead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
