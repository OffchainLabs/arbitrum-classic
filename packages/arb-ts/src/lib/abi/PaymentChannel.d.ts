/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface PaymentChannelInterface extends ethers.utils.Interface {
  functions: {
    'deposit()': FunctionFragment
    'getBalance(address)': FunctionFragment
    'testCreate()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFib(address,uint256)': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string
  encodeFunctionData(functionFragment: 'getBalance', values: [string]): string
  encodeFunctionData(functionFragment: 'testCreate', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFib',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'testCreate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFib', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Deposited(address,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Withdrawn(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment
}

export class PaymentChannel extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: PaymentChannelInterface

  functions: {
    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>

    'deposit()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    getBalance(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'getBalance(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    testCreate(overrides?: Overrides): Promise<ContractTransaction>

    'testCreate()'(overrides?: Overrides): Promise<ContractTransaction>

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFib(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFib(address,uint256)'(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>

  'deposit()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  getBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>

  'getBalance(address)'(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  testCreate(overrides?: Overrides): Promise<ContractTransaction>

  'testCreate()'(overrides?: Overrides): Promise<ContractTransaction>

  transfer(
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFib(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFib(address,uint256)'(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    deposit(overrides?: CallOverrides): Promise<void>

    'deposit()'(overrides?: CallOverrides): Promise<void>

    getBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    'getBalance(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    testCreate(overrides?: CallOverrides): Promise<BigNumber>

    'testCreate()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'transfer(address,uint256)'(
      dest: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    transferFib(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'transferFib(address,uint256)'(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Deposited(payee: string | null, weiAmount: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Withdrawn(payee: string | null, weiAmount: null): EventFilter
  }

  estimateGas: {
    deposit(overrides?: PayableOverrides): Promise<BigNumber>

    'deposit()'(overrides?: PayableOverrides): Promise<BigNumber>

    getBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    'getBalance(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    testCreate(overrides?: Overrides): Promise<BigNumber>

    'testCreate()'(overrides?: Overrides): Promise<BigNumber>

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFib(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFib(address,uint256)'(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'deposit()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    getBalance(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBalance(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    testCreate(overrides?: Overrides): Promise<PopulatedTransaction>

    'testCreate()'(overrides?: Overrides): Promise<PopulatedTransaction>

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFib(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFib(address,uint256)'(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
