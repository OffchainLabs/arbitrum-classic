/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IEthERC20BridgeInterface extends ethers.utils.Interface {
  functions: {
    'calculateL2TokenAddress(address)': FunctionFragment
    'deposit(address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment
    'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)': FunctionFragment
    'getDepositCalldata(address,address,address,uint256,bytes)': FunctionFragment
    'hasTriedDeploy(address)': FunctionFragment
    'registerCustomL2Token(address,uint256,uint256,uint256,address)': FunctionFragment
    'withdrawFromL2(uint256,address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'calculateL2TokenAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'fastWithdrawalFromL2',
    values: [
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getDepositCalldata',
    values: [string, string, string, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasTriedDeploy',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'registerCustomL2Token',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFromL2',
    values: [BigNumberish, string, string, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'calculateL2TokenAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'fastWithdrawalFromL2',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDepositCalldata',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasTriedDeploy',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'registerCustomL2Token',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFromL2',
    data: BytesLike
  ): Result

  events: {
    'ActivateCustomToken(uint256,address,address)': EventFragment
    'DeployToken(uint256,address)': EventFragment
    'DepositToken(address,address,uint256,uint256,address)': EventFragment
    'WithdrawExecuted(address,address,address,uint256,uint256)': EventFragment
    'WithdrawRedirected(address,address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ActivateCustomToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DeployToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawRedirected'): EventFragment
}

export class IEthERC20Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IEthERC20BridgeInterface

  functions: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'calculateL2TokenAddress(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'deposit(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >

    'getDepositCalldata(address,address,address,uint256,bytes)'(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >

    hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<[boolean]>

    'hasTriedDeploy(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'registerCustomL2Token(address,uint256,uint256,uint256,address)'(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  calculateL2TokenAddress(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  'calculateL2TokenAddress(address)'(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>

  deposit(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'deposit(address,address,uint256,uint256,uint256,uint256,bytes)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  fastWithdrawalFromL2(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    initialDestination: string,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    maxFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)'(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    initialDestination: string,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    maxFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getDepositCalldata(
    erc20: string,
    destination: string,
    sender: string,
    amount: BigNumberish,
    callHookData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { isDeployed: boolean; depositCalldata: string }
  >

  'getDepositCalldata(address,address,address,uint256,bytes)'(
    erc20: string,
    destination: string,
    sender: string,
    amount: BigNumberish,
    callHookData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { isDeployed: boolean; depositCalldata: string }
  >

  hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<boolean>

  'hasTriedDeploy(address)'(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  registerCustomL2Token(
    l2CustomTokenAddress: string,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    refundAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'registerCustomL2Token(address,uint256,uint256,uint256,address)'(
    l2CustomTokenAddress: string,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    refundAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdrawFromL2(
    exitNum: BigNumberish,
    erc20: string,
    initialDestination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawFromL2(uint256,address,address,uint256)'(
    exitNum: BigNumberish,
    erc20: string,
    initialDestination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    'calculateL2TokenAddress(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        seqNum: BigNumber
        depositCalldataLength: BigNumber
      }
    >

    'deposit(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        seqNum: BigNumber
        depositCalldataLength: BigNumber
      }
    >

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >

    'getDepositCalldata(address,address,address,uint256,bytes)'(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >

    hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<boolean>

    'hasTriedDeploy(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'registerCustomL2Token(address,uint256,uint256,uint256,address)'(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    ActivateCustomToken(
      seqNum: BigNumberish | null,
      l1Address: string | null,
      l2Address: null
    ): EventFilter

    DeployToken(
      seqNum: BigNumberish | null,
      l1Address: string | null
    ): EventFilter

    DepositToken(
      destination: string | null,
      sender: null,
      seqNum: BigNumberish | null,
      value: null,
      tokenAddress: string | null
    ): EventFilter

    WithdrawExecuted(
      initialDestination: string | null,
      destination: string | null,
      erc20: null,
      amount: null,
      exitNum: BigNumberish | null
    ): EventFilter

    WithdrawRedirected(
      user: string | null,
      liquidityProvider: string | null,
      erc20: null,
      amount: null,
      exitNum: BigNumberish | null
    ): EventFilter
  }

  estimateGas: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateL2TokenAddress(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'deposit(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getDepositCalldata(address,address,address,uint256,bytes)'(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<BigNumber>

    'hasTriedDeploy(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'registerCustomL2Token(address,uint256,uint256,uint256,address)'(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateL2TokenAddress(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'deposit(address,address,uint256,uint256,uint256,uint256,bytes)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'fastWithdrawalFromL2(address,bytes,address,address,uint256,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getDepositCalldata(address,address,address,uint256,bytes)'(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hasTriedDeploy(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'hasTriedDeploy(address)'(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'registerCustomL2Token(address,uint256,uint256,uint256,address)'(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
