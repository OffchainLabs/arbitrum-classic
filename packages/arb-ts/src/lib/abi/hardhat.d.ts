/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'ERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>
    getContractFactory(
      name: 'IERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>
    getContractFactory(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>
    getContractFactory(
      name: 'BeaconProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>
    getContractFactory(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>
    getContractFactory(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>
    getContractFactory(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>
    getContractFactory(
      name: 'UpgradeableBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>
    getContractFactory(
      name: 'UpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableProxy__factory>
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>
    getContractFactory(
      name: 'IBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>
    getContractFactory(
      name: 'IInbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>
    getContractFactory(
      name: 'IMessageProvider',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageProvider__factory>
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>
    getContractFactory(
      name: 'Cloneable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cloneable__factory>
    getContractFactory(
      name: 'ICloneable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICloneable__factory>
    getContractFactory(
      name: 'Whitelist',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>
    getContractFactory(
      name: 'WhitelistConsumer',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistConsumer__factory>
    getContractFactory(
      name: 'ArbSys',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>
    getContractFactory(
      name: 'ArbMulticall2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbMulticall2__factory>
    getContractFactory(
      name: 'Multicall2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>
    getContractFactory(
      name: 'NodeInterface',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeInterface__factory>
    getContractFactory(
      name: 'RetryableTicketCreator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RetryableTicketCreator__factory>
    getContractFactory(
      name: 'L2ArbitrumGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ArbitrumGateway__factory>
    getContractFactory(
      name: 'L2CustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CustomGateway__factory>
    getContractFactory(
      name: 'L2ERC20Gateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ERC20Gateway__factory>
    getContractFactory(
      name: 'L2GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayRouter__factory>
    getContractFactory(
      name: 'L2WethGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2WethGateway__factory>
    getContractFactory(
      name: 'IArbToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbToken__factory>
    getContractFactory(
      name: 'L2ArbitrumMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ArbitrumMessenger__factory>
    getContractFactory(
      name: 'StandardArbERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardArbERC20__factory>
    getContractFactory(
      name: 'ITradeableExitReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITradeableExitReceiver__factory>
    getContractFactory(
      name: 'L1ArbitrumExtendedGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumExtendedGateway__factory>
    getContractFactory(
      name: 'L1ArbitrumGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumGateway__factory>
    getContractFactory(
      name: 'L1CustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CustomGateway__factory>
    getContractFactory(
      name: 'L1ERC20Gateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ERC20Gateway__factory>
    getContractFactory(
      name: 'L1GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1GatewayRouter__factory>
    getContractFactory(
      name: 'L1WethGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1WethGateway__factory>
    getContractFactory(
      name: 'ArbitrumEnabledToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumEnabledToken__factory>
    getContractFactory(
      name: 'ICustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomToken__factory>
    getContractFactory(
      name: 'L1ArbitrumMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumMessenger__factory>
    getContractFactory(
      name: 'AeERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AeERC20__factory>
    getContractFactory(
      name: 'AeWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AeWETH__factory>
    getContractFactory(
      name: 'BeaconProxyFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxyFactory__factory>
    getContractFactory(
      name: 'ClonableBeaconProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableBeaconProxy__factory>
    getContractFactory(
      name: 'ProxySetter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxySetter__factory>
    getContractFactory(
      name: 'GatewayRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayRouter__factory>
    getContractFactory(
      name: 'ICustomGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomGateway__factory>
    getContractFactory(
      name: 'ITokenGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenGateway__factory>
    getContractFactory(
      name: 'TokenGateway',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenGateway__factory>
    getContractFactory(
      name: 'ITransferAndCall',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferAndCall__factory>
    getContractFactory(
      name: 'ITransferAndCallReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferAndCallReceiver__factory>
    getContractFactory(
      name: 'IWETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>
    getContractFactory(
      name: 'L2GatewayToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayToken__factory>
    getContractFactory(
      name: 'TransferAndCallToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferAndCallToken__factory>
    getContractFactory(
      name: 'AddressMappingTest',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressMappingTest__factory>
    getContractFactory(
      name: 'L1ArbitrumTestMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ArbitrumTestMessenger__factory>
    getContractFactory(
      name: 'L1CustomGatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CustomGatewayTester__factory>
    getContractFactory(
      name: 'L1GatewayRouterTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1GatewayRouterTester__factory>
    getContractFactory(
      name: 'L1GatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1GatewayTester__factory>
    getContractFactory(
      name: 'L1WethGatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1WethGatewayTester__factory>
    getContractFactory(
      name: 'L2ArbitrumTestMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ArbitrumTestMessenger__factory>
    getContractFactory(
      name: 'L2CustomGatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CustomGatewayTester__factory>
    getContractFactory(
      name: 'L2GatewayRouterTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayRouterTester__factory>
    getContractFactory(
      name: 'L2GatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GatewayTester__factory>
    getContractFactory(
      name: 'L2WethGatewayTester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2WethGatewayTester__factory>
    getContractFactory(
      name: 'InboxMock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InboxMock__factory>
    getContractFactory(
      name: 'TestArbCustomToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestArbCustomToken__factory>
    getContractFactory(
      name: 'TestCustomTokenL1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCustomTokenL1__factory>
    getContractFactory(
      name: 'TestERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>
    getContractFactory(
      name: 'L2Called',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2Called__factory>
    getContractFactory(
      name: 'TestWETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWETH9__factory>

    getContractAt(
      name: 'ERC20PermitUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>
    getContractAt(
      name: 'IERC20PermitUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>
    getContractAt(
      name: 'IERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>
    getContractAt(
      name: 'BeaconProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>
    getContractAt(
      name: 'IBeacon',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>
    getContractAt(
      name: 'Proxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>
    getContractAt(
      name: 'ProxyAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>
    getContractAt(
      name: 'TransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>
    getContractAt(
      name: 'UpgradeableBeacon',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>
    getContractAt(
      name: 'UpgradeableProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableProxy>
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>
    getContractAt(
      name: 'IBridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>
    getContractAt(
      name: 'IInbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInbox>
    getContractAt(
      name: 'IMessageProvider',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageProvider>
    getContractAt(
      name: 'IOutbox',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOutbox>
    getContractAt(
      name: 'Cloneable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cloneable>
    getContractAt(
      name: 'ICloneable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICloneable>
    getContractAt(
      name: 'Whitelist',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>
    getContractAt(
      name: 'WhitelistConsumer',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistConsumer>
    getContractAt(
      name: 'ArbSys',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>
    getContractAt(
      name: 'ArbMulticall2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbMulticall2>
    getContractAt(
      name: 'Multicall2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>
    getContractAt(
      name: 'NodeInterface',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeInterface>
    getContractAt(
      name: 'RetryableTicketCreator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RetryableTicketCreator>
    getContractAt(
      name: 'L2ArbitrumGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ArbitrumGateway>
    getContractAt(
      name: 'L2CustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CustomGateway>
    getContractAt(
      name: 'L2ERC20Gateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ERC20Gateway>
    getContractAt(
      name: 'L2GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayRouter>
    getContractAt(
      name: 'L2WethGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2WethGateway>
    getContractAt(
      name: 'IArbToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbToken>
    getContractAt(
      name: 'L2ArbitrumMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ArbitrumMessenger>
    getContractAt(
      name: 'StandardArbERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardArbERC20>
    getContractAt(
      name: 'ITradeableExitReceiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITradeableExitReceiver>
    getContractAt(
      name: 'L1ArbitrumExtendedGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumExtendedGateway>
    getContractAt(
      name: 'L1ArbitrumGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumGateway>
    getContractAt(
      name: 'L1CustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CustomGateway>
    getContractAt(
      name: 'L1ERC20Gateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ERC20Gateway>
    getContractAt(
      name: 'L1GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1GatewayRouter>
    getContractAt(
      name: 'L1WethGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1WethGateway>
    getContractAt(
      name: 'ArbitrumEnabledToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumEnabledToken>
    getContractAt(
      name: 'ICustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomToken>
    getContractAt(
      name: 'L1ArbitrumMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumMessenger>
    getContractAt(
      name: 'AeERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AeERC20>
    getContractAt(
      name: 'AeWETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AeWETH>
    getContractAt(
      name: 'BeaconProxyFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxyFactory>
    getContractAt(
      name: 'ClonableBeaconProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableBeaconProxy>
    getContractAt(
      name: 'ProxySetter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxySetter>
    getContractAt(
      name: 'GatewayRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayRouter>
    getContractAt(
      name: 'ICustomGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomGateway>
    getContractAt(
      name: 'ITokenGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenGateway>
    getContractAt(
      name: 'TokenGateway',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenGateway>
    getContractAt(
      name: 'ITransferAndCall',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferAndCall>
    getContractAt(
      name: 'ITransferAndCallReceiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferAndCallReceiver>
    getContractAt(
      name: 'IWETH9',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>
    getContractAt(
      name: 'L2GatewayToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayToken>
    getContractAt(
      name: 'TransferAndCallToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferAndCallToken>
    getContractAt(
      name: 'AddressMappingTest',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressMappingTest>
    getContractAt(
      name: 'L1ArbitrumTestMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ArbitrumTestMessenger>
    getContractAt(
      name: 'L1CustomGatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CustomGatewayTester>
    getContractAt(
      name: 'L1GatewayRouterTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1GatewayRouterTester>
    getContractAt(
      name: 'L1GatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1GatewayTester>
    getContractAt(
      name: 'L1WethGatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1WethGatewayTester>
    getContractAt(
      name: 'L2ArbitrumTestMessenger',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ArbitrumTestMessenger>
    getContractAt(
      name: 'L2CustomGatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CustomGatewayTester>
    getContractAt(
      name: 'L2GatewayRouterTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayRouterTester>
    getContractAt(
      name: 'L2GatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GatewayTester>
    getContractAt(
      name: 'L2WethGatewayTester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2WethGatewayTester>
    getContractAt(
      name: 'InboxMock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InboxMock>
    getContractAt(
      name: 'TestArbCustomToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestArbCustomToken>
    getContractAt(
      name: 'TestCustomTokenL1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCustomTokenL1>
    getContractAt(
      name: 'TestERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>
    getContractAt(
      name: 'L2Called',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2Called>
    getContractAt(
      name: 'TestWETH9',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWETH9>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>
  }
}
