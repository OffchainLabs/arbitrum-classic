/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface MachineTesterInterface extends ethers.utils.Interface {
  functions: {
    'addStackVal(bytes,bytes)': FunctionFragment
    'deserializeMachine(bytes)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addStackVal',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'deserializeMachine',
    values: [BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'addStackVal', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'deserializeMachine',
    data: BytesLike
  ): Result

  events: {}
}

export class MachineTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: MachineTesterInterface

  functions: {
    addStackVal(
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    deserializeMachine(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>
  }

  addStackVal(
    data1: BytesLike,
    data2: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  deserializeMachine(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  callStatic: {
    addStackVal(
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    deserializeMachine(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>
  }

  filters: {}

  estimateGas: {
    addStackVal(
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deserializeMachine(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addStackVal(
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deserializeMachine(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
