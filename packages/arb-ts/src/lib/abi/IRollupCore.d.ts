/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface IRollupCoreInterface extends ethers.utils.Interface {
  functions: {
    '_stakerMap(address)': FunctionFragment
    'amountStaked(address)': FunctionFragment
    'currentChallenge(address)': FunctionFragment
    'firstUnresolvedNode()': FunctionFragment
    'getNode(uint256)': FunctionFragment
    'getNodeHash(uint256)': FunctionFragment
    'getStakerAddress(uint256)': FunctionFragment
    'isStaked(address)': FunctionFragment
    'isZombie(address)': FunctionFragment
    'lastStakeBlock()': FunctionFragment
    'latestConfirmed()': FunctionFragment
    'latestNodeCreated()': FunctionFragment
    'latestStakedNode(address)': FunctionFragment
    'stakerCount()': FunctionFragment
    'withdrawableFunds(address)': FunctionFragment
    'zombieAddress(uint256)': FunctionFragment
    'zombieCount()': FunctionFragment
    'zombieLatestStakedNode(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_stakerMap', values: [string]): string
  encodeFunctionData(functionFragment: 'amountStaked', values: [string]): string
  encodeFunctionData(
    functionFragment: 'currentChallenge',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'firstUnresolvedNode',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNode',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeHash',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getStakerAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'isStaked', values: [string]): string
  encodeFunctionData(functionFragment: 'isZombie', values: [string]): string
  encodeFunctionData(
    functionFragment: 'lastStakeBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestConfirmed',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestNodeCreated',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestStakedNode',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'stakerCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableFunds',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'zombieLatestStakedNode',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: '_stakerMap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'amountStaked',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'firstUnresolvedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNodeHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getStakerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isStaked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isZombie', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastStakeBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestConfirmed',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestNodeCreated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestStakedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'stakerCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableFunds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'zombieAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'zombieCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'zombieLatestStakedNode',
    data: BytesLike
  ): Result

  events: {}
}

export class IRollupCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IRollupCoreInterface

  functions: {
    _stakerMap(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string, boolean]>

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<[BigNumber]>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    isStaked(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    isZombie(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    lastStakeBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    latestConfirmed(overrides?: CallOverrides): Promise<[BigNumber]>

    latestNodeCreated(overrides?: CallOverrides): Promise<[BigNumber]>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    stakerCount(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    zombieCount(overrides?: CallOverrides): Promise<[BigNumber]>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>
  }

  _stakerMap(
    stakerAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, string, boolean]>

  amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

  currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

  firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

  getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

  getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

  getStakerAddress(
    stakerNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

  isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

  lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

  latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

  latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

  latestStakedNode(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  stakerCount(overrides?: CallOverrides): Promise<BigNumber>

  withdrawableFunds(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  zombieAddress(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  zombieCount(overrides?: CallOverrides): Promise<BigNumber>

  zombieLatestStakedNode(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    _stakerMap(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string, boolean]>

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

    getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

    isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    _stakerMap(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    isZombie(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _stakerMap(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    firstUnresolvedNode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isZombie(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastStakeBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestConfirmed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestNodeCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    stakerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
