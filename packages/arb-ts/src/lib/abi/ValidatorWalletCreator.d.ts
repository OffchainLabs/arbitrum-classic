/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ValidatorWalletCreatorInterface extends ethers.utils.Interface {
  functions: {
    'createWallet()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setTemplate(address)': FunctionFragment
    'template()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'createWallet',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'setTemplate', values: [string]): string
  encodeFunctionData(functionFragment: 'template', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'createWallet',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setTemplate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'template', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'TemplateUpdated()': EventFragment
    'WalletCreated(address,address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TemplateUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WalletCreated'): EventFragment
}

export class ValidatorWalletCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ValidatorWalletCreatorInterface

  functions: {
    createWallet(overrides?: Overrides): Promise<ContractTransaction>

    'createWallet()'(overrides?: Overrides): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setTemplate(address)'(
      _template: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    template(overrides?: CallOverrides): Promise<[string]>

    'template()'(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  createWallet(overrides?: Overrides): Promise<ContractTransaction>

  'createWallet()'(overrides?: Overrides): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setTemplate(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setTemplate(address)'(
    _template: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  template(overrides?: CallOverrides): Promise<string>

  'template()'(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    createWallet(overrides?: CallOverrides): Promise<string>

    'createWallet()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setTemplate(_template: string, overrides?: CallOverrides): Promise<void>

    'setTemplate(address)'(
      _template: string,
      overrides?: CallOverrides
    ): Promise<void>

    template(overrides?: CallOverrides): Promise<string>

    'template()'(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    TemplateUpdated(): EventFilter

    WalletCreated(
      walletAddress: string | null,
      userAddress: string | null,
      adminProxy: null
    ): EventFilter
  }

  estimateGas: {
    createWallet(overrides?: Overrides): Promise<BigNumber>

    'createWallet()'(overrides?: Overrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setTemplate(_template: string, overrides?: Overrides): Promise<BigNumber>

    'setTemplate(address)'(
      _template: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    template(overrides?: CallOverrides): Promise<BigNumber>

    'template()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    createWallet(overrides?: Overrides): Promise<PopulatedTransaction>

    'createWallet()'(overrides?: Overrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setTemplate(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setTemplate(address)'(
      _template: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'template()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
