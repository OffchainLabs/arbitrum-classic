/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface BridgeProxyInterface extends ethers.utils.Interface {
  functions: {
    'deployL2ContractPair(uint256,uint256,uint256,bytes)': FunctionFragment
    'depositEthMessage(address)': FunctionFragment
    'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)': FunctionFragment
    'inboxInfo()': FunctionFragment
    'inboxMaxAcc()': FunctionFragment
    'inboxMaxCount()': FunctionFragment
    'initialize(bytes)': FunctionFragment
    'l2ToL1Block()': FunctionFragment
    'l2ToL1Sender()': FunctionFragment
    'l2ToL1Timestamp()': FunctionFragment
    'processOutgoingMessages(bytes,uint256[])': FunctionFragment
    'rollup()': FunctionFragment
    'sendL2Message(bytes)': FunctionFragment
    'sendL2MessageFromOrigin(bytes)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'deployL2ContractPair',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'depositEthMessage',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'executeTransaction',
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'inboxInfo', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'inboxMaxAcc',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'inboxMaxCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Block',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Timestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'processOutgoingMessages',
    values: [BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(functionFragment: 'rollup', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'sendL2Message',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'sendL2MessageFromOrigin',
    values: [BytesLike]
  ): string

  decodeFunctionResult(
    functionFragment: 'deployL2ContractPair',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositEthMessage',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'executeTransaction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'inboxInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'inboxMaxAcc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'inboxMaxCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'l2ToL1Block', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Timestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'processOutgoingMessages',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rollup', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'sendL2Message',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sendL2MessageFromOrigin',
    data: BytesLike
  ): Result

  events: {
    'BuddyContractPair(address)': EventFragment
    'MessageDelivered(uint256,bytes32,uint8,address,bytes)': EventFragment
    'MessageDeliveredFromOrigin(uint256,bytes32,uint8,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BuddyContractPair'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MessageDelivered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MessageDeliveredFromOrigin'): EventFragment
}

export class BridgeProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: BridgeProxyInterface

  functions: {
    deployL2ContractPair(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'deployL2ContractPair(uint256,uint256,uint256,bytes)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    depositEthMessage(
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositEthMessage(address)'(
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    inboxInfo(overrides?: CallOverrides): Promise<[BigNumber, string]>

    'inboxInfo()'(overrides?: CallOverrides): Promise<[BigNumber, string]>

    inboxMaxAcc(overrides?: CallOverrides): Promise<[string]>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<[string]>

    inboxMaxCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    initialize(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(bytes)'(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    l2ToL1Block(overrides?: CallOverrides): Promise<[BigNumber]>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<[string]>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rollup(overrides?: CallOverrides): Promise<[string]>

    'rollup()'(overrides?: CallOverrides): Promise<[string]>

    sendL2Message(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendL2Message(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    sendL2MessageFromOrigin(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendL2MessageFromOrigin(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  deployL2ContractPair(
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    payment: BigNumberish,
    contractData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'deployL2ContractPair(uint256,uint256,uint256,bytes)'(
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    payment: BigNumberish,
    contractData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  depositEthMessage(
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositEthMessage(address)'(
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  executeTransaction(
    outboxIndex: BigNumberish,
    proof: BytesLike,
    index: BigNumberish,
    l2Sender: string,
    destAddr: string,
    l2Block: BigNumberish,
    l2Timestamp: BigNumberish,
    amount: BigNumberish,
    calldataForL1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)'(
    outboxIndex: BigNumberish,
    proof: BytesLike,
    index: BigNumberish,
    l2Sender: string,
    destAddr: string,
    l2Block: BigNumberish,
    l2Timestamp: BigNumberish,
    amount: BigNumberish,
    calldataForL1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  inboxInfo(overrides?: CallOverrides): Promise<[BigNumber, string]>

  'inboxInfo()'(overrides?: CallOverrides): Promise<[BigNumber, string]>

  inboxMaxAcc(overrides?: CallOverrides): Promise<string>

  'inboxMaxAcc()'(overrides?: CallOverrides): Promise<string>

  inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

  'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    initializationMessage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(bytes)'(
    initializationMessage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

  'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1Sender(overrides?: CallOverrides): Promise<string>

  'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>

  l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

  'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  processOutgoingMessages(
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'processOutgoingMessages(bytes,uint256[])'(
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rollup(overrides?: CallOverrides): Promise<string>

  'rollup()'(overrides?: CallOverrides): Promise<string>

  sendL2Message(
    messageData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendL2Message(bytes)'(
    messageData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  sendL2MessageFromOrigin(
    messageData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendL2MessageFromOrigin(bytes)'(
    messageData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    deployL2ContractPair(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'deployL2ContractPair(uint256,uint256,uint256,bytes)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    depositEthMessage(to: string, overrides?: CallOverrides): Promise<void>

    'depositEthMessage(address)'(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>

    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    inboxInfo(overrides?: CallOverrides): Promise<[BigNumber, string]>

    'inboxInfo()'(overrides?: CallOverrides): Promise<[BigNumber, string]>

    inboxMaxAcc(overrides?: CallOverrides): Promise<string>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<string>

    inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      initializationMessage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(bytes)'(
      initializationMessage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<string>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    rollup(overrides?: CallOverrides): Promise<string>

    'rollup()'(overrides?: CallOverrides): Promise<string>

    sendL2Message(
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'sendL2Message(bytes)'(
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    sendL2MessageFromOrigin(
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'sendL2MessageFromOrigin(bytes)'(
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    BuddyContractPair(sender: string | null): EventFilter

    MessageDelivered(
      messageNum: BigNumberish | null,
      beforeInboxAcc: BytesLike | null,
      kind: null,
      sender: null,
      data: null
    ): EventFilter

    MessageDeliveredFromOrigin(
      messageNum: BigNumberish | null,
      beforeInboxAcc: BytesLike | null,
      kind: null,
      sender: null
    ): EventFilter
  }

  estimateGas: {
    deployL2ContractPair(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'deployL2ContractPair(uint256,uint256,uint256,bytes)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    depositEthMessage(
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositEthMessage(address)'(
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    inboxInfo(overrides?: CallOverrides): Promise<BigNumber>

    'inboxInfo()'(overrides?: CallOverrides): Promise<BigNumber>

    inboxMaxAcc(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<BigNumber>

    inboxMaxCount(overrides?: CallOverrides): Promise<BigNumber>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(bytes)'(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    rollup(overrides?: CallOverrides): Promise<BigNumber>

    'rollup()'(overrides?: CallOverrides): Promise<BigNumber>

    sendL2Message(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendL2Message(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    sendL2MessageFromOrigin(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendL2MessageFromOrigin(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    deployL2ContractPair(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'deployL2ContractPair(uint256,uint256,uint256,bytes)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    depositEthMessage(
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositEthMessage(address)'(
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'executeTransaction(uint256,bytes,uint256,address,address,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike,
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    inboxInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inboxInfo()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inboxMaxAcc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inboxMaxAcc()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inboxMaxCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'inboxMaxCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(bytes)'(
      initializationMessage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    l2ToL1Block(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Timestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rollup()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sendL2Message(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendL2Message(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    sendL2MessageFromOrigin(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendL2MessageFromOrigin(bytes)'(
      messageData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
