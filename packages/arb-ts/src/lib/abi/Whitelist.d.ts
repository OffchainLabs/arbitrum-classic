/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface WhitelistInterface extends ethers.utils.Interface {
  functions: {
    'isAllowed(address)': FunctionFragment
    'owner()': FunctionFragment
    'setOwner(address)': FunctionFragment
    'setWhitelist(address[],bool[])': FunctionFragment
    'triggerConsumers(address,address[])': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'isAllowed', values: [string]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setWhitelist',
    values: [string[], boolean[]]
  ): string
  encodeFunctionData(
    functionFragment: 'triggerConsumers',
    values: [string, string[]]
  ): string

  decodeFunctionResult(functionFragment: 'isAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'triggerConsumers',
    data: BytesLike
  ): Result

  events: {
    'OwnerUpdated(address)': EventFragment
    'WhitelistUpgraded(address,address[])': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WhitelistUpgraded'): EventFragment
}

export class Whitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: WhitelistInterface

  functions: {
    isAllowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWhitelist(
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    triggerConsumers(
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWhitelist(
    user: string[],
    val: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  triggerConsumers(
    newWhitelist: string,
    targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    isAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>

    setWhitelist(
      user: string[],
      val: boolean[],
      overrides?: CallOverrides
    ): Promise<void>

    triggerConsumers(
      newWhitelist: string,
      targets: string[],
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OwnerUpdated(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>

    WhitelistUpgraded(
      newWhitelist?: null,
      targets?: null
    ): TypedEventFilter<
      [string, string[]],
      { newWhitelist: string; targets: string[] }
    >
  }

  estimateGas: {
    isAllowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWhitelist(
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    triggerConsumers(
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    isAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWhitelist(
      user: string[],
      val: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    triggerConsumers(
      newWhitelist: string,
      targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
