/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface InboxTopChallengeInterface extends Interface {
  functions: {
    bisect: TypedFunctionDescription<{
      encode([_chainHashes, _chainLength]: [Arrayish[], BigNumberish]): string
    }>

    chooseSegment: TypedFunctionDescription<{
      encode([_segmentToChallenge, _proof, _bisectionRoot, _bisectionHash]: [
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish
      ]): string
    }>

    initializeBisection: TypedFunctionDescription<{
      encode([
        _rollupAddress,
        _asserter,
        _challenger,
        _challengePeriodTicks,
        _challengeState,
      ]: [string, string, string, BigNumberish, Arrayish]): string
    }>

    isMaster: TypedFunctionDescription<{ encode([]: []): string }>

    oneStepProof: TypedFunctionDescription<{
      encode([_lowerHash, _value]: [Arrayish, Arrayish]): string
    }>

    timeoutChallenge: TypedFunctionDescription<{ encode([]: []): string }>
  }

  events: {
    AsserterTimedOut: TypedEventDescription<{ encodeTopics([]: []): string[] }>

    Bisected: TypedEventDescription<{
      encodeTopics([chainHashes, totalLength, deadlineTicks]: [
        null,
        null,
        null
      ]): string[]
    }>

    ChallengerTimedOut: TypedEventDescription<{
      encodeTopics([]: []): string[]
    }>

    Continued: TypedEventDescription<{
      encodeTopics([segmentIndex, deadlineTicks]: [null, null]): string[]
    }>

    InitiatedChallenge: TypedEventDescription<{
      encodeTopics([deadlineTicks]: [null]): string[]
    }>

    OneStepProofCompleted: TypedEventDescription<{
      encodeTopics([]: []): string[]
    }>
  }
}

export class InboxTopChallenge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): InboxTopChallenge
  attach(addressOrName: string): InboxTopChallenge
  deployed(): Promise<InboxTopChallenge>

  on(event: EventFilter | string, listener: Listener): InboxTopChallenge
  once(event: EventFilter | string, listener: Listener): InboxTopChallenge
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): InboxTopChallenge
  removeAllListeners(eventName: EventFilter | string): InboxTopChallenge
  removeListener(eventName: any, listener: Listener): InboxTopChallenge

  interface: InboxTopChallengeInterface

  functions: {
    bisect(
      _chainHashes: Arrayish[],
      _chainLength: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'bisect(bytes32[],uint256)'(
      _chainHashes: Arrayish[],
      _chainLength: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    chooseSegment(
      _segmentToChallenge: BigNumberish,
      _proof: Arrayish,
      _bisectionRoot: Arrayish,
      _bisectionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'chooseSegment(uint256,bytes,bytes32,bytes32)'(
      _segmentToChallenge: BigNumberish,
      _proof: Arrayish,
      _bisectionRoot: Arrayish,
      _bisectionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    initializeBisection(
      _rollupAddress: string,
      _asserter: string,
      _challenger: string,
      _challengePeriodTicks: BigNumberish,
      _challengeState: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'initializeBisection(address,address,address,uint256,bytes32)'(
      _rollupAddress: string,
      _asserter: string,
      _challenger: string,
      _challengePeriodTicks: BigNumberish,
      _challengeState: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    isMaster(overrides?: TransactionOverrides): Promise<boolean>

    'isMaster()'(overrides?: TransactionOverrides): Promise<boolean>

    oneStepProof(
      _lowerHash: Arrayish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'oneStepProof(bytes32,bytes32)'(
      _lowerHash: Arrayish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    timeoutChallenge(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'timeoutChallenge()'(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>
  }

  bisect(
    _chainHashes: Arrayish[],
    _chainLength: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'bisect(bytes32[],uint256)'(
    _chainHashes: Arrayish[],
    _chainLength: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  chooseSegment(
    _segmentToChallenge: BigNumberish,
    _proof: Arrayish,
    _bisectionRoot: Arrayish,
    _bisectionHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'chooseSegment(uint256,bytes,bytes32,bytes32)'(
    _segmentToChallenge: BigNumberish,
    _proof: Arrayish,
    _bisectionRoot: Arrayish,
    _bisectionHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  initializeBisection(
    _rollupAddress: string,
    _asserter: string,
    _challenger: string,
    _challengePeriodTicks: BigNumberish,
    _challengeState: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'initializeBisection(address,address,address,uint256,bytes32)'(
    _rollupAddress: string,
    _asserter: string,
    _challenger: string,
    _challengePeriodTicks: BigNumberish,
    _challengeState: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  isMaster(overrides?: TransactionOverrides): Promise<boolean>

  'isMaster()'(overrides?: TransactionOverrides): Promise<boolean>

  oneStepProof(
    _lowerHash: Arrayish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'oneStepProof(bytes32,bytes32)'(
    _lowerHash: Arrayish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  timeoutChallenge(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'timeoutChallenge()'(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  filters: {
    AsserterTimedOut(): EventFilter

    Bisected(
      chainHashes: null,
      totalLength: null,
      deadlineTicks: null
    ): EventFilter

    ChallengerTimedOut(): EventFilter

    Continued(segmentIndex: null, deadlineTicks: null): EventFilter

    InitiatedChallenge(deadlineTicks: null): EventFilter

    OneStepProofCompleted(): EventFilter
  }

  estimate: {
    bisect(
      _chainHashes: Arrayish[],
      _chainLength: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'bisect(bytes32[],uint256)'(
      _chainHashes: Arrayish[],
      _chainLength: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    chooseSegment(
      _segmentToChallenge: BigNumberish,
      _proof: Arrayish,
      _bisectionRoot: Arrayish,
      _bisectionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'chooseSegment(uint256,bytes,bytes32,bytes32)'(
      _segmentToChallenge: BigNumberish,
      _proof: Arrayish,
      _bisectionRoot: Arrayish,
      _bisectionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    initializeBisection(
      _rollupAddress: string,
      _asserter: string,
      _challenger: string,
      _challengePeriodTicks: BigNumberish,
      _challengeState: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'initializeBisection(address,address,address,uint256,bytes32)'(
      _rollupAddress: string,
      _asserter: string,
      _challenger: string,
      _challengePeriodTicks: BigNumberish,
      _challengeState: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    isMaster(overrides?: TransactionOverrides): Promise<BigNumber>

    'isMaster()'(overrides?: TransactionOverrides): Promise<BigNumber>

    oneStepProof(
      _lowerHash: Arrayish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'oneStepProof(bytes32,bytes32)'(
      _lowerHash: Arrayish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    timeoutChallenge(overrides?: TransactionOverrides): Promise<BigNumber>

    'timeoutChallenge()'(overrides?: TransactionOverrides): Promise<BigNumber>
  }
}
