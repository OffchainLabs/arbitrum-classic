/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConstructorCallback2Interface extends ethers.utils.Interface {
  functions: {
    'test()': FunctionFragment
    'test2()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'test', values?: undefined): string
  encodeFunctionData(functionFragment: 'test2', values?: undefined): string

  decodeFunctionResult(functionFragment: 'test', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'test2', data: BytesLike): Result

  events: {
    'TestEvent3(bool,bytes)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'TestEvent3'): EventFragment
}

export class ConstructorCallback2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConstructorCallback2Interface

  functions: {
    test(overrides?: PayableOverrides): Promise<ContractTransaction>

    'test()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    test2(overrides?: PayableOverrides): Promise<ContractTransaction>

    'test2()'(overrides?: PayableOverrides): Promise<ContractTransaction>
  }

  test(overrides?: PayableOverrides): Promise<ContractTransaction>

  'test()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  test2(overrides?: PayableOverrides): Promise<ContractTransaction>

  'test2()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  callStatic: {
    test(overrides?: CallOverrides): Promise<void>

    'test()'(overrides?: CallOverrides): Promise<void>

    test2(overrides?: CallOverrides): Promise<void>

    'test2()'(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    TestEvent3(success: boolean | null, returnData: null): EventFilter
  }

  estimateGas: {
    test(overrides?: PayableOverrides): Promise<BigNumber>

    'test()'(overrides?: PayableOverrides): Promise<BigNumber>

    test2(overrides?: PayableOverrides): Promise<BigNumber>

    'test2()'(overrides?: PayableOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    test(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'test()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    test2(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'test2()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>
  }
}
