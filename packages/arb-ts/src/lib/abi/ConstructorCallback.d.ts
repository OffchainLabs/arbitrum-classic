/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConstructorCallbackInterface extends ethers.utils.Interface {
  functions: {
    'test(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'test', values: [string]): string

  decodeFunctionResult(functionFragment: 'test', data: BytesLike): Result

  events: {
    'TestEvent(uint256)': EventFragment
    'TestEvent2(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'TestEvent'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TestEvent2'): EventFragment
}

export class ConstructorCallback extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConstructorCallbackInterface

  functions: {
    test(data: string, overrides?: Overrides): Promise<ContractTransaction>

    'test(address)'(
      data: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  test(data: string, overrides?: Overrides): Promise<ContractTransaction>

  'test(address)'(
    data: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    test(data: string, overrides?: CallOverrides): Promise<void>

    'test(address)'(data: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    TestEvent(dataLength: null): EventFilter

    TestEvent2(dataLength: null): EventFilter
  }

  estimateGas: {
    test(data: string, overrides?: Overrides): Promise<BigNumber>

    'test(address)'(data: string, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    test(data: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'test(address)'(
      data: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
