/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface L2CalledInterface extends ethers.utils.Interface {
  functions: {
    'onTransferReceived(address,address,uint256,bytes)': FunctionFragment
    'postDepositHook(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'onTransferReceived',
    values: [string, string, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'postDepositHook',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'onTransferReceived',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'postDepositHook',
    data: BytesLike
  ): Result

  events: {
    'Called(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Called'): EventFragment
}

export class L2Called extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: L2CalledInterface

  functions: {
    onTransferReceived(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'onTransferReceived(address,address,uint256,bytes)'(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    postDepositHook(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'postDepositHook(uint256)'(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  onTransferReceived(
    operator: string,
    sender: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'onTransferReceived(address,address,uint256,bytes)'(
    operator: string,
    sender: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  postDepositHook(
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'postDepositHook(uint256)'(
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    onTransferReceived(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    'onTransferReceived(address,address,uint256,bytes)'(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    postDepositHook(num: BigNumberish, overrides?: CallOverrides): Promise<void>

    'postDepositHook(uint256)'(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Called(num: null): EventFilter
  }

  estimateGas: {
    onTransferReceived(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'onTransferReceived(address,address,uint256,bytes)'(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    postDepositHook(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'postDepositHook(uint256)'(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    onTransferReceived(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'onTransferReceived(address,address,uint256,bytes)'(
      operator: string,
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    postDepositHook(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'postDepositHook(uint256)'(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
