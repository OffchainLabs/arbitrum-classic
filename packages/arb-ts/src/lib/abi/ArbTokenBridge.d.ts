/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ArbTokenBridgeInterface extends ethers.utils.Interface {
  functions: {
    'calculateL2ERC20TokenAddress(address)': FunctionFragment
    'calculateL2TokenAddress(address)': FunctionFragment
    'customL2Token(address)': FunctionFragment
    'customTokenRegistered(address,address)': FunctionFragment
    'ethTokenBridge()': FunctionFragment
    'getBeacon()': FunctionFragment
    'initialize(address,address)': FunctionFragment
    'isCustomToken(address)': FunctionFragment
    'migrate(address,address,address,uint256)': FunctionFragment
    'mintAndCall(address,uint256,address,address,bytes)': FunctionFragment
    'mintFromL1(address,address,address,uint256,bytes,bytes)': FunctionFragment
    'templateERC20()': FunctionFragment
    'withdraw(address,address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'calculateL2ERC20TokenAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateL2TokenAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'customL2Token',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'customTokenRegistered',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'ethTokenBridge',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getBeacon', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'isCustomToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'migrate',
    values: [string, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mintAndCall',
    values: [string, BigNumberish, string, string, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'mintFromL1',
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'templateERC20',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, string, string, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'calculateL2ERC20TokenAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateL2TokenAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'customL2Token',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'customTokenRegistered',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ethTokenBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getBeacon', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isCustomToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintAndCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintFromL1', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'templateERC20',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'CustomTokenRegistered(address,address)': EventFragment
    'MintAndCallTriggered(bool,address,address,uint256,bytes)': EventFragment
    'TokenCreated(address,address)': EventFragment
    'TokenMigrated(address,address,uint256)': EventFragment
    'TokenMinted(address,address,address,address,uint256,bool)': EventFragment
    'WithdrawToken(uint256,address,uint256,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CustomTokenRegistered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MintAndCallTriggered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenMigrated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenMinted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawToken'): EventFragment
}

export class ArbTokenBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ArbTokenBridgeInterface

  functions: {
    calculateL2ERC20TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'calculateL2ERC20TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'calculateL2TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    customL2Token(arg0: string, overrides?: CallOverrides): Promise<[string]>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'customTokenRegistered(address,address)'(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    ethTokenBridge(overrides?: CallOverrides): Promise<[string]>

    'ethTokenBridge()'(overrides?: CallOverrides): Promise<[string]>

    getBeacon(overrides?: CallOverrides): Promise<[string]>

    'getBeacon()'(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address)'(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'migrate(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mintAndCall(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintAndCall(address,uint256,address,address,bytes)'(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintFromL1(address,address,address,uint256,bytes,bytes)'(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    templateERC20(overrides?: CallOverrides): Promise<[string]>

    'templateERC20()'(overrides?: CallOverrides): Promise<[string]>

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  calculateL2ERC20TokenAddress(
    l1ERC20: string,
    overrides?: CallOverrides
  ): Promise<string>

  'calculateL2ERC20TokenAddress(address)'(
    l1ERC20: string,
    overrides?: CallOverrides
  ): Promise<string>

  calculateL2TokenAddress(
    l1ERC20: string,
    overrides?: CallOverrides
  ): Promise<string>

  'calculateL2TokenAddress(address)'(
    l1ERC20: string,
    overrides?: CallOverrides
  ): Promise<string>

  customL2Token(arg0: string, overrides?: CallOverrides): Promise<string>

  'customL2Token(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>

  customTokenRegistered(
    l1Address: string,
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'customTokenRegistered(address,address)'(
    l1Address: string,
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  ethTokenBridge(overrides?: CallOverrides): Promise<string>

  'ethTokenBridge()'(overrides?: CallOverrides): Promise<string>

  getBeacon(overrides?: CallOverrides): Promise<string>

  'getBeacon()'(overrides?: CallOverrides): Promise<string>

  initialize(
    _ethTokenBridge: string,
    _templateERC20: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address)'(
    _ethTokenBridge: string,
    _templateERC20: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isCustomToken(l1Token: string, overrides?: CallOverrides): Promise<boolean>

  'isCustomToken(address)'(
    l1Token: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  migrate(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'migrate(address,address,address,uint256)'(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mintAndCall(
    token: string,
    amount: BigNumberish,
    sender: string,
    dest: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintAndCall(address,uint256,address,address,bytes)'(
    token: string,
    amount: BigNumberish,
    sender: string,
    dest: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mintFromL1(
    l1ERC20: string,
    sender: string,
    dest: string,
    amount: BigNumberish,
    deployData: BytesLike,
    callHookData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintFromL1(address,address,address,uint256,bytes,bytes)'(
    l1ERC20: string,
    sender: string,
    dest: string,
    amount: BigNumberish,
    deployData: BytesLike,
    callHookData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  templateERC20(overrides?: CallOverrides): Promise<string>

  'templateERC20()'(overrides?: CallOverrides): Promise<string>

  withdraw(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(address,address,address,uint256)'(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    calculateL2ERC20TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<string>

    'calculateL2ERC20TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<string>

    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<string>

    'calculateL2TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<string>

    customL2Token(arg0: string, overrides?: CallOverrides): Promise<string>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'customTokenRegistered(address,address)'(
      l1Address: string,
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    ethTokenBridge(overrides?: CallOverrides): Promise<string>

    'ethTokenBridge()'(overrides?: CallOverrides): Promise<string>

    getBeacon(overrides?: CallOverrides): Promise<string>

    'getBeacon()'(overrides?: CallOverrides): Promise<string>

    initialize(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address)'(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: CallOverrides
    ): Promise<void>

    isCustomToken(l1Token: string, overrides?: CallOverrides): Promise<boolean>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'migrate(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintAndCall(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'mintAndCall(address,uint256,address,address,bytes)'(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'mintFromL1(address,address,address,uint256,bytes,bytes)'(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    templateERC20(overrides?: CallOverrides): Promise<string>

    'templateERC20()'(overrides?: CallOverrides): Promise<string>

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdraw(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    CustomTokenRegistered(
      l1Address: string | null,
      l2Address: string | null
    ): EventFilter

    MintAndCallTriggered(
      success: null,
      sender: string | null,
      dest: string | null,
      amount: null,
      callHookData: null
    ): EventFilter

    TokenCreated(
      l1Address: string | null,
      l2Address: string | null
    ): EventFilter

    TokenMigrated(
      l1Address: string | null,
      account: string | null,
      amount: null
    ): EventFilter

    TokenMinted(
      l1Address: null,
      l2Address: string | null,
      sender: string | null,
      dest: string | null,
      amount: null,
      usedCallHook: null
    ): EventFilter

    WithdrawToken(
      withdrawalId: null,
      l1Address: string | null,
      amount: null,
      destination: string | null,
      exitNum: BigNumberish | null
    ): EventFilter
  }

  estimateGas: {
    calculateL2ERC20TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateL2ERC20TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateL2TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    customL2Token(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'customTokenRegistered(address,address)'(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    ethTokenBridge(overrides?: CallOverrides): Promise<BigNumber>

    'ethTokenBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    getBeacon(overrides?: CallOverrides): Promise<BigNumber>

    'getBeacon()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address)'(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'migrate(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    mintAndCall(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintAndCall(address,uint256,address,address,bytes)'(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintFromL1(address,address,address,uint256,bytes,bytes)'(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    templateERC20(overrides?: CallOverrides): Promise<BigNumber>

    'templateERC20()'(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdraw(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    calculateL2ERC20TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateL2ERC20TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateL2TokenAddress(address)'(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    customL2Token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'customTokenRegistered(address,address)'(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    ethTokenBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ethTokenBridge()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBeacon()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address)'(
      _ethTokenBridge: string,
      _templateERC20: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'migrate(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mintAndCall(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintAndCall(address,uint256,address,address,bytes)'(
      token: string,
      amount: BigNumberish,
      sender: string,
      dest: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintFromL1(address,address,address,uint256,bytes,bytes)'(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    templateERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'templateERC20()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(address,address,address,uint256)'(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
