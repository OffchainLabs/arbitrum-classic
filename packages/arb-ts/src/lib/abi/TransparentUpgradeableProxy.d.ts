/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface TransparentUpgradeableProxyInterface extends ethers.utils.Interface {
  functions: {
    'admin()': FunctionFragment
    'changeAdmin(address)': FunctionFragment
    'implementation()': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string
  encodeFunctionData(functionFragment: 'changeAdmin', values: [string]): string
  encodeFunctionData(
    functionFragment: 'implementation',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeAdmin', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'implementation',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export class TransparentUpgradeableProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: TransparentUpgradeableProxyInterface

  functions: {
    admin(overrides?: Overrides): Promise<ContractTransaction>

    'admin()'(overrides?: Overrides): Promise<ContractTransaction>

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'changeAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    implementation(overrides?: Overrides): Promise<ContractTransaction>

    'implementation()'(overrides?: Overrides): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>
  }

  admin(overrides?: Overrides): Promise<ContractTransaction>

  'admin()'(overrides?: Overrides): Promise<ContractTransaction>

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'changeAdmin(address)'(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  implementation(overrides?: Overrides): Promise<ContractTransaction>

  'implementation()'(overrides?: Overrides): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'upgradeTo(address)'(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'upgradeToAndCall(address,bytes)'(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>

    'admin()'(overrides?: CallOverrides): Promise<string>

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>

    'changeAdmin(address)'(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>

    implementation(overrides?: CallOverrides): Promise<string>

    'implementation()'(overrides?: CallOverrides): Promise<string>

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter

    Upgraded(implementation: string | null): EventFilter
  }

  estimateGas: {
    admin(overrides?: Overrides): Promise<BigNumber>

    'admin()'(overrides?: Overrides): Promise<BigNumber>

    changeAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>

    'changeAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    implementation(overrides?: Overrides): Promise<BigNumber>

    'implementation()'(overrides?: Overrides): Promise<BigNumber>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    admin(overrides?: Overrides): Promise<PopulatedTransaction>

    'admin()'(overrides?: Overrides): Promise<PopulatedTransaction>

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'changeAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    implementation(overrides?: Overrides): Promise<PopulatedTransaction>

    'implementation()'(overrides?: Overrides): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>
  }
}
