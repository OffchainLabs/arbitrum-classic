/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface L1BuddyInterface extends ethers.utils.Interface {
  functions: {
    'codeHash()': FunctionFragment
    'finalizeBuddyDeploy(bool)': FunctionFragment
    'inbox()': FunctionFragment
    'initiateBuddyDeploy(uint256,uint256,uint256,bytes)': FunctionFragment
    'l2Buddy()': FunctionFragment
    'l2Connection()': FunctionFragment
    'l2Deployer()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'codeHash', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'finalizeBuddyDeploy',
    values: [boolean]
  ): string
  encodeFunctionData(functionFragment: 'inbox', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initiateBuddyDeploy',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'l2Buddy', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'l2Connection',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'l2Deployer', values?: undefined): string

  decodeFunctionResult(functionFragment: 'codeHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'finalizeBuddyDeploy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'inbox', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'initiateBuddyDeploy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2Buddy', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2Connection',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2Deployer', data: BytesLike): Result

  events: {
    'DeployBuddyContract(uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DeployBuddyContract'): EventFragment
}

export class L1Buddy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: L1BuddyInterface

  functions: {
    codeHash(overrides?: CallOverrides): Promise<[string]>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    inbox(overrides?: CallOverrides): Promise<[string]>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    l2Buddy(overrides?: CallOverrides): Promise<[string]>

    l2Connection(overrides?: CallOverrides): Promise<[number]>

    l2Deployer(overrides?: CallOverrides): Promise<[string]>
  }

  codeHash(overrides?: CallOverrides): Promise<string>

  finalizeBuddyDeploy(
    success: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  inbox(overrides?: CallOverrides): Promise<string>

  initiateBuddyDeploy(
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    contractInitCode: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  l2Buddy(overrides?: CallOverrides): Promise<string>

  l2Connection(overrides?: CallOverrides): Promise<number>

  l2Deployer(overrides?: CallOverrides): Promise<string>

  callStatic: {
    codeHash(overrides?: CallOverrides): Promise<string>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    inbox(overrides?: CallOverrides): Promise<string>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    l2Buddy(overrides?: CallOverrides): Promise<string>

    l2Connection(overrides?: CallOverrides): Promise<number>

    l2Deployer(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    DeployBuddyContract(
      seqNum?: BigNumberish | null,
      l2Address?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { seqNum: BigNumber; l2Address: string }
    >
  }

  estimateGas: {
    codeHash(overrides?: CallOverrides): Promise<BigNumber>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    inbox(overrides?: CallOverrides): Promise<BigNumber>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    l2Buddy(overrides?: CallOverrides): Promise<BigNumber>

    l2Connection(overrides?: CallOverrides): Promise<BigNumber>

    l2Deployer(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    codeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

    finalizeBuddyDeploy(
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initiateBuddyDeploy(
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      contractInitCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    l2Buddy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2Connection(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2Deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
