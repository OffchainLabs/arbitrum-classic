/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface SafeERC20NamerInterface extends ethers.utils.Interface {
  functions: {
    'tokenName(address)': FunctionFragment
    'tokenSymbol(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'tokenName', values: [string]): string
  encodeFunctionData(functionFragment: 'tokenSymbol', values: [string]): string

  decodeFunctionResult(functionFragment: 'tokenName', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenSymbol', data: BytesLike): Result

  events: {}
}

export class SafeERC20Namer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: SafeERC20NamerInterface

  functions: {
    tokenName(token: string, overrides?: CallOverrides): Promise<[string]>

    'tokenName(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    tokenSymbol(token: string, overrides?: CallOverrides): Promise<[string]>

    'tokenSymbol(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>
  }

  tokenName(token: string, overrides?: CallOverrides): Promise<string>

  'tokenName(address)'(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>

  tokenSymbol(token: string, overrides?: CallOverrides): Promise<string>

  'tokenSymbol(address)'(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>

  callStatic: {
    tokenName(token: string, overrides?: CallOverrides): Promise<string>

    'tokenName(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>

    tokenSymbol(token: string, overrides?: CallOverrides): Promise<string>

    'tokenSymbol(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    tokenName(token: string, overrides?: CallOverrides): Promise<BigNumber>

    'tokenName(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenSymbol(token: string, overrides?: CallOverrides): Promise<BigNumber>

    'tokenSymbol(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    tokenName(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenName(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenSymbol(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenSymbol(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
