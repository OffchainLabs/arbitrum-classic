/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IRollupUserInterface extends ethers.utils.Interface {
  functions: {
    'completeChallenge(address,address)': FunctionFragment
    'countStakedZombies(address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'requireUnresolved(uint256)': FunctionFragment
    'requireUnresolvedExists()': FunctionFragment
    'returnOldDeposit(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'completeChallenge',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'countStakedZombies',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'requireUnresolved',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requireUnresolvedExists',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'returnOldDeposit',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'completeChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'countStakedZombies',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolved',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolvedExists',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'returnOldDeposit',
    data: BytesLike
  ): Result

  events: {}
}

export class IRollupUser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IRollupUserInterface

  functions: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initialize(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<[void]>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<[void]>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  completeChallenge(
    winningStaker: string,
    losingStaker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'completeChallenge(address,address)'(
    winningStaker: string,
    losingStaker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  countStakedZombies(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'countStakedZombies(address)'(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initialize(
    _stakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    _stakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  requireUnresolved(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  'requireUnresolved(uint256)'(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

  'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<void>

  returnOldDeposit(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'returnOldDeposit(address)'(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: CallOverrides
    ): Promise<void>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: CallOverrides
    ): Promise<void>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(_stakeToken: string, overrides?: CallOverrides): Promise<void>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<void>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(_stakeToken: string, overrides?: Overrides): Promise<BigNumber>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<BigNumber>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<BigNumber>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requireUnresolvedExists(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requireUnresolvedExists()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
