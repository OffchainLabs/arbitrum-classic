/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface IRollupUserInterface extends ethers.utils.Interface {
  functions: {
    'completeChallenge(address,address)': FunctionFragment
    'countStakedZombies(address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'requireUnresolved(uint256)': FunctionFragment
    'requireUnresolvedExists()': FunctionFragment
    'returnOldDeposit(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'completeChallenge',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'countStakedZombies',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'requireUnresolved',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requireUnresolvedExists',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'returnOldDeposit',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'completeChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'countStakedZombies',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolved',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolvedExists',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'returnOldDeposit',
    data: BytesLike
  ): Result

  events: {}
}

export class IRollupUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IRollupUserInterface

  functions: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<[void]>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  completeChallenge(
    winningStaker: string,
    losingStaker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  countStakedZombies(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initialize(
    _stakeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  requireUnresolved(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

  returnOldDeposit(
    stakerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: CallOverrides
    ): Promise<void>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(_stakeToken: string, overrides?: CallOverrides): Promise<void>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<BigNumber>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requireUnresolvedExists(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
