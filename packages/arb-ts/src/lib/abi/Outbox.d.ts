/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface OutboxInterface extends ethers.utils.Interface {
  functions: {
    'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment
    'l2ToL1Block()': FunctionFragment
    'l2ToL1EthBlock()': FunctionFragment
    'l2ToL1Sender()': FunctionFragment
    'l2ToL1Timestamp()': FunctionFragment
    'outboxes(uint256)': FunctionFragment
    'processOutgoingMessages(bytes,uint256[])': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'executeTransaction',
    values: [
      BigNumberish,
      BytesLike[],
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Block',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1EthBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'l2ToL1Timestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'outboxes',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'processOutgoingMessages',
    values: [BytesLike, BigNumberish[]]
  ): string

  decodeFunctionResult(
    functionFragment: 'executeTransaction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'l2ToL1Block', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1EthBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'l2ToL1Timestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'outboxes', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'processOutgoingMessages',
    data: BytesLike
  ): Result

  events: {
    'OutboxEntryCreated(uint256,uint256,bytes32,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OutboxEntryCreated'): EventFragment
}

export class Outbox extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: OutboxInterface

  functions: {
    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    l2ToL1Block(overrides?: CallOverrides): Promise<[BigNumber]>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'l2ToL1EthBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>

    l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<[string]>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    outboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'outboxes(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  executeTransaction(
    outboxIndex: BigNumberish,
    proof: BytesLike[],
    index: BigNumberish,
    l2Sender: string,
    destAddr: string,
    l2Block: BigNumberish,
    l1Block: BigNumberish,
    l2Timestamp: BigNumberish,
    amount: BigNumberish,
    calldataForL1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
    outboxIndex: BigNumberish,
    proof: BytesLike[],
    index: BigNumberish,
    l2Sender: string,
    destAddr: string,
    l2Block: BigNumberish,
    l1Block: BigNumberish,
    l2Timestamp: BigNumberish,
    amount: BigNumberish,
    calldataForL1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

  'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

  'l2ToL1EthBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  l2ToL1Sender(overrides?: CallOverrides): Promise<string>

  'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>

  l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

  'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  outboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'outboxes(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  processOutgoingMessages(
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'processOutgoingMessages(bytes,uint256[])'(
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1EthBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<string>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    outboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'outboxes(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OutboxEntryCreated(
      batchNum: BigNumberish | null,
      outboxIndex: null,
      outputRoot: null,
      numInBatch: null
    ): EventFilter
  }

  estimateGas: {
    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1EthBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<BigNumber>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>

    'l2ToL1Timestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    outboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'outboxes(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    executeTransaction(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'executeTransaction(uint256,bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      outboxIndex: BigNumberish,
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: string,
      destAddr: string,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      amount: BigNumberish,
      calldataForL1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    l2ToL1Block(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Block()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1EthBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1EthBlock()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2ToL1Timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'l2ToL1Timestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    outboxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'outboxes(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    processOutgoingMessages(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'processOutgoingMessages(bytes,uint256[])'(
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
