/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface TokenAddressHandlerInterface extends ethers.utils.Interface {
  functions: {
    'customL2Token(address)': FunctionFragment
    'isCustomToken(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'customL2Token',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'isCustomToken',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'customL2Token',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isCustomToken',
    data: BytesLike
  ): Result

  events: {}
}

export class TokenAddressHandler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: TokenAddressHandlerInterface

  functions: {
    customL2Token(arg0: string, overrides?: CallOverrides): Promise<[string]>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  customL2Token(arg0: string, overrides?: CallOverrides): Promise<string>

  'customL2Token(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>

  isCustomToken(l1Token: string, overrides?: CallOverrides): Promise<boolean>

  'isCustomToken(address)'(
    l1Token: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    customL2Token(arg0: string, overrides?: CallOverrides): Promise<string>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>

    isCustomToken(l1Token: string, overrides?: CallOverrides): Promise<boolean>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {}

  estimateGas: {
    customL2Token(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    customL2Token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'customL2Token(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isCustomToken(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isCustomToken(address)'(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
