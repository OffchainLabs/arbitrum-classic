/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface RollupUserFacetInterface extends ethers.utils.Interface {
  functions: {
    '_stakerMap(address)': FunctionFragment
    'addToDeposit(address)': FunctionFragment
    'amountStaked(address)': FunctionFragment
    'arbGasSpeedLimitPerBlock()': FunctionFragment
    'baseStake()': FunctionFragment
    'challengeExecutionBisectionDegree()': FunctionFragment
    'challengeFactory()': FunctionFragment
    'completeChallenge(address,address)': FunctionFragment
    'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)': FunctionFragment
    'confirmPeriodBlocks()': FunctionFragment
    'countStakedZombies(address)': FunctionFragment
    'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])': FunctionFragment
    'currentChallenge(address)': FunctionFragment
    'currentRequiredStake()': FunctionFragment
    'delayedBridge()': FunctionFragment
    'extraChallengeTimeBlocks()': FunctionFragment
    'firstUnresolvedNode()': FunctionFragment
    'getNode(uint256)': FunctionFragment
    'getNodeHash(uint256)': FunctionFragment
    'getStakerAddress(uint256)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isMaster()': FunctionFragment
    'isStaked(address)': FunctionFragment
    'isZombie(address)': FunctionFragment
    'lastStakeBlock()': FunctionFragment
    'latestConfirmed()': FunctionFragment
    'latestNodeCreated()': FunctionFragment
    'latestStakedNode(address)': FunctionFragment
    'minimumAssertionPeriod()': FunctionFragment
    'newStake()': FunctionFragment
    'nodeFactory()': FunctionFragment
    'outbox()': FunctionFragment
    'owner()': FunctionFragment
    'paused()': FunctionFragment
    'reduceDeposit(uint256)': FunctionFragment
    'rejectNextNode(address)': FunctionFragment
    'removeOldZombies(uint256)': FunctionFragment
    'removeZombie(uint256,uint256)': FunctionFragment
    'requireUnresolved(uint256)': FunctionFragment
    'requireUnresolvedExists()': FunctionFragment
    'requiredStake(uint256,uint256,uint256)': FunctionFragment
    'returnOldDeposit(address)': FunctionFragment
    'rollupEventBridge()': FunctionFragment
    'sequencerBridge()': FunctionFragment
    'sequencerInboxMaxDelayBlocks()': FunctionFragment
    'sequencerInboxMaxDelaySeconds()': FunctionFragment
    'stakeOnExistingNode(uint256,bytes32)': FunctionFragment
    'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)': FunctionFragment
    'stakeToken()': FunctionFragment
    'stakerCount()': FunctionFragment
    'withdrawStakerFunds(address)': FunctionFragment
    'withdrawableFunds(address)': FunctionFragment
    'zombieAddress(uint256)': FunctionFragment
    'zombieCount()': FunctionFragment
    'zombieLatestStakedNode(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_stakerMap', values: [string]): string
  encodeFunctionData(functionFragment: 'addToDeposit', values: [string]): string
  encodeFunctionData(functionFragment: 'amountStaked', values: [string]): string
  encodeFunctionData(
    functionFragment: 'arbGasSpeedLimitPerBlock',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'baseStake', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'challengeExecutionBisectionDegree',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'challengeFactory',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'completeChallenge',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'confirmNextNode',
    values: [
      BytesLike,
      BytesLike,
      BigNumberish[],
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'confirmPeriodBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'countStakedZombies',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'createChallenge',
    values: [
      [string, string],
      [BigNumberish, BigNumberish],
      [BytesLike, BytesLike],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'currentChallenge',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'currentRequiredStake',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'delayedBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'extraChallengeTimeBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'firstUnresolvedNode',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNode',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeHash',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getStakerAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(functionFragment: 'isMaster', values?: undefined): string
  encodeFunctionData(functionFragment: 'isStaked', values: [string]): string
  encodeFunctionData(functionFragment: 'isZombie', values: [string]): string
  encodeFunctionData(
    functionFragment: 'lastStakeBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestConfirmed',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestNodeCreated',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'latestStakedNode',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'minimumAssertionPeriod',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'newStake', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'nodeFactory',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'outbox', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'reduceDeposit',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rejectNextNode',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'removeOldZombies',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeZombie',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requireUnresolved',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requireUnresolvedExists',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'requiredStake',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'returnOldDeposit',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'rollupEventBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerBridge',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerInboxMaxDelayBlocks',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sequencerInboxMaxDelaySeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'stakeOnExistingNode',
    values: [BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'stakeOnNewNode',
    values: [
      BytesLike,
      [[BytesLike, BytesLike, BytesLike], [BytesLike, BytesLike, BytesLike]],
      [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'stakeToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'stakerCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawStakerFunds',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableFunds',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'zombieCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'zombieLatestStakedNode',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: '_stakerMap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'addToDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'amountStaked',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'arbGasSpeedLimitPerBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'baseStake', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'challengeExecutionBisectionDegree',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'challengeFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'completeChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmNextNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmPeriodBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'countStakedZombies',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentChallenge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentRequiredStake',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'delayedBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'extraChallengeTimeBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'firstUnresolvedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNodeHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getStakerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isMaster', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isStaked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isZombie', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastStakeBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestConfirmed',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestNodeCreated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestStakedNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'minimumAssertionPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'newStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nodeFactory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'outbox', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'reduceDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rejectNextNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeOldZombies',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeZombie',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolved',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requireUnresolvedExists',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requiredStake',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'returnOldDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rollupEventBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerBridge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerInboxMaxDelayBlocks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sequencerInboxMaxDelaySeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakeOnExistingNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakeOnNewNode',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'stakeToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawStakerFunds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableFunds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'zombieAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'zombieCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'zombieLatestStakedNode',
    data: BytesLike
  ): Result

  events: {
    'NodeConfirmed(uint256,bytes32,uint256,bytes32,uint256)': EventFragment
    'NodeCreated(uint256,bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32[3][2],uint256[4][2])': EventFragment
    'NodeRejected(uint256)': EventFragment
    'NodesDestroyed(uint256,uint256)': EventFragment
    'OwnerFunctionCalled(uint256)': EventFragment
    'Paused(address)': EventFragment
    'RollupChallengeStarted(address,address,address,uint256)': EventFragment
    'RollupCreated(bytes32)': EventFragment
    'StakerReassigned(address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'NodeConfirmed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodeCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodeRejected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NodesDestroyed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnerFunctionCalled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RollupChallengeStarted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RollupCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StakerReassigned'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class RollupUserFacet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: RollupUserFacetInterface

  functions: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    addToDeposit(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'addToDeposit(address)'(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'arbGasSpeedLimitPerBlock()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    baseStake(overrides?: CallOverrides): Promise<[BigNumber]>

    'baseStake()'(overrides?: CallOverrides): Promise<[BigNumber]>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    challengeFactory(overrides?: CallOverrides): Promise<[string]>

    'challengeFactory()'(overrides?: CallOverrides): Promise<[string]>

    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    confirmNextNode(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)'(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<[BigNumber]>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    createChallenge(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])'(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    currentRequiredStake(overrides?: CallOverrides): Promise<[BigNumber]>

    'currentRequiredStake()'(overrides?: CallOverrides): Promise<[BigNumber]>

    delayedBridge(overrides?: CallOverrides): Promise<[string]>

    'delayedBridge()'(overrides?: CallOverrides): Promise<[string]>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>

    'extraChallengeTimeBlocks()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<[BigNumber]>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    initialize(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isMaster(overrides?: CallOverrides): Promise<[boolean]>

    'isMaster()'(overrides?: CallOverrides): Promise<[boolean]>

    isStaked(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isZombie(staker: string, overrides?: CallOverrides): Promise<[boolean]>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    lastStakeBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestConfirmed(overrides?: CallOverrides): Promise<[BigNumber]>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestNodeCreated(overrides?: CallOverrides): Promise<[BigNumber]>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<[BigNumber]>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>

    newStake(overrides?: PayableOverrides): Promise<ContractTransaction>

    'newStake()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    nodeFactory(overrides?: CallOverrides): Promise<[string]>

    'nodeFactory()'(overrides?: CallOverrides): Promise<[string]>

    outbox(overrides?: CallOverrides): Promise<[string]>

    'outbox()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    reduceDeposit(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'reduceDeposit(uint256)'(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rejectNextNode(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rejectNextNode(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    removeOldZombies(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeOldZombies(uint256)'(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    removeZombie(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeZombie(uint256,uint256)'(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<[void]>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<[void]>

    requiredStake(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'requiredStake(uint256,uint256,uint256)'(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rollupEventBridge(overrides?: CallOverrides): Promise<[string]>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<[string]>

    sequencerBridge(overrides?: CallOverrides): Promise<[string]>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<[string]>

    sequencerInboxMaxDelayBlocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    sequencerInboxMaxDelaySeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    stakeOnExistingNode(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'stakeOnExistingNode(uint256,bytes32)'(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    stakeOnNewNode(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)'(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    stakeToken(overrides?: CallOverrides): Promise<[string]>

    'stakeToken()'(overrides?: CallOverrides): Promise<[string]>

    stakerCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'stakerCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawStakerFunds(
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawStakerFunds(address)'(
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    zombieCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'zombieCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>
  }

  _stakerMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      index: BigNumber
      latestStakedNode: BigNumber
      amountStaked: BigNumber
      currentChallenge: string
      isStaked: boolean
    }
  >

  '_stakerMap(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      index: BigNumber
      latestStakedNode: BigNumber
      amountStaked: BigNumber
      currentChallenge: string
      isStaked: boolean
    }
  >

  addToDeposit(
    stakerAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'addToDeposit(address)'(
    stakerAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

  'amountStaked(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

  'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  baseStake(overrides?: CallOverrides): Promise<BigNumber>

  'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

  challengeExecutionBisectionDegree(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'challengeExecutionBisectionDegree()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  challengeFactory(overrides?: CallOverrides): Promise<string>

  'challengeFactory()'(overrides?: CallOverrides): Promise<string>

  completeChallenge(
    winningStaker: string,
    losingStaker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'completeChallenge(address,address)'(
    winningStaker: string,
    losingStaker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  confirmNextNode(
    beforeSendAcc: BytesLike,
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    afterSendCount: BigNumberish,
    afterLogAcc: BytesLike,
    afterLogCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)'(
    beforeSendAcc: BytesLike,
    sendsData: BytesLike,
    sendLengths: BigNumberish[],
    afterSendCount: BigNumberish,
    afterLogAcc: BytesLike,
    afterLogCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

  countStakedZombies(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'countStakedZombies(address)'(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  createChallenge(
    stakers: [string, string],
    nodeNums: [BigNumberish, BigNumberish],
    executionHashes: [BytesLike, BytesLike],
    proposedTimes: [BigNumberish, BigNumberish],
    maxMessageCounts: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])'(
    stakers: [string, string],
    nodeNums: [BigNumberish, BigNumberish],
    executionHashes: [BytesLike, BytesLike],
    proposedTimes: [BigNumberish, BigNumberish],
    maxMessageCounts: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

  'currentChallenge(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<string>

  currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>

  'currentRequiredStake()'(overrides?: CallOverrides): Promise<BigNumber>

  delayedBridge(overrides?: CallOverrides): Promise<string>

  'delayedBridge()'(overrides?: CallOverrides): Promise<string>

  extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

  firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

  'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

  getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getNode(uint256)'(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getNodeHash(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getStakerAddress(
    stakerNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'getStakerAddress(uint256)'(
    stakerNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  initialize(
    _stakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    _stakeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isMaster(overrides?: CallOverrides): Promise<boolean>

  'isMaster()'(overrides?: CallOverrides): Promise<boolean>

  isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

  'isStaked(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

  'isZombie(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

  'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

  'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

  latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

  'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

  latestStakedNode(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'latestStakedNode(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

  'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

  newStake(overrides?: PayableOverrides): Promise<ContractTransaction>

  'newStake()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  nodeFactory(overrides?: CallOverrides): Promise<string>

  'nodeFactory()'(overrides?: CallOverrides): Promise<string>

  outbox(overrides?: CallOverrides): Promise<string>

  'outbox()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  reduceDeposit(
    target: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'reduceDeposit(uint256)'(
    target: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rejectNextNode(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rejectNextNode(address)'(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  removeOldZombies(
    startIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeOldZombies(uint256)'(
    startIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  removeZombie(
    zombieNum: BigNumberish,
    maxNodes: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeZombie(uint256,uint256)'(
    zombieNum: BigNumberish,
    maxNodes: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  requireUnresolved(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  'requireUnresolved(uint256)'(
    nodeNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

  'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<void>

  requiredStake(
    blockNumber: BigNumberish,
    firstUnresolvedNodeNum: BigNumberish,
    latestNodeCreated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'requiredStake(uint256,uint256,uint256)'(
    blockNumber: BigNumberish,
    firstUnresolvedNodeNum: BigNumberish,
    latestNodeCreated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  returnOldDeposit(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'returnOldDeposit(address)'(
    stakerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rollupEventBridge(overrides?: CallOverrides): Promise<string>

  'rollupEventBridge()'(overrides?: CallOverrides): Promise<string>

  sequencerBridge(overrides?: CallOverrides): Promise<string>

  'sequencerBridge()'(overrides?: CallOverrides): Promise<string>

  sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

  'sequencerInboxMaxDelayBlocks()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

  'sequencerInboxMaxDelaySeconds()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  stakeOnExistingNode(
    nodeNum: BigNumberish,
    nodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'stakeOnExistingNode(uint256,bytes32)'(
    nodeNum: BigNumberish,
    nodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  stakeOnNewNode(
    expectedNodeHash: BytesLike,
    assertionBytes32Fields: [
      [BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike]
    ],
    assertionIntFields: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    beforeProposedBlock: BigNumberish,
    beforeInboxMaxCount: BigNumberish,
    sequencerBatchProof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)'(
    expectedNodeHash: BytesLike,
    assertionBytes32Fields: [
      [BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike]
    ],
    assertionIntFields: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    beforeProposedBlock: BigNumberish,
    beforeInboxMaxCount: BigNumberish,
    sequencerBatchProof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  stakeToken(overrides?: CallOverrides): Promise<string>

  'stakeToken()'(overrides?: CallOverrides): Promise<string>

  stakerCount(overrides?: CallOverrides): Promise<BigNumber>

  'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

  withdrawStakerFunds(
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawStakerFunds(address)'(
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawableFunds(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'withdrawableFunds(address)'(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  zombieAddress(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'zombieAddress(uint256)'(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  zombieCount(overrides?: CallOverrides): Promise<BigNumber>

  'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

  zombieLatestStakedNode(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'zombieLatestStakedNode(uint256)'(
    zombieNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        index: BigNumber
        latestStakedNode: BigNumber
        amountStaked: BigNumber
        currentChallenge: string
        isStaked: boolean
      }
    >

    addToDeposit(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'addToDeposit(address)'(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    baseStake(overrides?: CallOverrides): Promise<BigNumber>

    'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    challengeFactory(overrides?: CallOverrides): Promise<string>

    'challengeFactory()'(overrides?: CallOverrides): Promise<string>

    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: CallOverrides
    ): Promise<void>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: CallOverrides
    ): Promise<void>

    confirmNextNode(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)'(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createChallenge(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>

    'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])'(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>

    currentChallenge(staker: string, overrides?: CallOverrides): Promise<string>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<string>

    currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>

    'currentRequiredStake()'(overrides?: CallOverrides): Promise<BigNumber>

    delayedBridge(overrides?: CallOverrides): Promise<string>

    'delayedBridge()'(overrides?: CallOverrides): Promise<string>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

    getNode(nodeNum: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getNodeHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    initialize(_stakeToken: string, overrides?: CallOverrides): Promise<void>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    isMaster(overrides?: CallOverrides): Promise<boolean>

    'isMaster()'(overrides?: CallOverrides): Promise<boolean>

    isStaked(staker: string, overrides?: CallOverrides): Promise<boolean>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    isZombie(staker: string, overrides?: CallOverrides): Promise<boolean>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    newStake(overrides?: CallOverrides): Promise<void>

    'newStake()'(overrides?: CallOverrides): Promise<void>

    nodeFactory(overrides?: CallOverrides): Promise<string>

    'nodeFactory()'(overrides?: CallOverrides): Promise<string>

    outbox(overrides?: CallOverrides): Promise<string>

    'outbox()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    reduceDeposit(
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'reduceDeposit(uint256)'(
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rejectNextNode(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'rejectNextNode(address)'(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    removeOldZombies(
      startIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'removeOldZombies(uint256)'(
      startIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    removeZombie(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'removeZombie(uint256,uint256)'(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<void>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<void>

    requiredStake(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requiredStake(uint256,uint256,uint256)'(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    rollupEventBridge(overrides?: CallOverrides): Promise<string>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<string>

    sequencerBridge(overrides?: CallOverrides): Promise<string>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<string>

    sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakeOnExistingNode(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'stakeOnExistingNode(uint256,bytes32)'(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    stakeOnNewNode(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)'(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    stakeToken(overrides?: CallOverrides): Promise<string>

    'stakeToken()'(overrides?: CallOverrides): Promise<string>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawStakerFunds(
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdrawStakerFunds(address)'(
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    NodeConfirmed(
      nodeNum: BigNumberish | null,
      afterSendAcc: null,
      afterSendCount: null,
      afterLogAcc: null,
      afterLogCount: null
    ): EventFilter

    NodeCreated(
      nodeNum: BigNumberish | null,
      parentNodeHash: BytesLike | null,
      nodeHash: null,
      executionHash: null,
      inboxMaxCount: null,
      afterInboxBatchEndCount: null,
      afterInboxBatchAcc: null,
      assertionBytes32Fields: null,
      assertionIntFields: null
    ): EventFilter

    NodeRejected(nodeNum: BigNumberish | null): EventFilter

    NodesDestroyed(
      startNode: BigNumberish | null,
      endNode: BigNumberish | null
    ): EventFilter

    OwnerFunctionCalled(id: BigNumberish | null): EventFilter

    Paused(account: null): EventFilter

    RollupChallengeStarted(
      challengeContract: string | null,
      asserter: null,
      challenger: null,
      challengedNode: null
    ): EventFilter

    RollupCreated(machineHash: null): EventFilter

    StakerReassigned(staker: string | null, newNode: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    _stakerMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    addToDeposit(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'addToDeposit(address)'(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    amountStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    arbGasSpeedLimitPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'arbGasSpeedLimitPerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    baseStake(overrides?: CallOverrides): Promise<BigNumber>

    'baseStake()'(overrides?: CallOverrides): Promise<BigNumber>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    challengeFactory(overrides?: CallOverrides): Promise<BigNumber>

    'challengeFactory()'(overrides?: CallOverrides): Promise<BigNumber>

    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    confirmNextNode(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)'(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    confirmPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'confirmPeriodBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createChallenge(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>

    'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])'(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>

    'currentRequiredStake()'(overrides?: CallOverrides): Promise<BigNumber>

    delayedBridge(overrides?: CallOverrides): Promise<BigNumber>

    'delayedBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    extraChallengeTimeBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'extraChallengeTimeBlocks()'(overrides?: CallOverrides): Promise<BigNumber>

    firstUnresolvedNode(overrides?: CallOverrides): Promise<BigNumber>

    'firstUnresolvedNode()'(overrides?: CallOverrides): Promise<BigNumber>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(_stakeToken: string, overrides?: Overrides): Promise<BigNumber>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isMaster(overrides?: CallOverrides): Promise<BigNumber>

    'isMaster()'(overrides?: CallOverrides): Promise<BigNumber>

    isStaked(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isZombie(staker: string, overrides?: CallOverrides): Promise<BigNumber>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastStakeBlock(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    latestConfirmed(overrides?: CallOverrides): Promise<BigNumber>

    'latestConfirmed()'(overrides?: CallOverrides): Promise<BigNumber>

    latestNodeCreated(overrides?: CallOverrides): Promise<BigNumber>

    'latestNodeCreated()'(overrides?: CallOverrides): Promise<BigNumber>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'minimumAssertionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    newStake(overrides?: PayableOverrides): Promise<BigNumber>

    'newStake()'(overrides?: PayableOverrides): Promise<BigNumber>

    nodeFactory(overrides?: CallOverrides): Promise<BigNumber>

    'nodeFactory()'(overrides?: CallOverrides): Promise<BigNumber>

    outbox(overrides?: CallOverrides): Promise<BigNumber>

    'outbox()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    reduceDeposit(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'reduceDeposit(uint256)'(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    rejectNextNode(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rejectNextNode(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    removeOldZombies(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeOldZombies(uint256)'(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    removeZombie(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeZombie(uint256,uint256)'(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requireUnresolvedExists(overrides?: CallOverrides): Promise<BigNumber>

    'requireUnresolvedExists()'(overrides?: CallOverrides): Promise<BigNumber>

    requiredStake(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requiredStake(uint256,uint256,uint256)'(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    rollupEventBridge(overrides?: CallOverrides): Promise<BigNumber>

    'rollupEventBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    sequencerBridge(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerBridge()'(overrides?: CallOverrides): Promise<BigNumber>

    sequencerInboxMaxDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sequencerInboxMaxDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakeOnExistingNode(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'stakeOnExistingNode(uint256,bytes32)'(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    stakeOnNewNode(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)'(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>

    'stakeToken()'(overrides?: CallOverrides): Promise<BigNumber>

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>

    'stakerCount()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawStakerFunds(
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawStakerFunds(address)'(
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zombieCount(overrides?: CallOverrides): Promise<BigNumber>

    'zombieCount()'(overrides?: CallOverrides): Promise<BigNumber>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _stakerMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    '_stakerMap(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    addToDeposit(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'addToDeposit(address)'(
      stakerAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    amountStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'amountStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    arbGasSpeedLimitPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'arbGasSpeedLimitPerBlock()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    baseStake(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'baseStake()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    challengeExecutionBisectionDegree(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'challengeExecutionBisectionDegree()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    challengeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'challengeFactory()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    completeChallenge(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'completeChallenge(address,address)'(
      winningStaker: string,
      losingStaker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    confirmNextNode(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)'(
      beforeSendAcc: BytesLike,
      sendsData: BytesLike,
      sendLengths: BigNumberish[],
      afterSendCount: BigNumberish,
      afterLogAcc: BytesLike,
      afterLogCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    confirmPeriodBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'confirmPeriodBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    countStakedZombies(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'countStakedZombies(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createChallenge(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])'(
      stakers: [string, string],
      nodeNums: [BigNumberish, BigNumberish],
      executionHashes: [BytesLike, BytesLike],
      proposedTimes: [BigNumberish, BigNumberish],
      maxMessageCounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    currentChallenge(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentChallenge(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentRequiredStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentRequiredStake()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    delayedBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'delayedBridge()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    extraChallengeTimeBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'extraChallengeTimeBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    firstUnresolvedNode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'firstUnresolvedNode()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNode(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getNode(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNodeHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getNodeHash(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakerAddress(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStakerAddress(uint256)'(
      stakerNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      _stakeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isMaster()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isStaked(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isStaked(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isZombie(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isZombie(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastStakeBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'lastStakeBlock()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestConfirmed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestConfirmed()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    latestNodeCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestNodeCreated()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    latestStakedNode(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'latestStakedNode(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    minimumAssertionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'minimumAssertionPeriod()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    newStake(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'newStake()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    nodeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nodeFactory()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    outbox(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'outbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    reduceDeposit(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'reduceDeposit(uint256)'(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rejectNextNode(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rejectNextNode(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    removeOldZombies(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeOldZombies(uint256)'(
      startIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    removeZombie(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeZombie(uint256,uint256)'(
      zombieNum: BigNumberish,
      maxNodes: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    requireUnresolved(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requireUnresolved(uint256)'(
      nodeNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requireUnresolvedExists(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requireUnresolvedExists()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requiredStake(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requiredStake(uint256,uint256,uint256)'(
      blockNumber: BigNumberish,
      firstUnresolvedNodeNum: BigNumberish,
      latestNodeCreated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    returnOldDeposit(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'returnOldDeposit(address)'(
      stakerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rollupEventBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rollupEventBridge()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sequencerBridge()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerInboxMaxDelayBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sequencerInboxMaxDelayBlocks()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sequencerInboxMaxDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sequencerInboxMaxDelaySeconds()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    stakeOnExistingNode(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'stakeOnExistingNode(uint256,bytes32)'(
      nodeNum: BigNumberish,
      nodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    stakeOnNewNode(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)'(
      expectedNodeHash: BytesLike,
      assertionBytes32Fields: [
        [BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike]
      ],
      assertionIntFields: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      beforeProposedBlock: BigNumberish,
      beforeInboxMaxCount: BigNumberish,
      sequencerBatchProof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stakeToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stakerCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawStakerFunds(
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawStakerFunds(address)'(
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableFunds(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableFunds(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieAddress(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'zombieAddress(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zombieCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'zombieCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    zombieLatestStakedNode(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'zombieLatestStakedNode(uint256)'(
      zombieNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
