/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  AddressMappingTest,
  AddressMappingTestInterface,
} from '../AddressMappingTest'

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: '_id',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: '_data',
        type: 'bytes',
      },
    ],
    name: 'TxToL1',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'getL1AddressTest',
    outputs: [
      {
        internalType: 'address',
        name: 'l1Address',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b5060c08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dac3dea914602d575b600080fd5b605060048036036020811015604157600080fd5b50356001600160a01b0316606c565b604080516001600160a01b039092168252519081900360200190f35b6000607582607b565b92915050565b61111061111160901b0119019056fea2646970667358221220ce8617acba2c0ab6c24e2e0b6173d6be9fcfd05b361233311765a92c40443bb664736f6c634300060b0033'

export class AddressMappingTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressMappingTest> {
    return super.deploy(overrides || {}) as Promise<AddressMappingTest>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): AddressMappingTest {
    return super.attach(address) as AddressMappingTest
  }
  connect(signer: Signer): AddressMappingTest__factory {
    return super.connect(signer) as AddressMappingTest__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): AddressMappingTestInterface {
    return new utils.Interface(_abi) as AddressMappingTestInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressMappingTest {
    return new Contract(address, _abi, signerOrProvider) as AddressMappingTest
  }
}
