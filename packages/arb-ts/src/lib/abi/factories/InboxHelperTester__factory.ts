/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { InboxHelperTester } from '../InboxHelperTester'

export class InboxHelperTester__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<InboxHelperTester> {
    return super.deploy(overrides || {}) as Promise<InboxHelperTester>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): InboxHelperTester {
    return super.attach(address) as InboxHelperTester
  }
  connect(signer: Signer): InboxHelperTester__factory {
    return super.connect(signer) as InboxHelperTester__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InboxHelperTester {
    return new Contract(address, _abi, signerOrProvider) as InboxHelperTester
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'rollup',
        type: 'address',
      },
    ],
    name: 'chainId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'messageNum',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'rollup',
        type: 'address',
      },
    ],
    name: 'requestID',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'messageNum',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'rollup',
        type: 'address',
      },
    ],
    name: 'retryableTicketID',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506101c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639c82980014610046578063a64371ed14610084578063d96e2802146100aa575b600080fd5b6100726004803603604081101561005c57600080fd5b50803590602001356001600160a01b03166100d6565b60408051918252519081900360200190f35b6100726004803603602081101561009a57600080fd5b50356001600160a01b03166100e9565b610072600480360360408110156100c057600080fd5b50803590602001356001600160a01b03166100fa565b60006100e28383610106565b9392505050565b60006100f482610147565b92915050565b60006100e28383610152565b600061011182610147565b83604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905092915050565b65ffffffffffff1690565b600061015e8383610106565b6040805160208082019390935260008183015281518082038301815260609091019091528051910120939250505056fea26469706673582212207293301ba2c6e52ad9f5dff0062633785dd112cc552825529d8ce19c12f64f5764736f6c634300060b0033'
