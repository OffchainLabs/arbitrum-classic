/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { SafeERC20Namer } from '../SafeERC20Namer'

export class SafeERC20Namer__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<SafeERC20Namer> {
    return super.deploy(overrides || {}) as Promise<SafeERC20Namer>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): SafeERC20Namer {
    return super.attach(address) as SafeERC20Namer
  }
  connect(signer: Signer): SafeERC20Namer__factory {
    return super.connect(signer) as SafeERC20Namer__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeERC20Namer {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20Namer
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'tokenName',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'tokenSymbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x610695610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063033b9b4f14610045578063e54f7522146100e0575b600080fd5b61006b6004803603602081101561005b57600080fd5b50356001600160a01b0316610106565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100a557818101518382015260200161008d565b50505050905090810190601f1680156100d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61006b600480360360208110156100f657600080fd5b50356001600160a01b031661013f565b60608061011a836395d89b4160e01b610168565b90508051600014156101375761012f83610393565b91505061013a565b90505b919050565b606080610153836306fdde0360e01b610168565b90508051600014156101375761012f836103a0565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160609360009385936001600160a01b03891693919290918291908083835b602083106101d45780518252601f1990920191602091820191016101b5565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610234576040519150601f19603f3d011682016040523d82523d6000602084013e610239565b606091505b509150915081158061024a57508051155b1561026857604051806020016040528060008152509250505061038d565b8051602014156102a057600081806020019051602081101561028957600080fd5b50519050610296816103ad565b935050505061038d565b604081511115610378578080602001905160208110156102bf57600080fd5b81019080805160405193929190846401000000008211156102df57600080fd5b9083019060208201858111156102f457600080fd5b825164010000000081118282018810171561030e57600080fd5b82525081516020918201929091019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b506040525050509250505061038d565b60405180602001604052806000815250925050505b92915050565b60606101378260066104d4565b60606101378260286104d4565b6040805160208082528183019092526060918291906020820181803683370190505090506000805b60208110156104365760008582602081106103ec57fe5b1a60f81b90506001600160f81b031981161561042d578084848151811061040f57fe5b60200101906001600160f81b031916908160001a9053506001909201915b506001016103d5565b5060608167ffffffffffffffff8111801561045057600080fd5b506040519080825280601f01601f19166020018201604052801561047b576020820181803683370190505b50905060005b828110156104cb5783818151811061049557fe5b602001015160f81c60f81b8282815181106104ac57fe5b60200101906001600160f81b031916908160001a905350600101610481565b50949350505050565b6060600282061580156104e75750600082115b80156104f4575060288211155b610545576040805162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b60608267ffffffffffffffff8111801561055e57600080fd5b506040519080825280601f01601f191660200182016040528015610589576020820181803683370190505b5090506001600160a01b03841660005b6002850481101561062d57600860138290030282901c600f600482901c1660f0821682036105c682610637565b8685600202815181106105d557fe5b60200101906001600160f81b031916908160001a9053506105f581610637565b86856002026001018151811061060757fe5b60200101906001600160f81b031916908160001a90535050600190920191506105999050565b5090949350505050565b6000600a8260ff16101561065257506030810160f81b61013a565b506037810160f81b61013a56fea2646970667358221220ac35f0bca21c4da5248c7d57dec7d9a943eccb3fa3e96ff5257c07b6003d1a7664736f6c634300060b0033'
