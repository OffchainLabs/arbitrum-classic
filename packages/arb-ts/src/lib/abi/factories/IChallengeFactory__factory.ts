/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from 'ethers'
import { Provider } from '@ethersproject/providers'

import type { IChallengeFactory } from '../IChallengeFactory'

export class IChallengeFactory__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IChallengeFactory {
    return new Contract(address, _abi, signerOrProvider) as IChallengeFactory
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_resultReceiver',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '_executionHash',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: '_maxMessageCount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_asserter',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_challenger',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_asserterTimeLeft',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_challengerTimeLeft',
        type: 'uint256',
      },
      {
        internalType: 'contract IBridge',
        name: '_bridge',
        type: 'address',
      },
    ],
    name: 'createChallenge',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]
