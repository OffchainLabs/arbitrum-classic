/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike, BigNumberish } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { TesterERC20Token } from '../TesterERC20Token'

export class TesterERC20Token__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    _decimals: BigNumberish,
    _name: BytesLike,
    _symbol: BytesLike,
    overrides?: Overrides
  ): Promise<TesterERC20Token> {
    return super.deploy(
      _decimals,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<TesterERC20Token>
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    _name: BytesLike,
    _symbol: BytesLike,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _decimals,
      _name,
      _symbol,
      overrides || {}
    )
  }
  attach(address: string): TesterERC20Token {
    return super.attach(address) as TesterERC20Token
  }
  connect(signer: Signer): TesterERC20Token__factory {
    return super.connect(signer) as TesterERC20Token__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TesterERC20Token {
    return new Contract(address, _abi, signerOrProvider) as TesterERC20Token
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_decimals',
        type: 'uint256',
      },
      {
        internalType: 'bytes32',
        name: '_name',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: '_symbol',
        type: 'bytes32',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161010b38038061010b8339818101604052606081101561003357600080fd5b508051602082015160409092015160009190915560019190915560025560ad8061005e6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806306fdde03146041578063313ce56714605957806395d89b4114605f575b600080fd5b60476065565b60408051918252519081900360200190f35b6047606b565b60476071565b60015481565b60005481565b6002548156fea26469706673582212202860cce6f6f1e771e64d03433b2f9c8640b1335b14df09e5196e39d45128f12364736f6c634300060b0033'
