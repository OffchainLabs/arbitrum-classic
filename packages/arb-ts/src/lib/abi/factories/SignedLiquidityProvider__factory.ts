/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { SignedLiquidityProvider } from '../SignedLiquidityProvider'

export class SignedLiquidityProvider__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    _tokenBridge: string,
    _signer: string,
    overrides?: Overrides
  ): Promise<SignedLiquidityProvider> {
    return super.deploy(
      _tokenBridge,
      _signer,
      overrides || {}
    ) as Promise<SignedLiquidityProvider>
  }
  getDeployTransaction(
    _tokenBridge: string,
    _signer: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenBridge, _signer, overrides || {})
  }
  attach(address: string): SignedLiquidityProvider {
    return super.attach(address) as SignedLiquidityProvider
  }
  connect(signer: Signer): SignedLiquidityProvider__factory {
    return super.connect(signer) as SignedLiquidityProvider__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedLiquidityProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignedLiquidityProvider
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_tokenBridge',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_signer',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'fee_div',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dest',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'erc20',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'exitNum',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'liquidityProof',
        type: 'bytes',
      },
    ],
    name: 'requestLiquidity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dest',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'erc20',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'withdrawLiquidity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50604051610a2f380380610a2f8339818101604052604081101561003357600080fd5b508051602090910151600061004f6001600160e01b036100ca16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100ce565b3390565b610952806100dd6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806327f1c8d614610067578063715018a6146100815780638da5cb5b1461008b578063effc168b146100af578063f2fde38b14610144578063ffb409e91461016a575b600080fd5b61006f6101a0565b60408051918252519081900360200190f35b6100896101a5565b005b610093610251565b604080516001600160a01b039092168252519081900360200190f35b610089600480360360a08110156100c557600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184600183028401116401000000008311171561013957600080fd5b509092509050610260565b6100896004803603602081101561015a57600080fd5b50356001600160a01b0316610463565b6100896004803603606081101561018057600080fd5b506001600160a01b03813581169160208101359091169060400135610565565b606481565b6101ad6106a3565b6001600160a01b03166101be610251565b6001600160a01b031614610207576040805162461bcd60e51b815260206004820181905260248201526000805160206108fd833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031633146102ac576040805162461bcd60e51b815260206004820152600a6024820152694e4f545f42524944474560b01b604482015290519081900360640190fd5b6040805160208082018690526bffffffffffffffffffffffff1960608a811b82168486015289901b1660548301526068808301889052835180840390910181526088830180855281519183019190912060025460a8601f880185900490940285018401909552858252936001600160a01b03169261034692859291889188918291018382808284376000920191909152506106a792505050565b6001600160a01b03161461038b576040805162461bcd60e51b81526020600482015260076024820152664241445f53494760c81b604482015290519081900360640190fd5b6040805163a9059cbb60e01b81526001600160a01b03898116600483015260648804808903602484015292519089169163a9059cbb9160448083019260209291908290030181600087803b1580156103e257600080fd5b505af11580156103f6573d6000803e3d6000fd5b505050506040513d602081101561040c57600080fd5b5051610459576040805162461bcd60e51b8152602060048201526017602482015276494e53554646494349454e545f4c49515549444954495960481b604482015290519081900360640190fd5b5050505050505050565b61046b6106a3565b6001600160a01b031661047c610251565b6001600160a01b0316146104c5576040805162461bcd60e51b815260206004820181905260248201526000805160206108fd833981519152604482015290519081900360640190fd5b6001600160a01b03811661050a5760405162461bcd60e51b81526004018080602001828103825260268152602001806108936026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61056d6106a3565b6001600160a01b031661057e610251565b6001600160a01b0316146105c7576040805162461bcd60e51b815260206004820181905260248201526000805160206108fd833981519152604482015290519081900360640190fd5b816001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d602081101561065157600080fd5b505161069e576040805162461bcd60e51b8152602060048201526017602482015276494e53554646494349454e545f4c49515549444954495960481b604482015290519081900360640190fd5b505050565b3390565b600081516041146106ff576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a61071d86828585610727565b9695505050505050565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b0382111561077e5760405162461bcd60e51b81526004018080602001828103825260228152602001806108b96022913960400191505060405180910390fd5b8360ff16601b148061079357508360ff16601c145b6107ce5760405162461bcd60e51b81526004018080602001828103825260228152602001806108db6022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff88168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015610826573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610889576040805162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015290519081900360640190fd5b9594505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220a6e47b7a668031fa93e4a2d86b688276a2f86bde48c53a9c6f80b2083d577fb964736f6c634300060b0033'
