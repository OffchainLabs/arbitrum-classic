/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { HashingTester } from '../HashingTester'

export class HashingTester__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<HashingTester> {
    return super.deploy(overrides || {}) as Promise<HashingTester>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): HashingTester {
    return super.attach(address) as HashingTester
  }
  connect(signer: Signer): HashingTester__factory {
    return super.connect(signer) as HashingTester__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HashingTester {
    return new Contract(address, _abi, signerOrProvider) as HashingTester
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'buf',
        type: 'bytes',
      },
    ],
    name: 'testMerkleHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506102f0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea1c8e9514610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100e8945050505050565b60408051918252519081900360200190f35b6000806101028360006100fb865161010c565b6001610137565b509150505b919050565b60006001821161011e57506001610107565b61012d6002600184010461010c565b6002029050610107565b6000806020841161018b578551851061015f57610154600061020b565b600191509150610202565b600061017361016e888861022f565b61020b565b905080610180600061020b565b909350149050610202565b6000806101a4886002880489016002895b046000610137565b915091508080156101b25750845b156101d1576101c688886002890488610137565b935093505050610202565b6000806101e18a8a60028b61019c565b915091506101ef828561028e565b8180156101f95750835b95509550505050505b94509492505050565b60408051602080820193909352815180820384018152908201909152805191012090565b600080805b602081101561028657600882901b91506000818501865111610257576000610275565b858286018151811061026557fe5b01602001516001600160f81b0319165b60f81c929092179150600101610234565b509392505050565b60408051602080820194909452808201929092528051808303820181526060909201905280519101209056fea26469706673582212206b89f669910c587eb1cba6851d493ba6eadd8d2b6b510a9da07cf9232a8f863e64736f6c634300060b0033'
