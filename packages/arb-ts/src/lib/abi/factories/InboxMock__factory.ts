/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { InboxMock } from '../InboxMock'

export class InboxMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<InboxMock> {
    return super.deploy(overrides || {}) as Promise<InboxMock>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): InboxMock {
    return super.attach(address) as InboxMock
  }
  connect(signer: Signer): InboxMock__factory {
    return super.connect(signer) as InboxMock__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InboxMock {
    return new Contract(address, _abi, signerOrProvider) as InboxMock
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'destAddr',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'l2CallValue',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxSubmissionCost',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'excessFeeRefundAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'callValueRefundAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'maxGas',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'gasPriceBid',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'createRetryableTicket',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b5061011d806100206000396000f3fe608060405260043610601c5760003560e01c8063679b6ded146021575b600080fd5b60c66004803603610100811015603657600080fd5b6001600160a01b038235811692602081013592604082013592606083013581169260808101359091169160a08201359160c081013591810190610100810160e0820135640100000000811115608a57600080fd5b820183602082011115609b57600080fd5b8035906020019184600183028401116401000000008311171560bc57600080fd5b50909250905060d8565b60408051918252519081900360200190f35b6000999850505050505050505056fea26469706673582212203050ca899d778c85ce912f6a28bff85d3d0f903961cd9425f80ff655a3120ad664736f6c634300060b0033'
