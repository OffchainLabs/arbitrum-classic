/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import { Provider } from '@ethersproject/providers'
import type { ArbOwner, ArbOwnerInterface } from '../ArbOwner'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'addAllowedSender',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addToReserveFunds',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'allowAllSenders',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'allowOnlyOwnerToSend',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'pluggableId',
        type: 'uint256',
      },
    ],
    name: 'bindAddressToPluggable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'marshalledCode',
        type: 'bytes',
      },
    ],
    name: 'continueCodeUpload',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'constructorData',
        type: 'bytes',
      },
      {
        internalType: 'address',
        name: 'deemedSender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'deemedNonce',
        type: 'uint256',
      },
    ],
    name: 'deployContract',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'newCodeHash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 'oldCodeHash',
        type: 'bytes32',
      },
    ],
    name: 'finishCodeUploadAsArbosUpgrade',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'keepState',
        type: 'bool',
      },
    ],
    name: 'finishCodeUploadAsPluggable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAllowedSenders',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllFairGasPriceSenders',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getFeeRecipients',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalOfEthBalances',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUploadedCodeHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwnerAddr',
        type: 'address',
      },
    ],
    name: 'giveOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isAllowedSender',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isFairGasPriceSender',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'removeAllowedSender',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'isFairGasPriceSender',
        type: 'bool',
      },
    ],
    name: 'setFairGasPriceSender',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'netFeeRecipient',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'congestionFeeRecipient',
        type: 'address',
      },
    ],
    name: 'setFeeRecipients',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: 'enabled',
        type: 'bool',
      },
    ],
    name: 'setFeesEnabled',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'speedLimitPerBlock',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'gasPoolMax',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxTxGasLimit',
        type: 'uint256',
      },
    ],
    name: 'setGasAccountingParams',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'priceInGwei',
        type: 'uint256',
      },
    ],
    name: 'setL1GasPriceEstimate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'blocksPerSend',
        type: 'uint256',
      },
    ],
    name: 'setSecondsPerSend',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'startCodeUpload',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export class ArbOwner__factory {
  static readonly abi = _abi
  static createInterface(): ArbOwnerInterface {
    return new utils.Interface(_abi) as ArbOwnerInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbOwner {
    return new Contract(address, _abi, signerOrProvider) as ArbOwner
  }
}
