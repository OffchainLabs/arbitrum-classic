/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { Whitelist } from '../Whitelist'

export class Whitelist__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): Whitelist {
    return super.attach(address) as Whitelist
  }
  connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnerUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'newWhitelist',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address[]',
        name: 'targets',
        type: 'address[]',
      },
    ],
    name: 'WhitelistUpgraded',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isAllowed',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'setOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'user',
        type: 'address[]',
      },
      {
        internalType: 'bool[]',
        name: 'val',
        type: 'bool[]',
      },
    ],
    name: 'setWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newWhitelist',
        type: 'address',
      },
      {
        internalType: 'address[]',
        name: 'targets',
        type: 'address[]',
      },
    ],
    name: 'triggerConsumers',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561062c806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c57806337ca2617146100845780633b99adf7146101355780638da5cb5b14610258578063babcc5391461027c575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b03166102b6565b005b6100826004803603604081101561009a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100c457600080fd5b8201836020820111156100d657600080fd5b803590602001918460208302840111600160201b831117156100f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610356945050505050565b6100826004803603604081101561014b57600080fd5b810190602081018135600160201b81111561016557600080fd5b82018360208201111561017757600080fd5b803590602001918460208302840111600160201b8311171561019857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460208302840111600160201b8311171561021a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506104d1945050505050565b6102606105d2565b604080516001600160a01b039092168252519081900360200190f35b6102a26004803603602081101561029257600080fd5b50356001600160a01b03166105e1565b604080519115158252519081900360200190f35b6000546001600160a01b03163314610302576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b9181900360200190a150565b6000546001600160a01b031633146103a2576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b60005b815181101561043d578181815181106103ba57fe5b60200260200101516001600160a01b03166347466f98846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561041957600080fd5b505af115801561042d573d6000803e3d6000fd5b5050600190920191506103a59050565b507fd86884520a0656812619831f2b97aa7c77f8064735a7c312f358b9943d30eb78828260405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156104b95781810151838201526020016104a1565b50505050905001935050505060405180910390a15050565b6000546001600160a01b0316331461051d576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b8051825114610563576040805162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015290519081900360640190fd5b60005b82518110156105cd5781818151811061057b57fe5b60200260200101516001600085848151811061059357fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610566565b505050565b6000546001600160a01b031681565b60016020526000908152604090205460ff168156fea264697066735822122067f20fe50efffbe4c60a77611a59ae38b0d8a44a841d3da2eb23ca1c76e3ff8364736f6c634300060b0033'
