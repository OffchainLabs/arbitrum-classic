/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { L2Called } from '../L2Called'

export class L2Called__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<L2Called> {
    return super.deploy(overrides || {}) as Promise<L2Called>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): L2Called {
    return super.attach(address) as L2Called
  }
  connect(signer: Signer): L2Called__factory {
    return super.connect(signer) as L2Called__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2Called {
    return new Contract(address, _abi, signerOrProvider) as L2Called
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'num',
        type: 'uint256',
      },
    ],
    name: 'Called',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'onTokenTransfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'num',
        type: 'uint256',
      },
    ],
    name: 'postDepositHook',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506101ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632cf07f821461003b578063a4c0ed361461005a575b600080fd5b6100586004803603602081101561005157600080fd5b50356100f3565b005b6100df6004803603606081101561007057600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156100a057600080fd5b8201836020820111156100b257600080fd5b803590602001918460018302840111640100000000831117156100d457600080fd5b509092509050610129565b604080519115158252519081900360200190f35b6040805182815290517ffea238a9794376fb3707dbbabe56f0fad5e4110a7839485387c458f2d1aa5d509181900360200190a150565b6000808383602081101561013c57600080fd5b50359050600581141561015c57610152816100f3565b6001915050610170565b806007141561016a57600080fd5b60009150505b94935050505056fea2646970667358221220ffb3c3c251c05b3695dcd96eb8d9139df4e273a707e48125fbb31d22fb7bd96d64736f6c634300060b0033'
