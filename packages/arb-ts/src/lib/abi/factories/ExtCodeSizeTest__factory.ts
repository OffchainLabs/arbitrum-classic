/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  ExtCodeSizeTest,
  ExtCodeSizeTestInterface,
} from '../ExtCodeSizeTest'

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
]

const _bytecode =
  '0x6080604052348015600f57600080fd5b50601c602860201b60201c565b602457600080fd5b603f565b6000803090506000813b9050600081149250505090565b603f80604c6000396000f3fe6080604052600080fdfea26469706673582212209b402e711d4609798f6713ca1688a0dec3bc36ccc6e5618818852fe445760e9c64736f6c634300060b0033'

export class ExtCodeSizeTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExtCodeSizeTest> {
    return super.deploy(overrides || {}) as Promise<ExtCodeSizeTest>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): ExtCodeSizeTest {
    return super.attach(address) as ExtCodeSizeTest
  }
  connect(signer: Signer): ExtCodeSizeTest__factory {
    return super.connect(signer) as ExtCodeSizeTest__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ExtCodeSizeTestInterface {
    return new utils.Interface(_abi) as ExtCodeSizeTestInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExtCodeSizeTest {
    return new Contract(address, _abi, signerOrProvider) as ExtCodeSizeTest
  }
}
