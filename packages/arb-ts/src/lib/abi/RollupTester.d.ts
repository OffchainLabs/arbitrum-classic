/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface RollupTesterInterface extends Interface {
  functions: {
    calculateLeafFromPath: TypedFunctionDescription<{
      encode([from, proof]: [Arrayish, Arrayish[]]): string
    }>

    childNodeHash: TypedFunctionDescription<{
      encode([
        prevNodeHash,
        deadlineTicks,
        nodeDataHash,
        childType,
        vmProtoStateHash,
      ]: [Arrayish, BigNumberish, Arrayish, BigNumberish, Arrayish]): string
    }>

    computePrevLeaf: TypedFunctionDescription<{
      encode([
        fields,
        fields2,
        prevChildType,
        numSteps,
        numArbGas,
        messageCount,
        logCount,
      ]: [
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    computeProtoHashBefore: TypedFunctionDescription<{
      encode([machineHash, inboxTop, inboxCount, messageCount, logCount]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    confirm: TypedFunctionDescription<{
      encode([
        confNode,
        initalProtoStateHash,
        beforeSendCount,
        branches,
        deadlineTicks,
        challengeNodeData,
        logsAcc,
        vmProtoStateHashes,
        messageCounts,
        messages,
      ]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        BigNumberish[],
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        Arrayish
      ]): string
    }>

    generateInvalidExecutionLeaf: TypedFunctionDescription<{
      encode([
        gracePeriodTicks,
        checkTimeTicks,
        deadlineTicks,
        fields,
        fields2,
        prevChildType,
        numSteps,
        numArbGas,
        messageCount,
        logCount,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    generateInvalidInboxTopLeaf: TypedFunctionDescription<{
      encode([
        invalidInboxData,
        fields,
        fields2,
        prevChildType,
        numSteps,
        numArbGas,
        messageCount,
        logCount,
      ]: [
        BigNumberish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    generateLastMessageHash: TypedFunctionDescription<{
      encode([messages, startOffset, length]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    generateValidLeaf: TypedFunctionDescription<{
      encode([
        deadlineTicks,
        fields,
        fields2,
        prevChildType,
        numSteps,
        numArbGas,
        messageCount,
        logCount,
      ]: [
        BigNumberish,
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>

    processValidNode: TypedFunctionDescription<{
      encode([
        logsAcc,
        vmProtoStateHashes,
        messageCounts,
        messages,
        validNum,
        beforeSendCount,
        startOffset,
      ]: [
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string
    }>
  }

  events: {}
}

export class RollupTester extends Contract {
  connect(signerOrProvider: Signer | Provider | string): RollupTester
  attach(addressOrName: string): RollupTester
  deployed(): Promise<RollupTester>

  on(event: EventFilter | string, listener: Listener): RollupTester
  once(event: EventFilter | string, listener: Listener): RollupTester
  addListener(eventName: EventFilter | string, listener: Listener): RollupTester
  removeAllListeners(eventName: EventFilter | string): RollupTester
  removeListener(eventName: any, listener: Listener): RollupTester

  interface: RollupTesterInterface

  functions: {
    calculateLeafFromPath(
      from: Arrayish,
      proof: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<string>

    'calculateLeafFromPath(bytes32,bytes32[])'(
      from: Arrayish,
      proof: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<string>

    childNodeHash(
      prevNodeHash: Arrayish,
      deadlineTicks: BigNumberish,
      nodeDataHash: Arrayish,
      childType: BigNumberish,
      vmProtoStateHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'childNodeHash(bytes32,uint256,bytes32,uint256,bytes32)'(
      prevNodeHash: Arrayish,
      deadlineTicks: BigNumberish,
      nodeDataHash: Arrayish,
      childType: BigNumberish,
      vmProtoStateHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>

    computePrevLeaf(
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      prevLeaf: string
      vmProtoHashBefore: string
      0: string
      1: string
    }>

    'computePrevLeaf(bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      prevLeaf: string
      vmProtoHashBefore: string
      0: string
      1: string
    }>

    computeProtoHashBefore(
      machineHash: Arrayish,
      inboxTop: Arrayish,
      inboxCount: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'computeProtoHashBefore(bytes32,bytes32,uint256,uint256,uint256)'(
      machineHash: Arrayish,
      inboxTop: Arrayish,
      inboxCount: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    confirm(
      confNode: Arrayish,
      initalProtoStateHash: Arrayish,
      beforeSendCount: BigNumberish,
      branches: BigNumberish[],
      deadlineTicks: BigNumberish[],
      challengeNodeData: Arrayish[],
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      validNodeHashes: string[]
      vmProtoStateHash: string
      lastNodeHash: string
      0: string[]
      1: string
      2: string
    }>

    'confirm(bytes32,bytes32,uint256,uint256[],uint256[],bytes32[],bytes32[],bytes32[],uint256[],bytes)'(
      confNode: Arrayish,
      initalProtoStateHash: Arrayish,
      beforeSendCount: BigNumberish,
      branches: BigNumberish[],
      deadlineTicks: BigNumberish[],
      challengeNodeData: Arrayish[],
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      validNodeHashes: string[]
      vmProtoStateHash: string
      lastNodeHash: string
      0: string[]
      1: string
      2: string
    }>

    generateInvalidExecutionLeaf(
      gracePeriodTicks: BigNumberish,
      checkTimeTicks: BigNumberish,
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'generateInvalidExecutionLeaf(uint256,uint256,uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      gracePeriodTicks: BigNumberish,
      checkTimeTicks: BigNumberish,
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    generateInvalidInboxTopLeaf(
      invalidInboxData: BigNumberish[],
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'generateInvalidInboxTopLeaf(uint256[4],bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      invalidInboxData: BigNumberish[],
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    generateLastMessageHash(
      messages: Arrayish,
      startOffset: BigNumberish,
      length: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string
      1: BigNumber
    }>

    'generateLastMessageHash(bytes,uint256,uint256)'(
      messages: Arrayish,
      startOffset: BigNumberish,
      length: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string
      1: BigNumber
    }>

    generateValidLeaf(
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    'generateValidLeaf(uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>

    processValidNode(
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      validNum: BigNumberish,
      beforeSendCount: BigNumberish,
      startOffset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      afterSendCount: BigNumber
      afterOffset: BigNumber
      nodeDataHash: string
      vmProtoStateHash: string
      0: BigNumber
      1: BigNumber
      2: string
      3: string
    }>

    'processValidNode(bytes32[],bytes32[],uint256[],bytes,uint256,uint256,uint256)'(
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      validNum: BigNumberish,
      beforeSendCount: BigNumberish,
      startOffset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      afterSendCount: BigNumber
      afterOffset: BigNumber
      nodeDataHash: string
      vmProtoStateHash: string
      0: BigNumber
      1: BigNumber
      2: string
      3: string
    }>
  }

  calculateLeafFromPath(
    from: Arrayish,
    proof: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<string>

  'calculateLeafFromPath(bytes32,bytes32[])'(
    from: Arrayish,
    proof: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<string>

  childNodeHash(
    prevNodeHash: Arrayish,
    deadlineTicks: BigNumberish,
    nodeDataHash: Arrayish,
    childType: BigNumberish,
    vmProtoStateHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'childNodeHash(bytes32,uint256,bytes32,uint256,bytes32)'(
    prevNodeHash: Arrayish,
    deadlineTicks: BigNumberish,
    nodeDataHash: Arrayish,
    childType: BigNumberish,
    vmProtoStateHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>

  computePrevLeaf(
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    prevLeaf: string
    vmProtoHashBefore: string
    0: string
    1: string
  }>

  'computePrevLeaf(bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    prevLeaf: string
    vmProtoHashBefore: string
    0: string
    1: string
  }>

  computeProtoHashBefore(
    machineHash: Arrayish,
    inboxTop: Arrayish,
    inboxCount: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'computeProtoHashBefore(bytes32,bytes32,uint256,uint256,uint256)'(
    machineHash: Arrayish,
    inboxTop: Arrayish,
    inboxCount: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  confirm(
    confNode: Arrayish,
    initalProtoStateHash: Arrayish,
    beforeSendCount: BigNumberish,
    branches: BigNumberish[],
    deadlineTicks: BigNumberish[],
    challengeNodeData: Arrayish[],
    logsAcc: Arrayish[],
    vmProtoStateHashes: Arrayish[],
    messageCounts: BigNumberish[],
    messages: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    validNodeHashes: string[]
    vmProtoStateHash: string
    lastNodeHash: string
    0: string[]
    1: string
    2: string
  }>

  'confirm(bytes32,bytes32,uint256,uint256[],uint256[],bytes32[],bytes32[],bytes32[],uint256[],bytes)'(
    confNode: Arrayish,
    initalProtoStateHash: Arrayish,
    beforeSendCount: BigNumberish,
    branches: BigNumberish[],
    deadlineTicks: BigNumberish[],
    challengeNodeData: Arrayish[],
    logsAcc: Arrayish[],
    vmProtoStateHashes: Arrayish[],
    messageCounts: BigNumberish[],
    messages: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    validNodeHashes: string[]
    vmProtoStateHash: string
    lastNodeHash: string
    0: string[]
    1: string
    2: string
  }>

  generateInvalidExecutionLeaf(
    gracePeriodTicks: BigNumberish,
    checkTimeTicks: BigNumberish,
    deadlineTicks: BigNumberish,
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'generateInvalidExecutionLeaf(uint256,uint256,uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
    gracePeriodTicks: BigNumberish,
    checkTimeTicks: BigNumberish,
    deadlineTicks: BigNumberish,
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  generateInvalidInboxTopLeaf(
    invalidInboxData: BigNumberish[],
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'generateInvalidInboxTopLeaf(uint256[4],bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
    invalidInboxData: BigNumberish[],
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  generateLastMessageHash(
    messages: Arrayish,
    startOffset: BigNumberish,
    length: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string
    1: BigNumber
  }>

  'generateLastMessageHash(bytes,uint256,uint256)'(
    messages: Arrayish,
    startOffset: BigNumberish,
    length: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string
    1: BigNumber
  }>

  generateValidLeaf(
    deadlineTicks: BigNumberish,
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  'generateValidLeaf(uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
    deadlineTicks: BigNumberish,
    fields: Arrayish[],
    fields2: BigNumberish[],
    prevChildType: BigNumberish,
    numSteps: BigNumberish,
    numArbGas: BigNumberish,
    messageCount: BigNumberish,
    logCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>

  processValidNode(
    logsAcc: Arrayish[],
    vmProtoStateHashes: Arrayish[],
    messageCounts: BigNumberish[],
    messages: Arrayish,
    validNum: BigNumberish,
    beforeSendCount: BigNumberish,
    startOffset: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    afterSendCount: BigNumber
    afterOffset: BigNumber
    nodeDataHash: string
    vmProtoStateHash: string
    0: BigNumber
    1: BigNumber
    2: string
    3: string
  }>

  'processValidNode(bytes32[],bytes32[],uint256[],bytes,uint256,uint256,uint256)'(
    logsAcc: Arrayish[],
    vmProtoStateHashes: Arrayish[],
    messageCounts: BigNumberish[],
    messages: Arrayish,
    validNum: BigNumberish,
    beforeSendCount: BigNumberish,
    startOffset: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    afterSendCount: BigNumber
    afterOffset: BigNumber
    nodeDataHash: string
    vmProtoStateHash: string
    0: BigNumber
    1: BigNumber
    2: string
    3: string
  }>

  filters: {}

  estimate: {
    calculateLeafFromPath(
      from: Arrayish,
      proof: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'calculateLeafFromPath(bytes32,bytes32[])'(
      from: Arrayish,
      proof: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    childNodeHash(
      prevNodeHash: Arrayish,
      deadlineTicks: BigNumberish,
      nodeDataHash: Arrayish,
      childType: BigNumberish,
      vmProtoStateHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'childNodeHash(bytes32,uint256,bytes32,uint256,bytes32)'(
      prevNodeHash: Arrayish,
      deadlineTicks: BigNumberish,
      nodeDataHash: Arrayish,
      childType: BigNumberish,
      vmProtoStateHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    computePrevLeaf(
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'computePrevLeaf(bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    computeProtoHashBefore(
      machineHash: Arrayish,
      inboxTop: Arrayish,
      inboxCount: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'computeProtoHashBefore(bytes32,bytes32,uint256,uint256,uint256)'(
      machineHash: Arrayish,
      inboxTop: Arrayish,
      inboxCount: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    confirm(
      confNode: Arrayish,
      initalProtoStateHash: Arrayish,
      beforeSendCount: BigNumberish,
      branches: BigNumberish[],
      deadlineTicks: BigNumberish[],
      challengeNodeData: Arrayish[],
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'confirm(bytes32,bytes32,uint256,uint256[],uint256[],bytes32[],bytes32[],bytes32[],uint256[],bytes)'(
      confNode: Arrayish,
      initalProtoStateHash: Arrayish,
      beforeSendCount: BigNumberish,
      branches: BigNumberish[],
      deadlineTicks: BigNumberish[],
      challengeNodeData: Arrayish[],
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    generateInvalidExecutionLeaf(
      gracePeriodTicks: BigNumberish,
      checkTimeTicks: BigNumberish,
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'generateInvalidExecutionLeaf(uint256,uint256,uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      gracePeriodTicks: BigNumberish,
      checkTimeTicks: BigNumberish,
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    generateInvalidInboxTopLeaf(
      invalidInboxData: BigNumberish[],
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'generateInvalidInboxTopLeaf(uint256[4],bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      invalidInboxData: BigNumberish[],
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    generateLastMessageHash(
      messages: Arrayish,
      startOffset: BigNumberish,
      length: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'generateLastMessageHash(bytes,uint256,uint256)'(
      messages: Arrayish,
      startOffset: BigNumberish,
      length: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    generateValidLeaf(
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'generateValidLeaf(uint256,bytes32[8],uint256[5],uint32,uint64,uint64,uint64,uint64)'(
      deadlineTicks: BigNumberish,
      fields: Arrayish[],
      fields2: BigNumberish[],
      prevChildType: BigNumberish,
      numSteps: BigNumberish,
      numArbGas: BigNumberish,
      messageCount: BigNumberish,
      logCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    processValidNode(
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      validNum: BigNumberish,
      beforeSendCount: BigNumberish,
      startOffset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'processValidNode(bytes32[],bytes32[],uint256[],bytes,uint256,uint256,uint256)'(
      logsAcc: Arrayish[],
      vmProtoStateHashes: Arrayish[],
      messageCounts: BigNumberish[],
      messages: Arrayish,
      validNum: BigNumberish,
      beforeSendCount: BigNumberish,
      startOffset: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>
  }
}
