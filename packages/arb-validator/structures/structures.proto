/*
 * Copyright 2019, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package structures;
import "common/common.proto";
import "protocol/protocol.proto";
import "valprotocol/valprotocol.proto";
option go_package = "github.com/offchainlabs/arbitrum/packages/arb-validator/structures";

message ChainParamsBuf {
    common.BigIntegerBuf stakeRequirement = 1;
    common.TimeTicksBuf gracePeriod = 2;
    uint64 maxExecutionSteps = 3;
    uint64 maxTimeBoundsWidth = 4;
    uint64 ArbGasSpeedLimitPerTick = 5;
}

message VMProtoDataBuf {
    common.HashBuf machineHash = 1;
    common.HashBuf pendingTop = 2;
    common.BigIntegerBuf pendingCount = 3;
}

message AssertionParamsBuf {
    uint64 numSteps = 1;
    protocol.TimeBoundsBlocksBuf timeBounds = 2;
    common.BigIntegerBuf importedMessageCount = 3;
}

message AssertionClaimBuf {
    common.HashBuf afterPendingTop = 1;
    common.HashBuf importedMessagesSlice = 2;
    valprotocol.ExecutionAssertionStubBuf assertionStub = 3;
}

message DisputableNodeBuf {
    AssertionParamsBuf assertionParams = 1;
    AssertionClaimBuf assertionClaim = 2;
    common.HashBuf maxPendingTop = 3;
    common.BigIntegerBuf maxPendingCount = 4;
}

message InboxItemBuf {
    uint32 valType = 1;
    common.HashBuf valHash = 2;
}

message PendingInboxBuf {
    common.BigIntegerBuf topCount = 1;
    repeated InboxItemBuf items = 2;
    common.HashBuf hashOfRest = 3;
}

message CheckpointManifest {
    repeated common.HashBuf values = 1;
    repeated common.HashBuf machines = 2;
}

message CheckpointMetadata {
    uint64 formatVersion = 1;
    BlockIDBuf oldest = 2;
    BlockIDBuf newest = 3;
}

message CheckpointLinks {
    BlockIDBuf next = 1;
    BlockIDBuf prev = 2;
}

message BlockIDBuf {
    common.TimeBlocksBuf height = 1;
    common.HashBuf headerHash = 2;
}

message BlockIDBufList {
    repeated BlockIDBuf bufs = 1;
}

