// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RollupUserFacetABI is the input ABI used to generate the binding from.
const RollupUserFacetABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterSendAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterSendCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterLogAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterLogCount\",\"type\":\"uint256\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterInboxBatchEndCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[3][2]\",\"name\":\"assertionBytes32Fields\",\"type\":\"bytes32[3][2]\"},{\"indexed\":false,\"internalType\":\"uint256[4][2]\",\"name\":\"assertionIntFields\",\"type\":\"uint256[4][2]\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endNode\",\"type\":\"uint256\"}],\"name\":\"NodesDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challengeContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedNode\",\"type\":\"uint256\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNode\",\"type\":\"uint256\"}],\"name\":\"StakerReassigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestStakedNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentChallenge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbGasSpeedLimitPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeExecutionBisectionDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeFactory\",\"outputs\":[{\"internalType\":\"contractIChallengeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeSendAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sendsData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"sendLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"afterSendCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"afterLogAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"afterLogCount\",\"type\":\"uint256\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractINode\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"nodeNums\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"executionHashes\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"maxMessageCounts\",\"type\":\"uint256[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedBridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"getNode\",\"outputs\":[{\"internalType\":\"contractINode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerNum\",\"type\":\"uint256\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFactory\",\"outputs\":[{\"internalType\":\"contractINodeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestNodeCreated\",\"type\":\"uint256\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventBridge\",\"outputs\":[{\"internalType\":\"contractRollupEventBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerBridge\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxMaxDelayBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxMaxDelaySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3][2]\",\"name\":\"assertionBytes32Fields\",\"type\":\"bytes32[3][2]\"},{\"internalType\":\"uint256[4][2]\",\"name\":\"assertionIntFields\",\"type\":\"uint256[4][2]\"},{\"internalType\":\"uint256\",\"name\":\"beforeProposedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxMaxCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sequencerBatchProof\",\"type\":\"bytes\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// RollupUserFacetBin is the compiled bytecode used for deploying new contracts.
var RollupUserFacetBin = "0x608060405234801561001057600080fd5b506000805460ff19908116600117909155600b805490911690556150bd806100396000396000f3fe6080604052600436106102e05760003560e01c80636f791d2911610186578063ce11e6ab116100d7578063edfd03ed11610085578063edfd03ed14610a0b578063ef40a67014610a35578063f31d863f14610a68578063f33e1fac14610b46578063f51de41b14610b70578063f8d1f19414610b85578063fa7803e614610baf576102e0565b8063ce11e6ab1461090f578063d01e660214610924578063d735e21d1461094e578063d93fe9c414610963578063dc72a33b14610978578063dff697871461098d578063e8bd4922146109a2576102e0565b806381fbc98a1161013457806381fbc98a146108225780638640ce5f146108555780638da5cb5b1461086a57806391c657e81461087f5780639e8a713f146108b2578063addd6784146108c7578063c4d66de8146108dc576102e0565b80636f791d29146107355780636f7d00261461074a5780637427be511461078057806376e7e23b146107b3578063771b2f97146107c85780637ba9534a146107dd5780637e2d2155146107f2576102e0565b80634d26732d116102405780636177fd18116101ee5780636177fd181461063357806362a82d7d1461066657806363721d6b1461069057806365f7f80d146106a557806367425daf146106ba57806369fd251c146106cf5780636b94c33b14610702576102e0565b80634d26732d146105845780634f0f4aa91461059957806351ed6a30146105c35780635c975abb146105d85780635dbaf68b146106015780635e8ef106146106165780635f576db61461062b576102e0565b80633e55c0c71161029d5780633e55c0c7146103dd5780633e96576e1461040e5780633fe3862714610441578063414f23fe146104de57806345c5b2c71461050e57806345e38b6414610534578063488ed1a914610549576102e0565b806304a28064146102e557806314828f921461032a5780631e83d30f1461033f5780632b2af0ab1461036b5780632e7acfa6146103955780632f30cabd146103aa575b600080fd5b3480156102f157600080fd5b506103186004803603602081101561030857600080fd5b50356001600160a01b0316610bea565b60408051918252519081900360200190f35b34801561033657600080fd5b50610318610cab565b34801561034b57600080fd5b506103696004803603602081101561036257600080fd5b5035610cb1565b005b34801561037757600080fd5b506103696004803603602081101561038e57600080fd5b5035610d7d565b3480156103a157600080fd5b50610318610e19565b3480156103b657600080fd5b50610318600480360360208110156103cd57600080fd5b50356001600160a01b0316610e1f565b3480156103e957600080fd5b506103f2610e3a565b604080516001600160a01b039092168252519081900360200190f35b34801561041a57600080fd5b506103186004803603602081101561043157600080fd5b50356001600160a01b0316610e49565b34801561044d57600080fd5b50610369600480360361024081101561046557600080fd5b813591602081019160e08201916101e08101359161020082013591908101906102408101610220820135600160201b8111156104a057600080fd5b8201836020820111156104b257600080fd5b803590602001918460018302840111600160201b831117156104d357600080fd5b509092509050610e67565b3480156104ea57600080fd5b506103696004803603604081101561050157600080fd5b50803590602001356117aa565b6103696004803603602081101561052457600080fd5b50356001600160a01b03166119c9565b34801561054057600080fd5b50610318611a6f565b34801561055557600080fd5b50610369600480360361014081101561056d57600080fd5b50604081016080820160c083016101008401611a75565b34801561059057600080fd5b5061031861237b565b3480156105a557600080fd5b506103f2600480360360208110156105bc57600080fd5b50356123a0565b3480156105cf57600080fd5b506103f26123bb565b3480156105e457600080fd5b506105ed6123ca565b604080519115158252519081900360200190f35b34801561060d57600080fd5b506103f26123d3565b34801561062257600080fd5b506103186123e2565b6103696123e8565b34801561063f57600080fd5b506105ed6004803603602081101561065657600080fd5b50356001600160a01b031661248f565b34801561067257600080fd5b506103f26004803603602081101561068957600080fd5b50356124b7565b34801561069c57600080fd5b506103186124e1565b3480156106b157600080fd5b506103186124e7565b3480156106c657600080fd5b506103696124ed565b3480156106db57600080fd5b506103f2600480360360208110156106f257600080fd5b50356001600160a01b0316612557565b34801561070e57600080fd5b506103696004803603602081101561072557600080fd5b50356001600160a01b0316612578565b34801561074157600080fd5b506105ed6129cc565b34801561075657600080fd5b506103186004803603606081101561076d57600080fd5b50803590602081013590604001356129d5565b34801561078c57600080fd5b50610369600480360360208110156107a357600080fd5b50356001600160a01b03166129ec565b3480156107bf57600080fd5b50610318612aeb565b3480156107d457600080fd5b50610318612af1565b3480156107e957600080fd5b50610318612af7565b3480156107fe57600080fd5b506103696004803603604081101561081557600080fd5b5080359060200135612afd565b34801561082e57600080fd5b506103186004803603602081101561084557600080fd5b50356001600160a01b0316612d3a565b34801561086157600080fd5b50610318612e21565b34801561087657600080fd5b506103f2612e27565b34801561088b57600080fd5b506105ed600480360360208110156108a257600080fd5b50356001600160a01b0316612e36565b3480156108be57600080fd5b506103f2612e90565b3480156108d357600080fd5b50610318612e9f565b3480156108e857600080fd5b50610369600480360360208110156108ff57600080fd5b50356001600160a01b0316612ea5565b34801561091b57600080fd5b506103f2612ef4565b34801561093057600080fd5b506103f26004803603602081101561094757600080fd5b5035612f03565b34801561095a57600080fd5b50610318612f32565b34801561096f57600080fd5b506103f2612f38565b34801561098457600080fd5b50610318612f47565b34801561099957600080fd5b50610318612f4d565b3480156109ae57600080fd5b506109d5600480360360208110156109c557600080fd5b50356001600160a01b0316612f53565b604080519586526020860194909452848401929092526001600160a01b0316606084015215156080830152519081900360a00190f35b348015610a1757600080fd5b5061036960048036036020811015610a2e57600080fd5b5035612f8f565b348015610a4157600080fd5b5061031860048036036020811015610a5857600080fd5b50356001600160a01b0316612ff4565b348015610a7457600080fd5b50610369600480360360c0811015610a8b57600080fd5b81359190810190604081016020820135600160201b811115610aac57600080fd5b820183602082011115610abe57600080fd5b803590602001918460018302840111600160201b83111715610adf57600080fd5b919390929091602081019035600160201b811115610afc57600080fd5b820183602082011115610b0e57600080fd5b803590602001918460208302840111600160201b83111715610b2f57600080fd5b919350915080359060208101359060400135613012565b348015610b5257600080fd5b5061031860048036036020811015610b6957600080fd5b50356135f9565b348015610b7c57600080fd5b506103f2613621565b348015610b9157600080fd5b5061031860048036036020811015610ba857600080fd5b5035613630565b348015610bbb57600080fd5b5061036960048036036040811015610bd257600080fd5b506001600160a01b0381358116916020013516613642565b600080610bf56124e1565b90506000805b82811015610ca157846001600160a01b0316639168ae72610c1b83612f03565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d6020811015610c8b57600080fd5b505115610c99576001909101905b600101610bfb565b509150505b919050565b60195481565b336000908152601d602052604090205460ff16610d05576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b610d0d6123ca565b15610d4d576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b610d56336136f6565b6000610d6061237b565b905080821015610d6e578091505b610d78338361378d565b505050565b610d85612f32565b811015610dcb576040805162461bcd60e51b815260206004820152600f60248201526e1053149150511657d11150d2511151608a1b604482015290519081900360640190fd5b610dd3612af7565b811115610e16576040805162461bcd60e51b815260206004820152600c60248201526b1113d154d39517d1561254d560a21b604482015290519081900360640190fd5b50565b600c5481565b6001600160a01b03166000908152600a602052604090205490565b6011546001600160a01b031681565b6001600160a01b031660009081526008602052604090206001015490565b336000908152601d602052604090205460ff16610ebb576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b610ec36123ca565b15610f03576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b610f0c3361248f565b610f4a576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b604482015290519081900360640190fd5b6000610f5533610e49565b9050610f5f614f78565b6000610f6a836123a0565b90506000601160009054906101000a90046001600160a01b03166001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbc57600080fd5b505afa158015610fd0573d6000803e3d6000fd5b505050506040513d6020811015610fe657600080fd5b50519050610ff2614fad565b604080518082019091526110ac908c60026000835b828210156110485760408051606081810190925290808402860190600390839083908082843760009201919091525050508152600190910190602001611007565b50506040805180820190915291508d905060026000835b828210156110a0576040805160808181019092529080840286019060049083908390808284376000920191909152505050815260019091019060200161105f565b505050508b8b8661385b565b90506000806000856001600160a01b031663701da98e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ec57600080fd5b505afa158015611100573d6000803e3d6000fd5b505050506040513d602081101561111657600080fd5b50518451611123906138a9565b14611167576040805162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b604482015290519081900360640190fd5b6011546020850151604090810151815163036648d960e11b81526024810182905260048101928352604481018d90526001600160a01b03909316926306cc91b2928e928e929091908190606401858580828437600081840152601f19601f820116905080830192505050945050505050604080518083038186803b1580156111ee57600080fd5b505afa158015611202573d6000803e3d6000fd5b505050506040513d604081101561121857600080fd5b508051602090910151855160e00151919450925060009061124090439063ffffffff61393e16565b9050601854811015611286576040805162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b604482015290519081900360640190fd5b8451516020860151516000916112a2919063ffffffff61393e16565b9050856000015161010001518660200151604001511015806112d75750600e546112d390839063ffffffff61399b16565b8110155b8061130357508551606090810151602088015190910151606491611301919063ffffffff61393e16565b145b611340576040805162461bcd60e51b81526020600482015260096024820152681513d3d7d4d350531360ba1b604482015290519081900360640190fd5b611366600461135a600e548561399b90919063ffffffff16565b9063ffffffff61399b16565b8111156113a6576040805162461bcd60e51b8152602060048201526009602482015268544f4f5f4c4152474560b81b604482015290519081900360640190fd5b600e546000906113dd906113d16113c482600163ffffffff61393e16565b859063ffffffff6139f416565b9063ffffffff613a4e16565b9050611471816114656113fb600c54436139f490919063ffffffff16565b8c6001600160a01b0316632edfb42a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143457600080fd5b505afa158015611448573d6000803e3d6000fd5b505050506040513d602081101561145e57600080fd5b5051613ab5565b9063ffffffff6139f416565b93506000896001600160a01b031663f0dd77ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d60208110156114d857600080fd5b50519050801561152a57611527856114ef836123a0565b6001600160a01b0316632edfb42a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143457600080fd5b94505b505086866020015160400151111561157a576040805162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b604482015290519081900360640190fd5b5050600080600080896001600160a01b031663f0dd77ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b505111905080156116645761165d896001600160a01b031663f0dd77ff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d602081101561165657600080fd5b5051613630565b9150611670565b61166d8b613630565b91505b61167f878588888f8787613acb565b9a50925050508f81146116d0576040805162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b604482015290519081900360640190fd5b6116e4336116dc612af7565b600c54613d81565b505050505050506116f482613630565b6116fc612af7565b7f8016306209aff73e79f274cf38a41928996f746e2953111902e1f55be1713a548b84608001518560400151866000015187602001518f8f6040518088815260200187815260200186815260200185815260200184815260200183600260600280828437600083820152601f01601f191690910190508261010080828437600083820152604051601f909101601f1916909201829003995090975050505050505050a3505050505050505050565b336000908152601d602052604090205460ff166117fe576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b6118066123ca565b15611846576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b61184f3361248f565b61188d576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b604482015290519081900360640190fd5b8061189783613630565b146118d6576040805162461bcd60e51b815260206004820152600a6024820152694e4f44455f52454f524760b01b604482015290519081900360640190fd5b6118de612f32565b82101580156118f457506118f0612af7565b8211155b6118fd57600080fd5b6000611908836123a0565b9050806001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d602081101561196d57600080fd5b505161197833610e49565b146119bc576040805162461bcd60e51b815260206004820152600f60248201526e2727aa2fa9aa20a5a2a22fa82922ab60891b604482015290519081900360640190fd5b610d783384600c54613d81565b336000908152601d602052604090205460ff16611a1d576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b611a256123ca565b15611a65576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b610e168134613f1a565b60185481565b336000908152601d602052604090205460ff16611ac9576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b611ad16123ca565b15611b11576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b6020840135843510611b58576040805162461bcd60e51b815260206004820152600b60248201526a2ba927a723afa7a92222a960a91b604482015290519081900360640190fd5b611b60612af7565b60208501351115611ba7576040805162461bcd60e51b815260206004820152600c60248201526b1393d517d41493d413d4d15160a21b604482015290519081900360640190fd5b8335611bb16124e7565b10611bf7576040805162461bcd60e51b81526020600482015260116024820152701053149150511657d0d3d3919254935151607a1b604482015290519081900360640190fd5b6000611c0985825b60200201356123a0565b90506000611c18866001611bff565b9050806001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5357600080fd5b505afa158015611c67573d6000803e3d6000fd5b505050506040513d6020811015611c7d57600080fd5b5051604080516311e7249560e21b815290516001600160a01b0385169163479c9254916004808301926020929190829003018186803b158015611cbf57600080fd5b505afa158015611cd3573d6000803e3d6000fd5b505050506040513d6020811015611ce957600080fd5b505114611d29576040805162461bcd60e51b81526020600482015260096024820152682224a3232fa82922ab60b91b604482015290519081900360640190fd5b611d438760005b60200201356001600160a01b03166136f6565b611d4e876001611d30565b604080516348b4573960e11b81526001600160a01b03893581166004830152915191841691639168ae7291602480820192602092909190829003018186803b158015611d9957600080fd5b505afa158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b5051611e0b576040805162461bcd60e51b815260206004820152601260248201527114d51052d1548c57d393d517d4d51052d15160721b604482015290519081900360640190fd5b604080516348b4573960e11b81526001600160a01b0360208a81013582166004840152925190841692639168ae729260248082019391829003018186803b158015611e5557600080fd5b505afa158015611e69573d6000803e3d6000fd5b505050506040513d6020811015611e7f57600080fd5b5051611ec7576040805162461bcd60e51b815260206004820152601260248201527114d51052d1548c97d393d517d4d51052d15160721b604482015290519081900360640190fd5b611edc853585358560005b6020020135613fc9565b826001600160a01b0316635b8b22806040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d6020811015611f3f57600080fd5b505114611f80576040805162461bcd60e51b815260206004820152600a6024820152694348414c5f484153483160b01b604482015290519081900360640190fd5b611f9560208087013590860135856001611ed2565b816001600160a01b0316635b8b22806040518163ffffffff1660e01b815260040160206040518083038186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d6020811015611ff857600080fd5b505114612039576040805162461bcd60e51b815260206004820152600a60248201526921a420a62fa420a9a41960b11b604482015290519081900360640190fd5b60006121906120ab846001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b15801561207a57600080fd5b505afa15801561208e573d6000803e3d6000fd5b505050506040513d60208110156120a457600080fd5b50516123a0565b6001600160a01b031663d7ff5e356040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e357600080fd5b505afa1580156120f7573d6000803e3d6000fd5b505050506040513d602081101561210d57600080fd5b5051600d5461146590818960006020020135886001600160a01b0316632edfb42a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215857600080fd5b505afa15801561216c573d6000803e3d6000fd5b505050506040513d602081101561218257600080fd5b50519063ffffffff61393e16565b905060208501358110156121ca576121c26001600160a01b0389351689600160200201356001600160a01b0316614000565b505050612374565b6014546000906001600160a01b0390811690638ecaab119030908a35908935908e35168e600160200201356001600160a01b03166122228d60006002811061220e57fe5b60200201358a61393e90919063ffffffff16565b61223c8e600160200201358b61393e90919063ffffffff16565b601154601054604080516001600160e01b031960e08d901b1681526001600160a01b039a8b166004820152602481019990995260448901979097529488166064880152928716608487015260a486019190915260c4850152841660e484015290921661010482015290516101248083019260209291908290030181600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b505050506040513d60208110156122f257600080fd5b5051905061231b6001600160a01b038a35168a600160200201356001600160a01b031683614087565b604080516001600160a01b038b35811682526020808d01358216908301528a35828401529151918316917fa5256d19d4ddaf646f4b5c1861b8d4c08238e6356b8ae36dcc49ac67fda758799181900360600190a2505050505b5050505050565b600080612386612f32565b905061239a4382612395612af7565b6140d1565b91505090565b6000908152600560205260409020546001600160a01b031690565b6017546001600160a01b031681565b600b5460ff1690565b6014546001600160a01b031681565b600e5481565b336000908152601d602052604090205460ff1661243c576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b6124446123ca565b15612484576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b61248d3461437c565b565b6001600160a01b0316600090815260086020526040902060030154600160a01b900460ff1690565b6000600782815481106124c657fe5b6000918252602090912001546001600160a01b031692915050565b60095490565b60015490565b60006124f7612f32565b90506125016124e7565b811180156125165750612512612af7565b8111155b610e16576040805162461bcd60e51b815260206004820152600d60248201526c1393d7d553949154d3d3159151609a1b604482015290519081900360640190fd5b6001600160a01b039081166000908152600860205260409020600301541690565b336000908152601d602052604090205460ff166125cc576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b6125d46123ca565b15612614576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b61261c6124ed565b60006126266124e7565b90506000612632612f32565b9050600061263f826123a0565b905082816001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b15801561267b57600080fd5b505afa15801561268f573d6000803e3d6000fd5b505050506040513d60208110156126a557600080fd5b5051141561292e576126b68461248f565b6126f4576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b604482015290519081900360640190fd5b61270561270085610e49565b610d7d565b806001600160a01b0316639168ae72856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561275b57600080fd5b505afa15801561276f573d6000803e3d6000fd5b505050506040513d602081101561278557600080fd5b5051156127cc576040805162461bcd60e51b815260206004820152601060248201526f14d51052d15117d3d397d5105491d15560821b604482015290519081900360640190fd5b806001600160a01b03166388d221c66040518163ffffffff1660e01b815260040160006040518083038186803b15801561280557600080fd5b505afa158015612819573d6000803e3d6000fd5b50505050612826836123a0565b6001600160a01b0316633aa192746040518163ffffffff1660e01b815260040160006040518083038186803b15801561285e57600080fd5b505afa158015612872573d6000803e3d6000fd5b505050506128806000612f8f565b61288981610bea565b816001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b1580156128c257600080fd5b505afa1580156128d6573d6000803e3d6000fd5b505050506040513d60208110156128ec57600080fd5b50511461292e576040805162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b604482015290519081900360640190fd5b612936614588565b60135460408051630c2a09ad60e21b81526004810185905290516001600160a01b03909216916330a826b49160248082019260009290919082900301818387803b15801561298357600080fd5b505af1158015612997573d6000803e3d6000fd5b50506040518492507f9f7eee12f08e41a1d1a617e76576aa2d6a1e06dbdd72d817e62b6e8dfdebe2a39150600090a250505050565b60005460ff1690565b60006129e28484846140d1565b90505b9392505050565b336000908152601d602052604090205460ff16612a40576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b612a486123ca565b15612a88576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b612a906124e7565b612a9982610e49565b1115612ad9576040805162461bcd60e51b815260206004820152600a6024820152691513d3d7d49150d1539560b21b604482015290519081900360640190fd5b612ae2816136f6565b610e168161459e565b600f5481565b600d5481565b60035490565b336000908152601d602052604090205460ff16612b51576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b612b596123ca565b15612b99576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b612ba16124e1565b821115612be6576040805162461bcd60e51b815260206004820152600e60248201526d4e4f5f535543485f5a4f4d42494560901b604482015290519081900360640190fd5b6000612bf183612f03565b90506000612bfe846135f9565b9050600080612c0b612f32565b90505b808310158015612c1d57508482105b15612d12576000612c2d846123a0565b9050806001600160a01b03166396a9fdc0866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b158015612c8757600080fd5b505af1158015612c9b573d6000803e3d6000fd5b50505050806001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d6020811015612d0257600080fd5b5051935050600190910190612c0e565b80831015612d2857612d23866145f7565b612d32565b612d328684614693565b505050505050565b336000908152601d602052604081205460ff16612d8e576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b612d966123ca565b15612dd6576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b6000612de1336146ba565b6040519091506001600160a01b0384169082156108fc029083906000818181858888f19350505050158015612e1a573d6000803e3d6000fd5b5092915050565b60045490565b6016546001600160a01b031681565b6000805b600954811015612e875760098181548110612e5157fe5b60009182526020909120600290910201546001600160a01b0384811691161415612e7f576001915050610ca6565b600101612e3a565b50600092915050565b6013546001600160a01b031681565b601a5481565b6001600160a01b03811615610e16576040805162461bcd60e51b815260206004820152601060248201526f1393d7d513d2d15397d0531313d5d15160821b604482015290519081900360640190fd5b6012546001600160a01b031681565b600060098281548110612f1257fe5b60009182526020909120600290910201546001600160a01b031692915050565b60025490565b6015546001600160a01b031681565b601b5481565b60075490565b6008602052600090815260409020805460018201546002830154600390930154919290916001600160a01b03811690600160a01b900460ff1685565b6000612f996124e1565b90506000612fa5612f32565b9050825b82811015612fee575b81612fbc826135f9565b1015612fe657612fcb816145f7565b60001990920191828110612fe157505050610e16565b612fb2565b600101612fa9565b50505050565b6001600160a01b031660009081526008602052604090206002015490565b336000908152601d602052604090205460ff16613066576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b61306e6123ca565b156130ae576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b6130b66124ed565b60006130c0612f4d565b116130ff576040805162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b604482015290519081900360640190fd5b6000613109612f32565b90506000613116826123a0565b9050806001600160a01b03166388d221c66040518163ffffffff1660e01b815260040160006040518083038186803b15801561315157600080fd5b505afa158015613165573d6000803e3d6000fd5b505050506131716124e7565b816001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b1580156131aa57600080fd5b505afa1580156131be573d6000803e3d6000fd5b505050506040513d60208110156131d457600080fd5b505114613217576040805162461bcd60e51b815260206004820152600c60248201526b24a72b20a624a22fa82922ab60a11b604482015290519081900360640190fd5b6132276132226124e7565b6123a0565b6001600160a01b0316633aa192746040518163ffffffff1660e01b815260040160006040518083038186803b15801561325f57600080fd5b505afa158015613273573d6000803e3d6000fd5b505050506132816000612f8f565b61329561328d82610bea565b611465612f4d565b816001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ce57600080fd5b505afa1580156132e2573d6000803e3d6000fd5b505050506040513d60208110156132f857600080fd5b50511461333d576040805162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b604482015290519081900360640190fd5b60006133be8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600081840152601f19601f820116905080830192505050505050508d6146d9565b90506133cd8b828789886147da565b826001600160a01b03166397bdc5106040518163ffffffff1660e01b815260040160206040518083038186803b15801561340657600080fd5b505afa15801561341a573d6000803e3d6000fd5b505050506040513d602081101561343057600080fd5b505114613473576040805162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b604482015290519081900360640190fd5b60125460408051630c72684760e01b815260048101918252604481018c90526001600160a01b0390921691630c726847918d918d918d918d919081906024810190606401878780828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561351d57600080fd5b505af1158015613531573d6000803e3d6000fd5b5050505061353d614821565b601354604080516316b9109b60e01b81526004810186905290516001600160a01b03909216916316b9109b9160248082019260009290919082900301818387803b15801561358a57600080fd5b505af115801561359e573d6000803e3d6000fd5b505060408051848152602081018a90528082018990526060810188905290518693507f2400bd6e429cfcd98fe43a75bbbe4702c59c99d636100690130cc1ebb611c5a292509081900360800190a25050505050505050505050565b60006009828154811061360857fe5b9060005260206000209060020201600101549050919050565b6010546001600160a01b031681565b60009081526006602052604090205490565b61364a6123ca565b1561368a576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b613694828261483a565b6001600160a01b0316336001600160a01b0316146136e8576040805162461bcd60e51b815260206004820152600c60248201526b2ba927a723afa9a2a72222a960a11b604482015290519081900360640190fd5b6136f28282614000565b5050565b6136ff8161248f565b61373d576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b604482015290519081900360640190fd5b600061374882612557565b6001600160a01b031614610e16576040805162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b604482015290519081900360640190fd5b6001600160a01b03821660009081526008602052604081206002810154808411156137f2576040805162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b604482015290519081900360640190fd5b6000613804828663ffffffff61393e16565b600284018690556001600160a01b0387166000908152600a6020526040902054909150613837908263ffffffff6139f416565b6001600160a01b0387166000908152600a6020526040902055925050505b92915050565b613863614fad565b6040805180820190915286518651829161387e9188886148fc565b815260200161389d8860016020020151886001602002015143876148fc565b90529695505050505050565b6000816000015182602001518360400151846060015185608001518660a001518760c001518860e00151896101000151604051602001808a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019950505050505050505050604051602081830303815290604052805190602001209050919050565b600082821115613995576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826139aa57506000613855565b828202828482816139b757fe5b04146129e55760405162461bcd60e51b81526004018080602001828103825260218152602001806150476021913960400191505060405180910390fd5b6000828201838110156129e5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808211613aa4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613aad57fe5b049392505050565b6000818311613ac457816129e5565b5090919050565b6000613ad5614f78565b613add614f78565b601160009054906101000a90046001600160a01b03166001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b158015613b2b57600080fd5b505afa158015613b3f573d6000803e3d6000fd5b505050506040513d6020811015613b5557600080fd5b50516040820152613b65866123a0565b6001600160a01b031660a08201526000613b7d612af7565b6001019050613b8b8b61499a565b60808301528882526020820188905260135460408051638b8ca19960e01b815260048101849052602481018a9052604481018d905233606482015290516001600160a01b0390921691638b8ca1999160848082019260009290919082900301818387803b158015613bfb57600080fd5b505af1158015613c0f573d6000803e3d6000fd5b505060155460208e01516001600160a01b03909116925063d45ab2b59150613c36906138a9565b613c458e8660800151436149cb565b613c4e8f6149e0565b8b8f6040518663ffffffff1660e01b81526004018086815260200185815260200184815260200183815260200182815260200195505050505050602060405180830381600087803b158015613ca257600080fd5b505af1158015613cb6573d6000803e3d6000fd5b505050506040513d6020811015613ccc57600080fd5b50516001600160a01b031660608301525060808101516020820151600091613cf79187918991614a10565b9050613d07826060015182614a77565b8160a001516001600160a01b0316631bc09d0a613d22612af7565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613d5857600080fd5b505af1158015613d6c573d6000803e3d6000fd5b50929d939c50929a5050505050505050505050565b6001600160a01b0380841660008181526008602090815260408083208784526005835281842054825163123334b760e11b815260048101969096529151909591909116938492632466696e9260248084019382900301818787803b158015613de857600080fd5b505af1158015613dfc573d6000803e3d6000fd5b505050506040513d6020811015613e1257600080fd5b50516001808501879055909150811415612d3257600060056000846001600160a01b031663479c92546040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6557600080fd5b505afa158015613e79573d6000803e3d6000fd5b505050506040513d6020811015613e8f57600080fd5b505181526020810191909152604001600020546001600160a01b0316905080636971dfe5613ec3438863ffffffff6139f416565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613ef957600080fd5b505af1158015613f0d573d6000803e3d6000fd5b5050505050505050505050565b336000908152601d602052604090205460ff16613f6e576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b613f766123ca565b15613fb6576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b613fbf826136f6565b6136f28282614ac1565b6040805160208082019590955280820193909352606080840192909252805180840390920182526080909201909152805191012090565b600061400b82612ff4565b9050600061401884612ff4565b90508082111561403f5761403c61402f848361378d565b839063ffffffff61393e16565b91505b6002820461404d8582614ac1565b61405d838263ffffffff61393e16565b925061406885614af8565b60165461407e906001600160a01b031684614b22565b61237484614b6b565b6001600160a01b03928316600090815260086020526040808220600390810180549487166001600160a01b0319958616811790915594909516825290209092018054909216179055565b6000816001840314156140e75750600f546129e5565b60006140f2846123a0565b6001600160a01b0316632edfb42a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561412a57600080fd5b505afa15801561413e573d6000803e3d6000fd5b505050506040513d602081101561415457600080fd5b505190508085101561416a575050600f546129e5565b614172614fd2565b506040805161014081018252600181526201e05b60208201526201f7d191810191909152620138916060820152620329e160808201526201be4360a08201526204cb8c60c08201526201fbc460e082015262036d32610100820152620279736101208201526141df614fd2565b506040805161014081018252600181526201c03060208201526201b6999181019190915261fde26060820152620265c6608082015262013b8e60a0820152620329e160c08201526201389160e08201526201f7d1610100820152620153756101208201526000614255888563ffffffff61393e16565b90506000614273600c546113d1600a8561399b90919063ffffffff16565b905060ff61428882600a63ffffffff613a4e16565b1061429c57600019955050505050506129e5565b60006142af82600a63ffffffff613a4e16565b60020a9050600085600a8406600a81106142c557fe5b602002015162ffffff168202905085600a8406600a81106142e257fe5b602002015162ffffff168282816142f557fe5b041461430c576000199750505050505050506129e5565b600061433786600a8606600a811061432057fe5b6020020151839062ffffff1663ffffffff613a4e16565b905080614342575060015b600f54808202908290828161435357fe5b041461436c5760001999505050505050505050506129e5565b9c9b505050505050505050505050565b336000908152601d602052604090205460ff166143d0576040805162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b604482015290519081900360640190fd5b6143d86123ca565b15614418576040805162461bcd60e51b81526020600482015260106024820152600080516020615068833981519152604482015290519081900360640190fd5b6144213361248f565b15614464576040805162461bcd60e51b815260206004820152600e60248201526d1053149150511657d4d51052d15160921b604482015290519081900360640190fd5b61446d33612e36565b156144b2576040805162461bcd60e51b815260206004820152601060248201526f5354414b45525f49535f5a4f4d42494560801b604482015290519081900360640190fd5b6144ba61237b565b811015614501576040805162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b604482015290519081900360640190fd5b61450b3382614c1b565b6013546001600160a01b031663f03c04a5336145256124e7565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561457457600080fd5b505af1158015612374573d6000803e3d6000fd5b614593600254614ce6565b600280546001019055565b6001600160a01b03811660009081526008602090815260408083206002810154600a9093529220546145d59163ffffffff6139f416565b6001600160a01b0383166000908152600a60205260409020556136f282614d68565b60098054600019810190811061460957fe5b90600052602060002090600202016009828154811061462457fe5b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b03909216919091178155600191820154910155600980548061466757fe5b60008281526020812060026000199093019283020180546001600160a01b031916815560010155905550565b80600983815481106146a157fe5b9060005260206000209060020201600101819055505050565b6001600160a01b03166000908152600a60205260408120805491905590565b81518351600091829184835b8381101561478c5760008882815181106146fb57fe5b6020026020010151905083818701111561474b576040805162461bcd60e51b815260206004820152600c60248201526b2220aa20afa7ab22a9292aa760a11b604482015290519081900360640190fd5b6020868b01810182902060408051808401969096528581019190915280518086038201815260609095019052835193019290922091909401936001016146e5565b508184146147cf576040805162461bcd60e51b815260206004820152600b60248201526a08882a882be988a9c8ea8960ab1b604482015290519081900360640190fd5b979650505050505050565b60408051602080820197909752808201959095526060850192909252608084019290925260a0808401929092528051808403909201825260c0909201909152805191012090565b61482c600154614ce6565b600280546001818155019055565b6001600160a01b03808316600090815260086020526040808220848416835290822060038083015490820154939492939192908116911681146148ae576040805162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b604482015290519081900360640190fd5b6001600160a01b0381166148f3576040805162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b604482015290519081900360640190fd5b95945050505050565b614904614ff1565b60408051610120810182528551815286516020820152908101856001602002015181526020018560026004811061493757fe5b602002015181526020018560036004811061494e57fe5b602002015181526020018660016003811061496557fe5b602002015181526020018660026003811061497c57fe5b60200201518152602001848152602001838152509050949350505050565b805180516020830151516000926138559291829003906149b990614e8e565b6149c68660200151614e8e565b614ec3565b60006129e28383866020015160400151613fc9565b805160a09081015160208301519182015160c08301516060840151608090940151600094613855949392916147da565b60008085614a1f576000614a22565b60015b905080858585604051602001808560ff1660ff1660f81b815260010184815260200183815260200182815260200194505050505060405160208183030381529060405280519060200120915050949350505050565b60038054600101808255600090815260056020908152604080832080546001600160a01b0319166001600160a01b0397909716969096179095559154815260069091529190912055565b6001600160a01b03821660009081526008602052604090206002810154614aee908363ffffffff6139f416565b6002909101555050565b6001600160a01b0316600090815260086020526040902060030180546001600160a01b0319169055565b6001600160a01b0382166000908152600a6020526040902054614b4b908263ffffffff6139f416565b6001600160a01b039092166000908152600a602052604090209190915550565b6001600160a01b0381811660008181526008602090815260408083208151808301909252938152600180850154928201928352600980549182018155909352517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600290930292830180546001600160a01b031916919095161790935591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0909201919091556136f282614d68565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688810180546001600160a01b039586166001600160a01b031991821681179092556040805160a08101825293845284546020858101918252858301978852600060608701818152608088018981529682526008909252929092209451855551948401949094559351600283015591516003909101805492511515600160a01b0260ff60a01b199290951692909316919091171691909117905543600455565b60008181526005602052604080822054815163083197ef60e41b815291516001600160a01b03909116926383197ef0926004808201939182900301818387803b158015614d3257600080fd5b505af1158015614d46573d6000803e3d6000fd5b50505060009182525060056020526040902080546001600160a01b0319169055565b6001600160a01b03811660009081526008602052604090208054600780546000198101908110614d9457fe5b600091825260209091200154600780546001600160a01b039092169183908110614dba57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806008600060078481548110614dfa57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020556007805480614e2a57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600890935250506040812081815560018101829055600281019190915560030180546001600160a81b0319169055565b60006138558260000151614ebe846040015185602001518660a0015187606001518860c001518960800151614f01565b614f4c565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b60408051602080820198909852808201969096526060860194909452608085019290925260a084015260c0808401919091528151808403909101815260e09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6040518060400160405280614fc0614ff1565b8152602001614fcd614ff1565b905290565b604051806101400160405280600a906020820280368337509192915050565b604051806101200160405280600081526020016000801916815260200160008152602001600081526020016000815260200160008019168152602001600080191681526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775061757361626c653a2070617573656400000000000000000000000000000000a2646970667358221220ffda6985f38c3e440759a13a0bbfefe1e59eec64a685ecbdfb6440806a25f42364736f6c634300060b0033"

// DeployRollupUserFacet deploys a new Ethereum contract, binding an instance of RollupUserFacet to it.
func DeployRollupUserFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserFacet, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupUserFacetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RollupUserFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserFacet{RollupUserFacetCaller: RollupUserFacetCaller{contract: contract}, RollupUserFacetTransactor: RollupUserFacetTransactor{contract: contract}, RollupUserFacetFilterer: RollupUserFacetFilterer{contract: contract}}, nil
}

// RollupUserFacet is an auto generated Go binding around an Ethereum contract.
type RollupUserFacet struct {
	RollupUserFacetCaller     // Read-only binding to the contract
	RollupUserFacetTransactor // Write-only binding to the contract
	RollupUserFacetFilterer   // Log filterer for contract events
}

// RollupUserFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserFacetSession struct {
	Contract     *RollupUserFacet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserFacetCallerSession struct {
	Contract *RollupUserFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserFacetTransactorSession struct {
	Contract     *RollupUserFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserFacetRaw struct {
	Contract *RollupUserFacet // Generic contract binding to access the raw methods on
}

// RollupUserFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserFacetCallerRaw struct {
	Contract *RollupUserFacetCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserFacetTransactorRaw struct {
	Contract *RollupUserFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserFacet creates a new instance of RollupUserFacet, bound to a specific deployed contract.
func NewRollupUserFacet(address common.Address, backend bind.ContractBackend) (*RollupUserFacet, error) {
	contract, err := bindRollupUserFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacet{RollupUserFacetCaller: RollupUserFacetCaller{contract: contract}, RollupUserFacetTransactor: RollupUserFacetTransactor{contract: contract}, RollupUserFacetFilterer: RollupUserFacetFilterer{contract: contract}}, nil
}

// NewRollupUserFacetCaller creates a new read-only instance of RollupUserFacet, bound to a specific deployed contract.
func NewRollupUserFacetCaller(address common.Address, caller bind.ContractCaller) (*RollupUserFacetCaller, error) {
	contract, err := bindRollupUserFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetCaller{contract: contract}, nil
}

// NewRollupUserFacetTransactor creates a new write-only instance of RollupUserFacet, bound to a specific deployed contract.
func NewRollupUserFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserFacetTransactor, error) {
	contract, err := bindRollupUserFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetTransactor{contract: contract}, nil
}

// NewRollupUserFacetFilterer creates a new log filterer instance of RollupUserFacet, bound to a specific deployed contract.
func NewRollupUserFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserFacetFilterer, error) {
	contract, err := bindRollupUserFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetFilterer{contract: contract}, nil
}

// bindRollupUserFacet binds a generic wrapper to an already deployed contract.
func bindRollupUserFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupUserFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserFacet *RollupUserFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserFacet.Contract.RollupUserFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserFacet *RollupUserFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RollupUserFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserFacet *RollupUserFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RollupUserFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserFacet *RollupUserFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserFacet *RollupUserFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserFacet *RollupUserFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 index, uint256 latestStakedNode, uint256 amountStaked, address currentChallenge, bool isStaked)
func (_RollupUserFacet *RollupUserFacetCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	Index            *big.Int
	LatestStakedNode *big.Int
	AmountStaked     *big.Int
	CurrentChallenge common.Address
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		Index            *big.Int
		LatestStakedNode *big.Int
		AmountStaked     *big.Int
		CurrentChallenge common.Address
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedNode = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.AmountStaked = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 index, uint256 latestStakedNode, uint256 amountStaked, address currentChallenge, bool isStaked)
func (_RollupUserFacet *RollupUserFacetSession) StakerMap(arg0 common.Address) (struct {
	Index            *big.Int
	LatestStakedNode *big.Int
	AmountStaked     *big.Int
	CurrentChallenge common.Address
	IsStaked         bool
}, error) {
	return _RollupUserFacet.Contract.StakerMap(&_RollupUserFacet.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 index, uint256 latestStakedNode, uint256 amountStaked, address currentChallenge, bool isStaked)
func (_RollupUserFacet *RollupUserFacetCallerSession) StakerMap(arg0 common.Address) (struct {
	Index            *big.Int
	LatestStakedNode *big.Int
	AmountStaked     *big.Int
	CurrentChallenge common.Address
	IsStaked         bool
}, error) {
	return _RollupUserFacet.Contract.StakerMap(&_RollupUserFacet.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.AmountStaked(&_RollupUserFacet.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.AmountStaked(&_RollupUserFacet.CallOpts, staker)
}

// ArbGasSpeedLimitPerBlock is a free data retrieval call binding the contract method 0x5e8ef106.
//
// Solidity: function arbGasSpeedLimitPerBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ArbGasSpeedLimitPerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "arbGasSpeedLimitPerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ArbGasSpeedLimitPerBlock is a free data retrieval call binding the contract method 0x5e8ef106.
//
// Solidity: function arbGasSpeedLimitPerBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ArbGasSpeedLimitPerBlock() (*big.Int, error) {
	return _RollupUserFacet.Contract.ArbGasSpeedLimitPerBlock(&_RollupUserFacet.CallOpts)
}

// ArbGasSpeedLimitPerBlock is a free data retrieval call binding the contract method 0x5e8ef106.
//
// Solidity: function arbGasSpeedLimitPerBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ArbGasSpeedLimitPerBlock() (*big.Int, error) {
	return _RollupUserFacet.Contract.ArbGasSpeedLimitPerBlock(&_RollupUserFacet.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) BaseStake() (*big.Int, error) {
	return _RollupUserFacet.Contract.BaseStake(&_RollupUserFacet.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserFacet.Contract.BaseStake(&_RollupUserFacet.CallOpts)
}

// ChallengeExecutionBisectionDegree is a free data retrieval call binding the contract method 0xdc72a33b.
//
// Solidity: function challengeExecutionBisectionDegree() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ChallengeExecutionBisectionDegree(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "challengeExecutionBisectionDegree")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChallengeExecutionBisectionDegree is a free data retrieval call binding the contract method 0xdc72a33b.
//
// Solidity: function challengeExecutionBisectionDegree() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ChallengeExecutionBisectionDegree() (*big.Int, error) {
	return _RollupUserFacet.Contract.ChallengeExecutionBisectionDegree(&_RollupUserFacet.CallOpts)
}

// ChallengeExecutionBisectionDegree is a free data retrieval call binding the contract method 0xdc72a33b.
//
// Solidity: function challengeExecutionBisectionDegree() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ChallengeExecutionBisectionDegree() (*big.Int, error) {
	return _RollupUserFacet.Contract.ChallengeExecutionBisectionDegree(&_RollupUserFacet.CallOpts)
}

// ChallengeFactory is a free data retrieval call binding the contract method 0x5dbaf68b.
//
// Solidity: function challengeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) ChallengeFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "challengeFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeFactory is a free data retrieval call binding the contract method 0x5dbaf68b.
//
// Solidity: function challengeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) ChallengeFactory() (common.Address, error) {
	return _RollupUserFacet.Contract.ChallengeFactory(&_RollupUserFacet.CallOpts)
}

// ChallengeFactory is a free data retrieval call binding the contract method 0x5dbaf68b.
//
// Solidity: function challengeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) ChallengeFactory() (common.Address, error) {
	return _RollupUserFacet.Contract.ChallengeFactory(&_RollupUserFacet.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ConfirmPeriodBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.ConfirmPeriodBlocks(&_RollupUserFacet.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ConfirmPeriodBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.ConfirmPeriodBlocks(&_RollupUserFacet.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x04a28064.
//
// Solidity: function countStakedZombies(address node) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) CountStakedZombies(opts *bind.CallOpts, node common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "countStakedZombies", node)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x04a28064.
//
// Solidity: function countStakedZombies(address node) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) CountStakedZombies(node common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.CountStakedZombies(&_RollupUserFacet.CallOpts, node)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x04a28064.
//
// Solidity: function countStakedZombies(address node) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) CountStakedZombies(node common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.CountStakedZombies(&_RollupUserFacet.CallOpts, node)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) CurrentChallenge(staker common.Address) (common.Address, error) {
	return _RollupUserFacet.Contract.CurrentChallenge(&_RollupUserFacet.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) CurrentChallenge(staker common.Address) (common.Address, error) {
	return _RollupUserFacet.Contract.CurrentChallenge(&_RollupUserFacet.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserFacet.Contract.CurrentRequiredStake(&_RollupUserFacet.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserFacet.Contract.CurrentRequiredStake(&_RollupUserFacet.CallOpts)
}

// DelayedBridge is a free data retrieval call binding the contract method 0xf51de41b.
//
// Solidity: function delayedBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) DelayedBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "delayedBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DelayedBridge is a free data retrieval call binding the contract method 0xf51de41b.
//
// Solidity: function delayedBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) DelayedBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.DelayedBridge(&_RollupUserFacet.CallOpts)
}

// DelayedBridge is a free data retrieval call binding the contract method 0xf51de41b.
//
// Solidity: function delayedBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) DelayedBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.DelayedBridge(&_RollupUserFacet.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ExtraChallengeTimeBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.ExtraChallengeTimeBlocks(&_RollupUserFacet.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ExtraChallengeTimeBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.ExtraChallengeTimeBlocks(&_RollupUserFacet.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) FirstUnresolvedNode(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) FirstUnresolvedNode() (*big.Int, error) {
	return _RollupUserFacet.Contract.FirstUnresolvedNode(&_RollupUserFacet.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) FirstUnresolvedNode() (*big.Int, error) {
	return _RollupUserFacet.Contract.FirstUnresolvedNode(&_RollupUserFacet.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x4f0f4aa9.
//
// Solidity: function getNode(uint256 nodeNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) GetNode(opts *bind.CallOpts, nodeNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x4f0f4aa9.
//
// Solidity: function getNode(uint256 nodeNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) GetNode(nodeNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.GetNode(&_RollupUserFacet.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x4f0f4aa9.
//
// Solidity: function getNode(uint256 nodeNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) GetNode(nodeNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.GetNode(&_RollupUserFacet.CallOpts, nodeNum)
}

// GetNodeHash is a free data retrieval call binding the contract method 0xf8d1f194.
//
// Solidity: function getNodeHash(uint256 index) view returns(bytes32)
func (_RollupUserFacet *RollupUserFacetCaller) GetNodeHash(opts *bind.CallOpts, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "getNodeHash", index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetNodeHash is a free data retrieval call binding the contract method 0xf8d1f194.
//
// Solidity: function getNodeHash(uint256 index) view returns(bytes32)
func (_RollupUserFacet *RollupUserFacetSession) GetNodeHash(index *big.Int) ([32]byte, error) {
	return _RollupUserFacet.Contract.GetNodeHash(&_RollupUserFacet.CallOpts, index)
}

// GetNodeHash is a free data retrieval call binding the contract method 0xf8d1f194.
//
// Solidity: function getNodeHash(uint256 index) view returns(bytes32)
func (_RollupUserFacet *RollupUserFacetCallerSession) GetNodeHash(index *big.Int) ([32]byte, error) {
	return _RollupUserFacet.Contract.GetNodeHash(&_RollupUserFacet.CallOpts, index)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x62a82d7d.
//
// Solidity: function getStakerAddress(uint256 stakerNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x62a82d7d.
//
// Solidity: function getStakerAddress(uint256 stakerNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) GetStakerAddress(stakerNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.GetStakerAddress(&_RollupUserFacet.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x62a82d7d.
//
// Solidity: function getStakerAddress(uint256 stakerNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) GetStakerAddress(stakerNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.GetStakerAddress(&_RollupUserFacet.CallOpts, stakerNum)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_RollupUserFacet *RollupUserFacetCaller) IsMaster(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "isMaster")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_RollupUserFacet *RollupUserFacetSession) IsMaster() (bool, error) {
	return _RollupUserFacet.Contract.IsMaster(&_RollupUserFacet.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_RollupUserFacet *RollupUserFacetCallerSession) IsMaster() (bool, error) {
	return _RollupUserFacet.Contract.IsMaster(&_RollupUserFacet.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserFacet.Contract.IsStaked(&_RollupUserFacet.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserFacet.Contract.IsStaked(&_RollupUserFacet.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserFacet.Contract.IsZombie(&_RollupUserFacet.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserFacet *RollupUserFacetCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserFacet.Contract.IsZombie(&_RollupUserFacet.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) LastStakeBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) LastStakeBlock() (*big.Int, error) {
	return _RollupUserFacet.Contract.LastStakeBlock(&_RollupUserFacet.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) LastStakeBlock() (*big.Int, error) {
	return _RollupUserFacet.Contract.LastStakeBlock(&_RollupUserFacet.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) LatestConfirmed(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) LatestConfirmed() (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestConfirmed(&_RollupUserFacet.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) LatestConfirmed() (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestConfirmed(&_RollupUserFacet.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) LatestNodeCreated(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) LatestNodeCreated() (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestNodeCreated(&_RollupUserFacet.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) LatestNodeCreated() (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestNodeCreated(&_RollupUserFacet.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) LatestStakedNode(staker common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestStakedNode(&_RollupUserFacet.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) LatestStakedNode(staker common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.LatestStakedNode(&_RollupUserFacet.CallOpts, staker)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserFacet.Contract.MinimumAssertionPeriod(&_RollupUserFacet.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserFacet.Contract.MinimumAssertionPeriod(&_RollupUserFacet.CallOpts)
}

// NodeFactory is a free data retrieval call binding the contract method 0xd93fe9c4.
//
// Solidity: function nodeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) NodeFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "nodeFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeFactory is a free data retrieval call binding the contract method 0xd93fe9c4.
//
// Solidity: function nodeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) NodeFactory() (common.Address, error) {
	return _RollupUserFacet.Contract.NodeFactory(&_RollupUserFacet.CallOpts)
}

// NodeFactory is a free data retrieval call binding the contract method 0xd93fe9c4.
//
// Solidity: function nodeFactory() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) NodeFactory() (common.Address, error) {
	return _RollupUserFacet.Contract.NodeFactory(&_RollupUserFacet.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) Outbox() (common.Address, error) {
	return _RollupUserFacet.Contract.Outbox(&_RollupUserFacet.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) Outbox() (common.Address, error) {
	return _RollupUserFacet.Contract.Outbox(&_RollupUserFacet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) Owner() (common.Address, error) {
	return _RollupUserFacet.Contract.Owner(&_RollupUserFacet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) Owner() (common.Address, error) {
	return _RollupUserFacet.Contract.Owner(&_RollupUserFacet.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserFacet *RollupUserFacetCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserFacet *RollupUserFacetSession) Paused() (bool, error) {
	return _RollupUserFacet.Contract.Paused(&_RollupUserFacet.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserFacet *RollupUserFacetCallerSession) Paused() (bool, error) {
	return _RollupUserFacet.Contract.Paused(&_RollupUserFacet.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserFacet *RollupUserFacetCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserFacet *RollupUserFacetSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserFacet.Contract.RequireUnresolved(&_RollupUserFacet.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserFacet *RollupUserFacetCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserFacet.Contract.RequireUnresolved(&_RollupUserFacet.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserFacet *RollupUserFacetCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserFacet *RollupUserFacetSession) RequireUnresolvedExists() error {
	return _RollupUserFacet.Contract.RequireUnresolvedExists(&_RollupUserFacet.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserFacet *RollupUserFacetCallerSession) RequireUnresolvedExists() error {
	return _RollupUserFacet.Contract.RequireUnresolvedExists(&_RollupUserFacet.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0x6f7d0026.
//
// Solidity: function requiredStake(uint256 blockNumber, uint256 firstUnresolvedNodeNum, uint256 latestNodeCreated) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum *big.Int, latestNodeCreated *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestNodeCreated)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0x6f7d0026.
//
// Solidity: function requiredStake(uint256 blockNumber, uint256 firstUnresolvedNodeNum, uint256 latestNodeCreated) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum *big.Int, latestNodeCreated *big.Int) (*big.Int, error) {
	return _RollupUserFacet.Contract.RequiredStake(&_RollupUserFacet.CallOpts, blockNumber, firstUnresolvedNodeNum, latestNodeCreated)
}

// RequiredStake is a free data retrieval call binding the contract method 0x6f7d0026.
//
// Solidity: function requiredStake(uint256 blockNumber, uint256 firstUnresolvedNodeNum, uint256 latestNodeCreated) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum *big.Int, latestNodeCreated *big.Int) (*big.Int, error) {
	return _RollupUserFacet.Contract.RequiredStake(&_RollupUserFacet.CallOpts, blockNumber, firstUnresolvedNodeNum, latestNodeCreated)
}

// RollupEventBridge is a free data retrieval call binding the contract method 0x9e8a713f.
//
// Solidity: function rollupEventBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) RollupEventBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "rollupEventBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventBridge is a free data retrieval call binding the contract method 0x9e8a713f.
//
// Solidity: function rollupEventBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) RollupEventBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.RollupEventBridge(&_RollupUserFacet.CallOpts)
}

// RollupEventBridge is a free data retrieval call binding the contract method 0x9e8a713f.
//
// Solidity: function rollupEventBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) RollupEventBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.RollupEventBridge(&_RollupUserFacet.CallOpts)
}

// SequencerBridge is a free data retrieval call binding the contract method 0x3e55c0c7.
//
// Solidity: function sequencerBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) SequencerBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "sequencerBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerBridge is a free data retrieval call binding the contract method 0x3e55c0c7.
//
// Solidity: function sequencerBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) SequencerBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.SequencerBridge(&_RollupUserFacet.CallOpts)
}

// SequencerBridge is a free data retrieval call binding the contract method 0x3e55c0c7.
//
// Solidity: function sequencerBridge() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) SequencerBridge() (common.Address, error) {
	return _RollupUserFacet.Contract.SequencerBridge(&_RollupUserFacet.CallOpts)
}

// SequencerInboxMaxDelayBlocks is a free data retrieval call binding the contract method 0x14828f92.
//
// Solidity: function sequencerInboxMaxDelayBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) SequencerInboxMaxDelayBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "sequencerInboxMaxDelayBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerInboxMaxDelayBlocks is a free data retrieval call binding the contract method 0x14828f92.
//
// Solidity: function sequencerInboxMaxDelayBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) SequencerInboxMaxDelayBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.SequencerInboxMaxDelayBlocks(&_RollupUserFacet.CallOpts)
}

// SequencerInboxMaxDelayBlocks is a free data retrieval call binding the contract method 0x14828f92.
//
// Solidity: function sequencerInboxMaxDelayBlocks() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) SequencerInboxMaxDelayBlocks() (*big.Int, error) {
	return _RollupUserFacet.Contract.SequencerInboxMaxDelayBlocks(&_RollupUserFacet.CallOpts)
}

// SequencerInboxMaxDelaySeconds is a free data retrieval call binding the contract method 0xaddd6784.
//
// Solidity: function sequencerInboxMaxDelaySeconds() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) SequencerInboxMaxDelaySeconds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "sequencerInboxMaxDelaySeconds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerInboxMaxDelaySeconds is a free data retrieval call binding the contract method 0xaddd6784.
//
// Solidity: function sequencerInboxMaxDelaySeconds() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) SequencerInboxMaxDelaySeconds() (*big.Int, error) {
	return _RollupUserFacet.Contract.SequencerInboxMaxDelaySeconds(&_RollupUserFacet.CallOpts)
}

// SequencerInboxMaxDelaySeconds is a free data retrieval call binding the contract method 0xaddd6784.
//
// Solidity: function sequencerInboxMaxDelaySeconds() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) SequencerInboxMaxDelaySeconds() (*big.Int, error) {
	return _RollupUserFacet.Contract.SequencerInboxMaxDelaySeconds(&_RollupUserFacet.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) StakeToken() (common.Address, error) {
	return _RollupUserFacet.Contract.StakeToken(&_RollupUserFacet.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserFacet.Contract.StakeToken(&_RollupUserFacet.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) StakerCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) StakerCount() (*big.Int, error) {
	return _RollupUserFacet.Contract.StakerCount(&_RollupUserFacet.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) StakerCount() (*big.Int, error) {
	return _RollupUserFacet.Contract.StakerCount(&_RollupUserFacet.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.WithdrawableFunds(&_RollupUserFacet.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _RollupUserFacet.Contract.WithdrawableFunds(&_RollupUserFacet.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.ZombieAddress(&_RollupUserFacet.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserFacet *RollupUserFacetCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserFacet.Contract.ZombieAddress(&_RollupUserFacet.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ZombieCount() (*big.Int, error) {
	return _RollupUserFacet.Contract.ZombieCount(&_RollupUserFacet.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupUserFacet.Contract.ZombieCount(&_RollupUserFacet.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserFacet.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) ZombieLatestStakedNode(zombieNum *big.Int) (*big.Int, error) {
	return _RollupUserFacet.Contract.ZombieLatestStakedNode(&_RollupUserFacet.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint256)
func (_RollupUserFacet *RollupUserFacetCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (*big.Int, error) {
	return _RollupUserFacet.Contract.ZombieLatestStakedNode(&_RollupUserFacet.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserFacet *RollupUserFacetTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "addToDeposit", stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserFacet *RollupUserFacetSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.AddToDeposit(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.AddToDeposit(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address winningStaker, address losingStaker) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) CompleteChallenge(opts *bind.TransactOpts, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "completeChallenge", winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address winningStaker, address losingStaker) returns()
func (_RollupUserFacet *RollupUserFacetSession) CompleteChallenge(winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.CompleteChallenge(&_RollupUserFacet.TransactOpts, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address winningStaker, address losingStaker) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) CompleteChallenge(winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.CompleteChallenge(&_RollupUserFacet.TransactOpts, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0xf31d863f.
//
// Solidity: function confirmNextNode(bytes32 beforeSendAcc, bytes sendsData, uint256[] sendLengths, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) ConfirmNextNode(opts *bind.TransactOpts, beforeSendAcc [32]byte, sendsData []byte, sendLengths []*big.Int, afterSendCount *big.Int, afterLogAcc [32]byte, afterLogCount *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "confirmNextNode", beforeSendAcc, sendsData, sendLengths, afterSendCount, afterLogAcc, afterLogCount)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0xf31d863f.
//
// Solidity: function confirmNextNode(bytes32 beforeSendAcc, bytes sendsData, uint256[] sendLengths, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount) returns()
func (_RollupUserFacet *RollupUserFacetSession) ConfirmNextNode(beforeSendAcc [32]byte, sendsData []byte, sendLengths []*big.Int, afterSendCount *big.Int, afterLogAcc [32]byte, afterLogCount *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ConfirmNextNode(&_RollupUserFacet.TransactOpts, beforeSendAcc, sendsData, sendLengths, afterSendCount, afterLogAcc, afterLogCount)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0xf31d863f.
//
// Solidity: function confirmNextNode(bytes32 beforeSendAcc, bytes sendsData, uint256[] sendLengths, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) ConfirmNextNode(beforeSendAcc [32]byte, sendsData []byte, sendLengths []*big.Int, afterSendCount *big.Int, afterLogAcc [32]byte, afterLogCount *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ConfirmNextNode(&_RollupUserFacet.TransactOpts, beforeSendAcc, sendsData, sendLengths, afterSendCount, afterLogAcc, afterLogCount)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x488ed1a9.
//
// Solidity: function createChallenge(address[2] stakers, uint256[2] nodeNums, bytes32[2] executionHashes, uint256[2] proposedTimes, uint256[2] maxMessageCounts) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]*big.Int, executionHashes [2][32]byte, proposedTimes [2]*big.Int, maxMessageCounts [2]*big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "createChallenge", stakers, nodeNums, executionHashes, proposedTimes, maxMessageCounts)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x488ed1a9.
//
// Solidity: function createChallenge(address[2] stakers, uint256[2] nodeNums, bytes32[2] executionHashes, uint256[2] proposedTimes, uint256[2] maxMessageCounts) returns()
func (_RollupUserFacet *RollupUserFacetSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]*big.Int, executionHashes [2][32]byte, proposedTimes [2]*big.Int, maxMessageCounts [2]*big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.CreateChallenge(&_RollupUserFacet.TransactOpts, stakers, nodeNums, executionHashes, proposedTimes, maxMessageCounts)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x488ed1a9.
//
// Solidity: function createChallenge(address[2] stakers, uint256[2] nodeNums, bytes32[2] executionHashes, uint256[2] proposedTimes, uint256[2] maxMessageCounts) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]*big.Int, executionHashes [2][32]byte, proposedTimes [2]*big.Int, maxMessageCounts [2]*big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.CreateChallenge(&_RollupUserFacet.TransactOpts, stakers, nodeNums, executionHashes, proposedTimes, maxMessageCounts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) Initialize(opts *bind.TransactOpts, _stakeToken common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "initialize", _stakeToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) returns()
func (_RollupUserFacet *RollupUserFacetSession) Initialize(_stakeToken common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.Initialize(&_RollupUserFacet.TransactOpts, _stakeToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) Initialize(_stakeToken common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.Initialize(&_RollupUserFacet.TransactOpts, _stakeToken)
}

// NewStake is a paid mutator transaction binding the contract method 0x5f576db6.
//
// Solidity: function newStake() payable returns()
func (_RollupUserFacet *RollupUserFacetTransactor) NewStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "newStake")
}

// NewStake is a paid mutator transaction binding the contract method 0x5f576db6.
//
// Solidity: function newStake() payable returns()
func (_RollupUserFacet *RollupUserFacetSession) NewStake() (*types.Transaction, error) {
	return _RollupUserFacet.Contract.NewStake(&_RollupUserFacet.TransactOpts)
}

// NewStake is a paid mutator transaction binding the contract method 0x5f576db6.
//
// Solidity: function newStake() payable returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) NewStake() (*types.Transaction, error) {
	return _RollupUserFacet.Contract.NewStake(&_RollupUserFacet.TransactOpts)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserFacet *RollupUserFacetSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ReduceDeposit(&_RollupUserFacet.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ReduceDeposit(&_RollupUserFacet.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RejectNextNode(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RejectNextNode(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserFacet *RollupUserFacetSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RemoveOldZombies(&_RollupUserFacet.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RemoveOldZombies(&_RollupUserFacet.TransactOpts, startIndex)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserFacet *RollupUserFacetSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RemoveZombie(&_RollupUserFacet.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.RemoveZombie(&_RollupUserFacet.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ReturnOldDeposit(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.ReturnOldDeposit(&_RollupUserFacet.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x414f23fe.
//
// Solidity: function stakeOnExistingNode(uint256 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum *big.Int, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x414f23fe.
//
// Solidity: function stakeOnExistingNode(uint256 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserFacet *RollupUserFacetSession) StakeOnExistingNode(nodeNum *big.Int, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.StakeOnExistingNode(&_RollupUserFacet.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x414f23fe.
//
// Solidity: function stakeOnExistingNode(uint256 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) StakeOnExistingNode(nodeNum *big.Int, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.StakeOnExistingNode(&_RollupUserFacet.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x3fe38627.
//
// Solidity: function stakeOnNewNode(bytes32 expectedNodeHash, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields, uint256 beforeProposedBlock, uint256 beforeInboxMaxCount, bytes sequencerBatchProof) returns()
func (_RollupUserFacet *RollupUserFacetTransactor) StakeOnNewNode(opts *bind.TransactOpts, expectedNodeHash [32]byte, assertionBytes32Fields [2][3][32]byte, assertionIntFields [2][4]*big.Int, beforeProposedBlock *big.Int, beforeInboxMaxCount *big.Int, sequencerBatchProof []byte) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "stakeOnNewNode", expectedNodeHash, assertionBytes32Fields, assertionIntFields, beforeProposedBlock, beforeInboxMaxCount, sequencerBatchProof)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x3fe38627.
//
// Solidity: function stakeOnNewNode(bytes32 expectedNodeHash, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields, uint256 beforeProposedBlock, uint256 beforeInboxMaxCount, bytes sequencerBatchProof) returns()
func (_RollupUserFacet *RollupUserFacetSession) StakeOnNewNode(expectedNodeHash [32]byte, assertionBytes32Fields [2][3][32]byte, assertionIntFields [2][4]*big.Int, beforeProposedBlock *big.Int, beforeInboxMaxCount *big.Int, sequencerBatchProof []byte) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.StakeOnNewNode(&_RollupUserFacet.TransactOpts, expectedNodeHash, assertionBytes32Fields, assertionIntFields, beforeProposedBlock, beforeInboxMaxCount, sequencerBatchProof)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x3fe38627.
//
// Solidity: function stakeOnNewNode(bytes32 expectedNodeHash, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields, uint256 beforeProposedBlock, uint256 beforeInboxMaxCount, bytes sequencerBatchProof) returns()
func (_RollupUserFacet *RollupUserFacetTransactorSession) StakeOnNewNode(expectedNodeHash [32]byte, assertionBytes32Fields [2][3][32]byte, assertionIntFields [2][4]*big.Int, beforeProposedBlock *big.Int, beforeInboxMaxCount *big.Int, sequencerBatchProof []byte) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.StakeOnNewNode(&_RollupUserFacet.TransactOpts, expectedNodeHash, assertionBytes32Fields, assertionIntFields, beforeProposedBlock, beforeInboxMaxCount, sequencerBatchProof)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x81fbc98a.
//
// Solidity: function withdrawStakerFunds(address destination) returns(uint256)
func (_RollupUserFacet *RollupUserFacetTransactor) WithdrawStakerFunds(opts *bind.TransactOpts, destination common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.contract.Transact(opts, "withdrawStakerFunds", destination)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x81fbc98a.
//
// Solidity: function withdrawStakerFunds(address destination) returns(uint256)
func (_RollupUserFacet *RollupUserFacetSession) WithdrawStakerFunds(destination common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.WithdrawStakerFunds(&_RollupUserFacet.TransactOpts, destination)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x81fbc98a.
//
// Solidity: function withdrawStakerFunds(address destination) returns(uint256)
func (_RollupUserFacet *RollupUserFacetTransactorSession) WithdrawStakerFunds(destination common.Address) (*types.Transaction, error) {
	return _RollupUserFacet.Contract.WithdrawStakerFunds(&_RollupUserFacet.TransactOpts, destination)
}

// RollupUserFacetNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupUserFacet contract.
type RollupUserFacetNodeConfirmedIterator struct {
	Event *RollupUserFacetNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetNodeConfirmed represents a NodeConfirmed event raised by the RollupUserFacet contract.
type RollupUserFacetNodeConfirmed struct {
	NodeNum        *big.Int
	AfterSendAcc   [32]byte
	AfterSendCount *big.Int
	AfterLogAcc    [32]byte
	AfterLogCount  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x2400bd6e429cfcd98fe43a75bbbe4702c59c99d636100690130cc1ebb611c5a2.
//
// Solidity: event NodeConfirmed(uint256 indexed nodeNum, bytes32 afterSendAcc, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []*big.Int) (*RollupUserFacetNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetNodeConfirmedIterator{contract: _RollupUserFacet.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x2400bd6e429cfcd98fe43a75bbbe4702c59c99d636100690130cc1ebb611c5a2.
//
// Solidity: event NodeConfirmed(uint256 indexed nodeNum, bytes32 afterSendAcc, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserFacetNodeConfirmed, nodeNum []*big.Int) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetNodeConfirmed)
				if err := _RollupUserFacet.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x2400bd6e429cfcd98fe43a75bbbe4702c59c99d636100690130cc1ebb611c5a2.
//
// Solidity: event NodeConfirmed(uint256 indexed nodeNum, bytes32 afterSendAcc, uint256 afterSendCount, bytes32 afterLogAcc, uint256 afterLogCount)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseNodeConfirmed(log types.Log) (*RollupUserFacetNodeConfirmed, error) {
	event := new(RollupUserFacetNodeConfirmed)
	if err := _RollupUserFacet.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupUserFacet contract.
type RollupUserFacetNodeCreatedIterator struct {
	Event *RollupUserFacetNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetNodeCreated represents a NodeCreated event raised by the RollupUserFacet contract.
type RollupUserFacetNodeCreated struct {
	NodeNum                 *big.Int
	ParentNodeHash          [32]byte
	NodeHash                [32]byte
	ExecutionHash           [32]byte
	InboxMaxCount           *big.Int
	AfterInboxBatchEndCount *big.Int
	AfterInboxBatchAcc      [32]byte
	AssertionBytes32Fields  [2][3][32]byte
	AssertionIntFields      [2][4]*big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x8016306209aff73e79f274cf38a41928996f746e2953111902e1f55be1713a54.
//
// Solidity: event NodeCreated(uint256 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 nodeHash, bytes32 executionHash, uint256 inboxMaxCount, uint256 afterInboxBatchEndCount, bytes32 afterInboxBatchAcc, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []*big.Int, parentNodeHash [][32]byte) (*RollupUserFacetNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetNodeCreatedIterator{contract: _RollupUserFacet.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x8016306209aff73e79f274cf38a41928996f746e2953111902e1f55be1713a54.
//
// Solidity: event NodeCreated(uint256 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 nodeHash, bytes32 executionHash, uint256 inboxMaxCount, uint256 afterInboxBatchEndCount, bytes32 afterInboxBatchAcc, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupUserFacetNodeCreated, nodeNum []*big.Int, parentNodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetNodeCreated)
				if err := _RollupUserFacet.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x8016306209aff73e79f274cf38a41928996f746e2953111902e1f55be1713a54.
//
// Solidity: event NodeCreated(uint256 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 nodeHash, bytes32 executionHash, uint256 inboxMaxCount, uint256 afterInboxBatchEndCount, bytes32 afterInboxBatchAcc, bytes32[3][2] assertionBytes32Fields, uint256[4][2] assertionIntFields)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseNodeCreated(log types.Log) (*RollupUserFacetNodeCreated, error) {
	event := new(RollupUserFacetNodeCreated)
	if err := _RollupUserFacet.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupUserFacet contract.
type RollupUserFacetNodeRejectedIterator struct {
	Event *RollupUserFacetNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetNodeRejected represents a NodeRejected event raised by the RollupUserFacet contract.
type RollupUserFacetNodeRejected struct {
	NodeNum *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0x9f7eee12f08e41a1d1a617e76576aa2d6a1e06dbdd72d817e62b6e8dfdebe2a3.
//
// Solidity: event NodeRejected(uint256 indexed nodeNum)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []*big.Int) (*RollupUserFacetNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetNodeRejectedIterator{contract: _RollupUserFacet.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0x9f7eee12f08e41a1d1a617e76576aa2d6a1e06dbdd72d817e62b6e8dfdebe2a3.
//
// Solidity: event NodeRejected(uint256 indexed nodeNum)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupUserFacetNodeRejected, nodeNum []*big.Int) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetNodeRejected)
				if err := _RollupUserFacet.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0x9f7eee12f08e41a1d1a617e76576aa2d6a1e06dbdd72d817e62b6e8dfdebe2a3.
//
// Solidity: event NodeRejected(uint256 indexed nodeNum)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseNodeRejected(log types.Log) (*RollupUserFacetNodeRejected, error) {
	event := new(RollupUserFacetNodeRejected)
	if err := _RollupUserFacet.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetNodesDestroyedIterator is returned from FilterNodesDestroyed and is used to iterate over the raw logs and unpacked data for NodesDestroyed events raised by the RollupUserFacet contract.
type RollupUserFacetNodesDestroyedIterator struct {
	Event *RollupUserFacetNodesDestroyed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetNodesDestroyedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetNodesDestroyed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetNodesDestroyed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetNodesDestroyedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetNodesDestroyedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetNodesDestroyed represents a NodesDestroyed event raised by the RollupUserFacet contract.
type RollupUserFacetNodesDestroyed struct {
	StartNode *big.Int
	EndNode   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodesDestroyed is a free log retrieval operation binding the contract event 0x9455d3b30b954764ff9f6ebe9120d1d8bb842ba3923bb5e0f71317b04d8a272d.
//
// Solidity: event NodesDestroyed(uint256 indexed startNode, uint256 indexed endNode)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterNodesDestroyed(opts *bind.FilterOpts, startNode []*big.Int, endNode []*big.Int) (*RollupUserFacetNodesDestroyedIterator, error) {

	var startNodeRule []interface{}
	for _, startNodeItem := range startNode {
		startNodeRule = append(startNodeRule, startNodeItem)
	}
	var endNodeRule []interface{}
	for _, endNodeItem := range endNode {
		endNodeRule = append(endNodeRule, endNodeItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "NodesDestroyed", startNodeRule, endNodeRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetNodesDestroyedIterator{contract: _RollupUserFacet.contract, event: "NodesDestroyed", logs: logs, sub: sub}, nil
}

// WatchNodesDestroyed is a free log subscription operation binding the contract event 0x9455d3b30b954764ff9f6ebe9120d1d8bb842ba3923bb5e0f71317b04d8a272d.
//
// Solidity: event NodesDestroyed(uint256 indexed startNode, uint256 indexed endNode)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchNodesDestroyed(opts *bind.WatchOpts, sink chan<- *RollupUserFacetNodesDestroyed, startNode []*big.Int, endNode []*big.Int) (event.Subscription, error) {

	var startNodeRule []interface{}
	for _, startNodeItem := range startNode {
		startNodeRule = append(startNodeRule, startNodeItem)
	}
	var endNodeRule []interface{}
	for _, endNodeItem := range endNode {
		endNodeRule = append(endNodeRule, endNodeItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "NodesDestroyed", startNodeRule, endNodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetNodesDestroyed)
				if err := _RollupUserFacet.contract.UnpackLog(event, "NodesDestroyed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodesDestroyed is a log parse operation binding the contract event 0x9455d3b30b954764ff9f6ebe9120d1d8bb842ba3923bb5e0f71317b04d8a272d.
//
// Solidity: event NodesDestroyed(uint256 indexed startNode, uint256 indexed endNode)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseNodesDestroyed(log types.Log) (*RollupUserFacetNodesDestroyed, error) {
	event := new(RollupUserFacetNodesDestroyed)
	if err := _RollupUserFacet.contract.UnpackLog(event, "NodesDestroyed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupUserFacet contract.
type RollupUserFacetOwnerFunctionCalledIterator struct {
	Event *RollupUserFacetOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupUserFacet contract.
type RollupUserFacetOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupUserFacetOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetOwnerFunctionCalledIterator{contract: _RollupUserFacet.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupUserFacetOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetOwnerFunctionCalled)
				if err := _RollupUserFacet.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupUserFacetOwnerFunctionCalled, error) {
	event := new(RollupUserFacetOwnerFunctionCalled)
	if err := _RollupUserFacet.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserFacet contract.
type RollupUserFacetPausedIterator struct {
	Event *RollupUserFacetPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetPaused represents a Paused event raised by the RollupUserFacet contract.
type RollupUserFacetPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserFacetPausedIterator, error) {

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetPausedIterator{contract: _RollupUserFacet.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserFacetPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetPaused)
				if err := _RollupUserFacet.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) ParsePaused(log types.Log) (*RollupUserFacetPaused, error) {
	event := new(RollupUserFacetPaused)
	if err := _RollupUserFacet.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserFacet contract.
type RollupUserFacetRollupChallengeStartedIterator struct {
	Event *RollupUserFacetRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserFacet contract.
type RollupUserFacetRollupChallengeStarted struct {
	ChallengeContract common.Address
	Asserter          common.Address
	Challenger        common.Address
	ChallengedNode    *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0xa5256d19d4ddaf646f4b5c1861b8d4c08238e6356b8ae36dcc49ac67fda75879.
//
// Solidity: event RollupChallengeStarted(address indexed challengeContract, address asserter, address challenger, uint256 challengedNode)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeContract []common.Address) (*RollupUserFacetRollupChallengeStartedIterator, error) {

	var challengeContractRule []interface{}
	for _, challengeContractItem := range challengeContract {
		challengeContractRule = append(challengeContractRule, challengeContractItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "RollupChallengeStarted", challengeContractRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetRollupChallengeStartedIterator{contract: _RollupUserFacet.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0xa5256d19d4ddaf646f4b5c1861b8d4c08238e6356b8ae36dcc49ac67fda75879.
//
// Solidity: event RollupChallengeStarted(address indexed challengeContract, address asserter, address challenger, uint256 challengedNode)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserFacetRollupChallengeStarted, challengeContract []common.Address) (event.Subscription, error) {

	var challengeContractRule []interface{}
	for _, challengeContractItem := range challengeContract {
		challengeContractRule = append(challengeContractRule, challengeContractItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "RollupChallengeStarted", challengeContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetRollupChallengeStarted)
				if err := _RollupUserFacet.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0xa5256d19d4ddaf646f4b5c1861b8d4c08238e6356b8ae36dcc49ac67fda75879.
//
// Solidity: event RollupChallengeStarted(address indexed challengeContract, address asserter, address challenger, uint256 challengedNode)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserFacetRollupChallengeStarted, error) {
	event := new(RollupUserFacetRollupChallengeStarted)
	if err := _RollupUserFacet.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupUserFacet contract.
type RollupUserFacetRollupCreatedIterator struct {
	Event *RollupUserFacetRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetRollupCreated represents a RollupCreated event raised by the RollupUserFacet contract.
type RollupUserFacetRollupCreated struct {
	MachineHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0x4ac0014773275a3dfb58c58539631006301de41998cce7c4f8698d297c88bb2d.
//
// Solidity: event RollupCreated(bytes32 machineHash)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterRollupCreated(opts *bind.FilterOpts) (*RollupUserFacetRollupCreatedIterator, error) {

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "RollupCreated")
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetRollupCreatedIterator{contract: _RollupUserFacet.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0x4ac0014773275a3dfb58c58539631006301de41998cce7c4f8698d297c88bb2d.
//
// Solidity: event RollupCreated(bytes32 machineHash)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupUserFacetRollupCreated) (event.Subscription, error) {

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "RollupCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetRollupCreated)
				if err := _RollupUserFacet.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0x4ac0014773275a3dfb58c58539631006301de41998cce7c4f8698d297c88bb2d.
//
// Solidity: event RollupCreated(bytes32 machineHash)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseRollupCreated(log types.Log) (*RollupUserFacetRollupCreated, error) {
	event := new(RollupUserFacetRollupCreated)
	if err := _RollupUserFacet.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetStakerReassignedIterator is returned from FilterStakerReassigned and is used to iterate over the raw logs and unpacked data for StakerReassigned events raised by the RollupUserFacet contract.
type RollupUserFacetStakerReassignedIterator struct {
	Event *RollupUserFacetStakerReassigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetStakerReassignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetStakerReassigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetStakerReassigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetStakerReassignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetStakerReassignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetStakerReassigned represents a StakerReassigned event raised by the RollupUserFacet contract.
type RollupUserFacetStakerReassigned struct {
	Staker  common.Address
	NewNode *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStakerReassigned is a free log retrieval operation binding the contract event 0x8d475b2086edfd0e8badb5d935b5e14f0e09686368da62192932aaf86c137870.
//
// Solidity: event StakerReassigned(address indexed staker, uint256 newNode)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterStakerReassigned(opts *bind.FilterOpts, staker []common.Address) (*RollupUserFacetStakerReassignedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "StakerReassigned", stakerRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetStakerReassignedIterator{contract: _RollupUserFacet.contract, event: "StakerReassigned", logs: logs, sub: sub}, nil
}

// WatchStakerReassigned is a free log subscription operation binding the contract event 0x8d475b2086edfd0e8badb5d935b5e14f0e09686368da62192932aaf86c137870.
//
// Solidity: event StakerReassigned(address indexed staker, uint256 newNode)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchStakerReassigned(opts *bind.WatchOpts, sink chan<- *RollupUserFacetStakerReassigned, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "StakerReassigned", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetStakerReassigned)
				if err := _RollupUserFacet.contract.UnpackLog(event, "StakerReassigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakerReassigned is a log parse operation binding the contract event 0x8d475b2086edfd0e8badb5d935b5e14f0e09686368da62192932aaf86c137870.
//
// Solidity: event StakerReassigned(address indexed staker, uint256 newNode)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseStakerReassigned(log types.Log) (*RollupUserFacetStakerReassigned, error) {
	event := new(RollupUserFacetStakerReassigned)
	if err := _RollupUserFacet.contract.UnpackLog(event, "StakerReassigned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserFacetUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserFacet contract.
type RollupUserFacetUnpausedIterator struct {
	Event *RollupUserFacetUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserFacetUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserFacetUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserFacetUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserFacetUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserFacetUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserFacetUnpaused represents a Unpaused event raised by the RollupUserFacet contract.
type RollupUserFacetUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserFacetUnpausedIterator, error) {

	logs, sub, err := _RollupUserFacet.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserFacetUnpausedIterator{contract: _RollupUserFacet.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserFacetUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserFacet.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserFacetUnpaused)
				if err := _RollupUserFacet.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserFacet *RollupUserFacetFilterer) ParseUnpaused(log types.Log) (*RollupUserFacetUnpaused, error) {
	event := new(RollupUserFacetUnpaused)
	if err := _RollupUserFacet.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
