// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[7]\",\"name\":\"fields\",\"type\":\"bytes32[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofHashFuncSigs = map[string]string{
	"9d16dd04": "executeStep(address,uint256,bytes32[2],bytes,bytes)",
	"2ccebb7a": "executeStepDebug(address,uint256,bytes32[2],bytes,bytes)",
}

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = "0x608060405234801561001057600080fd5b5061400d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632ccebb7a1461003b5780639d16dd04146101f2575b600080fd5b610114600480360360c081101561005157600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460018302840111600160201b831117156100b957600080fd5b919390929091602081019035600160201b8111156100d657600080fd5b8201836020820111156100e857600080fd5b803590602001918460018302840111600160201b8311171561010957600080fd5b50909250905061031d565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561015557818101518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101b557818101518382015260200161019d565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102cb600480360360c081101561020857600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561023d57600080fd5b82018360208201111561024f57600080fd5b803590602001918460018302840111600160201b8311171561027057600080fd5b919390929091602081019035600160201b81111561028d57600080fd5b82018360208201111561029f57600080fd5b803590602001918460018302840111600160201b831117156102c057600080fd5b5090925090506103e2565b60405180846001600160401b0316815260200183815260200182600760200280838360005b838110156103085781810151838201526020016102f0565b50505050905001935050505060405180910390f35b606080610328613d63565b6103ac898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e6104a1565b90506103b781610955565b6103c48160200151610d63565b92506103d38160400151610d63565b91505097509795505050505050565b6000806103ed613e10565b6103f5613d63565b6104798a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f6104a1565b905061048481610955565b61048d816110d7565b935093509350509750975097945050505050565b6104a9613d63565b6000846000815181106104b857fe5b602001015160f81c60f81b60f81c90506000856001815181106104d757fe5b602001015160f81c60f81b60f81c90506000866002815181106104f657fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561052057600080fd5b5060405190808252806020026020018201604052801561055a57816020015b610547613e2e565b81526020019060019003908161053f5790505b50905060608360040160ff166001600160401b038111801561057b57600080fd5b506040519080825280602002602001820160405280156105b557816020015b6105a2613e2e565b81526020019060019003908161059a5790505b50905060005b8560ff168110156105f1576105d08b8561115e565b8483815181106105dc57fe5b602090810291909101015293506001016105bb565b5060005b8460ff1681101561062b5761060a8b8561115e565b83838151811061061657fe5b602090810291909101015293506001016105f5565b50610634613e6b565b61063e8b85611320565b809250819550505060008b858151811061065457fe5b01602001516001959095019460f81c905061066d613d63565b6001600160a01b038b16815260208101839052610689836113d1565b6040820152606081018f90528d6000602002013560808201528d60016020908102919091013560a0830152600060c0830181905260408051808201825260ff8c811682528185018a905260e086019190915281518083019092528a8116825292810187905261010084015283821660018114610120850152918b1661014084015261016083018f90526101a083018e90526102208301526101808201879052158061073757508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107e45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107a9578181015183820152602001610791565b50505050905090810190601f1680156107d65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107ed613e2e565b60ff831661080e576108078a836020015160000151611445565b90506108ae565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b8152509061087e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156107a9578181015183820152602001610791565b506108ab8a8360200151600001518860018d0360ff168151811061089e57fe5b60200260200101516114a9565b90505b6108b78161152d565b60208301515260005b838a0360ff168110156108ff576108f78782815181106108dc57fe5b6020026020010151846020015161169a90919063ffffffff16565b6001016108c0565b5060005b8860ff168110156109405761093886828151811061091d57fe5b602002602001015184602001516116b490919063ffffffff16565b600101610903565b50909f9e505050505050505050505050505050565b6000806000613ed661096e85610140015160ff166116ce565b935093509350935060008411806109885750846101200151155b8015610999575060e0850151518410155b806109c0575084610120015180156109af575083155b80156109c0575060e0850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a2f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156107a9578181015183820152602001610791565b50610100850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610aa55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156107a9578181015183820152602001610791565b5060e085015151841115610b6257610ac3610abe6117aa565b61152d565b610ad486604001516020015161152d565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b475760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156107a9578181015183820152602001610791565b50610b538560056117f1565b50610b5d85611866565b610c22565b61010085015151831115610bfd57610b7b610abe6117aa565b610b8c86604001516040015161152d565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b475760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156107a9578181015183820152602001610791565b610c0785836117f1565b15610c1557610b5d85611866565b610c22858263ffffffff16565b84610220015115610cc45760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201835281519101209086015160c001511415610c8757610c828560400151611871565b610cc4565b6000610220860152604085015160c081015190526101208501518015610cab575083155b610cb95760e0850151600090525b610100850151600090525b60005b60e086015151811015610d0e57610d068660e00151602001518281518110610ceb57fe5b6020026020010151876040015161169a90919063ffffffff16565b600101610cc7565b5060005b61010086015151811015610d5b57610d53866101000151602001518281518110610d3857fe5b602002602001015187604001516116b490919063ffffffff16565b600101610d12565b505050505050565b6060610d72826000015161187c565b610d87610d82846020015161152d565b61187c565b610d97610d82856040015161152d565b610da7610d82866060015161152d565b610db7610d82876080015161152d565b610dc48760a0015161194b565b610dd18860c0015161187c565b610de1610d828a60e0015161152d565b60405160200180806709ac2c6d0d2dcca560c31b81525060080189805190602001908083835b60208310610e265780518252601f199092019160209182019101610e07565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528a516003909101928b0191508083835b60208310610e7d5780518252601f199092019160209182019101610e5e565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ed45780518252601f199092019160209182019101610eb5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f2b5780518252601f199092019160209182019101610f0c565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f825780518252601f199092019160209182019101610f63565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fd95780518252601f199092019160209182019101610fba565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b602083106110305780518252601f199092019160209182019101611011565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110875780518252601f199092019160209182019101611068565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b8152506002019850505050505050505060405160208183030381529060405290505b919050565b6000806110e2613e10565b8360c0015184606001516040518060e001604052806111048860200151611a25565b81526020016111168860400151611a25565b8152602001876080015181526020018760a001518152602001876101c001518152602001876101e00151815260200187610200015160001b8152509250925092509193909250565b6000611168613e2e565b835183106111ae576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806111bb8686611aff565b915091506111c7611b26565b60ff168160ff1614156111fb5760006111e08784611b2b565b9093509050826111ef82611b99565b94509450505050611319565b611203611c59565b60ff168160ff1614156112255761121a8683611c5e565b935093505050611319565b61122d611d00565b60ff168160ff1614156112555760006112468784611b2b565b9093509050826111ef82611d05565b61125d611df1565b60ff168160ff1614156112745761121a8683611df6565b61127c611e8b565b60ff168160ff161015801561129d5750611294611e90565b60ff168160ff16105b156112d95760006112ac611e8b565b8203905060606112bd828986611e95565b9094509050836112cc82611f3d565b9550955050505050611319565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061132a613e6b565b611332613e6b565b60006101008201819052806113478787611b2b565b90965091506113568787611df6565b602085015295506113678787611df6565b60408501529550611378878761115e565b60608501529550611389878761115e565b6080850152955061139a8787611b2b565b60a085015295506113ab8787611b2b565b90965090506113ba878761115e565b60e085015291835260c08301529590945092505050565b6113d9613e6b565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b61144d613e2e565b6040805160608101825260ff8516815260208082018590528251600080825291810184526114a093830191611498565b611485613e2e565b81526020019060019003908161147d5790505b50905261207e565b90505b92915050565b6114b1613e2e565b604080516001808252818301909252606091816020015b6114d0613e2e565b8152602001906001900390816114c857905050905082816000815181106114f357fe5b602002602001018190525061152460405180606001604052808760ff1681526020018681526020018381525061207e565b95945050505050565b6000611537611b26565b60ff16826080015160ff16141561155a5781516115539061210e565b90506110d2565b611562611c59565b60ff16826080015160ff161415611580576115538260200151612132565b611588611df1565b60ff16826080015160ff1614156115aa57815160a08301516115539190612227565b6115b2611e8b565b60ff16826080015160ff1614156115eb576115cb613e2e565b6115d88360400151612275565b90506115e38161152d565b9150506110d2565b6115f36123ea565b60ff16826080015160ff16141561160c575080516110d2565b611614611d00565b60ff16826080015160ff161415611659575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110d2565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6116a88260200151826123ef565b82602001819052505050565b6116c28260400151826123ef565b82604001819052505050565b60008080613ed660208514156116f3575060019250600091506007905061246d6117a3565b602185141561171157506001925060009150600390506124a66117a3565b602285141561172f57506002925060009150600890506124ce6117a3565b602385141561174e57506001925060009150610258905061256d6117a3565b602485141561176c5750600392506000915060fa90506127576117a3565b60405162461bcd60e51b815260040180806020018281038252602c815260200180613fac602c913960400191505060405180910390fd5b9193509193565b6117b2613e2e565b604080516000808252602082019092526117ec916117e6565b6117d3613e2e565b8152602001906001900390816117cb5790505b50611f3d565b905090565b6000816001600160401b0316836040015160a001511015611836575060c0820180516005016001600160401b03169052604082015160001960a09091015260016114a3565b5060c0820180516001600160401b039083018116909152604083015160a0018051918316909103905260006114a3565b600161022090910152565b600161010090910152565b60408051818152606081810183529182919060208201818036833701905050905060005b60208110156119445760008482602081106118b757fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b6118dd82612811565b8585600202815181106118ec57fe5b60200101906001600160f81b031916908160001a90535061190c81612811565b85856002026001018151811061191e57fe5b60200101906001600160f81b031916908160001a90535050600190920191506118a09050565b5092915050565b606081806119725750506040805180820190915260018152600360fc1b60208201526110d2565b8060005b811561198a57600101600a82049150611976565b6060816001600160401b03811180156119a257600080fd5b506040519080825280601f01601f1916602001820160405280156119cd576020820181803683370190505b50905060001982015b8415611a1b57600a850660300160f81b828280600190039350815181106119f957fe5b60200101906001600160f81b031916908160001a905350600a850494506119d6565b5095945050505050565b600060028261010001511415611a3d575060006110d2565b60018261010001511415611a53575060016110d2565b81516020830151611a639061152d565b611a70846040015161152d565b611a7d856060015161152d565b611a8a866080015161152d565b8660a001518760c00151611aa18960e0015161152d565b60405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528051906020012090506110d2565b60008082600101848481518110611b1257fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611b43575060208385510310155b611b80576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611b8e8585612842565b915091509250929050565b611ba1613e2e565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611bf7565b611be4613e2e565b815260200190600190039081611bdc5790505b50905281526020016000604051908082528060200260200182016040528015611c3a57816020015b611c27613e2e565b815260200190600190039081611c1f5790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611c68613e2e565b82600080611c74613e2e565b6000611c808986611aff565b9095509350611c8f8986611aff565b9095509250600160ff85161415611cb057611caa898661115e565b90955091505b611cba898661289b565b9095509050600160ff85161415611ce55784611cd78483856114a9565b965096505050505050611319565b84611cf08483611445565b9650965050505050509250929050565b600c90565b611d0d613e2e565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611d5457600080fd5b50604051908082528060200260200182016040528015611d8e57816020015b611d7b613e2e565b815260200190600190039081611d735790505b50905281526020016000604051908082528060200260200182016040528015611dd157816020015b611dbe613e2e565b815260200190600190039081611db65790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611e00613e2e565b82845110158015611e15575060408385510310155b611e52576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611e5f868661289b565b9094509150611e6e8685611b2b565b909450905083611e7e83836128ac565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611eb457600080fd5b50604051908082528060200260200182016040528015611eee57816020015b611edb613e2e565b815260200190600190039081611ed35790505b50905060005b8760ff168160ff161015611f3057611f0c878461115e565b838360ff1681518110611f1b57fe5b60209081029190910101529250600101611ef4565b5090969095509350505050565b611f45613e2e565b611f4f825161296b565b611fa0576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611fd757838181518110611fba57fe5b602002602001015160a00151820191508080600101915050611fa5565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561201f57600080fd5b5060405190808252806020026020018201604052801561205957816020015b612046613e2e565b81526020019060019003908161203e5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b612086613e2e565b6040518060c001604052806000815260200183815260200160006001600160401b03811180156120b557600080fd5b506040519080825280602002602001820160405280156120ef57816020015b6120dc613e2e565b8152602001906001900390816120d45790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061214357fe5b6040820151516121a657612155611c59565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506110d2565b6121ae611c59565b82600001516121d484604001516000815181106121c757fe5b602002602001015161152d565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000612231611e8b565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b61227d613e2e565b6008825111156122cb576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b03811180156122e457600080fd5b5060405190808252806020026020018201604052801561230e578160200160208202803683370190505b508051909150600160005b82811015612371576123308682815181106121c757fe5b84828151811061233c57fe5b60200260200101818152505085818151811061235457fe5b602002602001015160a00151820191508080600101915050612319565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156123b357818101518382015260200161239b565b50505050905001925050506040516020818303038152906040528051906020012090506123e081836128ac565b9695505050505050565b606490565b6123f7613e2e565b6040805160028082526060828101909352816020015b612415613e2e565b81526020019060019003908161240d579050509050828160008151811061243857fe5b6020026020010181905250838160018151811061245157fe5b602002602001018190525061246581612275565b949350505050565b612475613e2e565b6124828260e00151612972565b90506124a28260e0015161249d6124988461152d565b611b99565b6129b4565b5050565b6124ae613e2e565b6124bb8260e00151612972565b90506124a28260e0015161249d836129de565b6124d6613e2e565b6124e38260e00151612972565b90506124ed613e2e565b6124fa8360e00151612972565b905061250582612a10565b1580612517575061251581612a10565b155b1561252c5761252583612a1b565b505061256a565b815181516040805160208082018590528183018490528251808303840181526060909201909252805191012060e0860151610d5b9061249d83611b99565b50565b612575613e2e565b6125828260e00151612972565b905061258d81612a24565b158061259f5750806040015151600714155b156125b3576125ad82612a1b565b5061256a565b604081015160005b60078110156125fd576125e08282815181106125d357fe5b6020026020010151612a10565b6125f5576125ed84612a1b565b50505061256a565b6001016125bb565b50612606613ed8565b60005b601981101561266a576040600382160283600483048151811061262857fe5b602002602001015160000151901c6001600160401b0316826005838161264a57fe5b0460058406600502016019811061265d57fe5b6020020152600101612609565b5061267481612a31565b604080516007808252610100820190925291925060609190816020015b612699613e2e565b81526020019060019003908161269157905050905060005b60078110156126e3576126c46000611b99565b8282815181106126d057fe5b60209081029190910101526001016126b1565b5060005b601981101561273e5760406003821602836005830460058406600502016019811061270e57fe5b6020020151901b82600483048151811061272457fe5b6020908102919091010151805190911790526001016126e7565b506127508560e0015161249d83611f3d565b5050505050565b61275f613e2e565b61276c8260e00151612972565b9050612776613e2e565b6127838360e00151612972565b905061278d613e2e565b61279a8460e00151612972565b90506127a583612a10565b15806127b757506127b582612a10565b155b806127c857506127c681612a10565b155b156127d6576125ed84612a1b565b82518251825160e08701516040805180820190915283815260208101839052612808919061249d90612498908761361f565b50505050505050565b6000600a60f883901c1015612831578160f81c60300160f81b90506110d2565b8160f81c60570160f81b90506110d2565b60008160200183511015612892576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611b8e8585612842565b6128b4613e2e565b6040805160c081018252848152815160608101835260008082526020808301829052845182815280820186529394908501939083019161290a565b6128f7613e2e565b8152602001906001900390816128ef5790505b5090528152602001600060405190808252806020026020018201604052801561294d57816020015b61293a613e2e565b8152602001906001900390816129325790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b61297a613e2e565b612982613e2e565b826020015160018460000151038151811061299957fe5b60209081029190910101518351600019018452915050919050565b8082602001518360000151815181106129c957fe5b60209081029190910101525080516001019052565b6129e6613e2e565b816080015160ff1660021415612a00576115536003611b99565b6114a3826080015160ff16611b99565b6080015160ff161590565b61256a81611866565b6080015160ff1660031490565b612a39613ed8565b612a41613ef7565b612a49613ef7565b612a51613ed8565b612a59613f15565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015613614576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612ca257fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612cdd57fe5b0485600460200201516002026001600160401b03161785600260058110612d0057fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110612f6a57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600f602002015282600160200201518360156020020151191683601060200201511887601060200201528260026020020151836016602002015119168360116020020151188760116020020152826003602002015183601760200201511916836012602002015118876012602002015282600460200201518360186020020151191683601360200201511887601360200201528260056020020151836000602002015119168360146020020151188760146020020152826006602002015183600160200201511916836015602002015118876015602002015282600760200201518360026020020151191683601660200201511887601660200201528260086020020151836003602002015119168360176020020151188760176020020152826009602002015183600460200201511916836018602002015118876018602002015281816018811061360257fe5b60200201518751188752600101612b7d565b509495945050505050565b6000613629613f34565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e08201526138f4613f34565b60005b60088163ffffffff1610156139815763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061392f57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff166040811061396957fe5b63ffffffff90921660209290920201526001016138f7565b5060106000805b60408363ffffffff161015613add57600384600f850363ffffffff16604081106139ae57fe5b602002015163ffffffff16901c6139df85600f860363ffffffff16604081106139d357fe5b60200201516012613d3c565b613a0386600f870363ffffffff16604081106139f757fe5b60200201516007613d3c565b18189150600a846002850363ffffffff1660408110613a1e57fe5b602002015163ffffffff16901c613a4f856002860363ffffffff1660408110613a4357fe5b60200201516013613d3c565b613a73866002870363ffffffff1660408110613a6757fe5b60200201516011613d3c565b1818905080846007850363ffffffff1660408110613a8d57fe5b602002015183866010870363ffffffff1660408110613aa857fe5b6020020151010101848463ffffffff1660408110613ac257fe5b63ffffffff9092166020929092020152600190920191613988565b613ae5613f53565b600093505b60088463ffffffff161015613b36578360200260e00363ffffffff1688901c818563ffffffff1660088110613b1b57fe5b63ffffffff9092166020929092020152600190930192613aea565b60008060008096505b60408763ffffffff161015613c8b576080840151613b5e906019613d3c565b6080850151613b6e90600b613d3c565b6080860151613b7e906006613d3c565b18189450878763ffffffff1660408110613b9457fe5b6020020151898863ffffffff1660408110613bab57fe5b6020020151608086015160a087015160c0880151613bca929190613d5a565b878760076020020151010101019250613beb84600060200201516016613d3c565b8451613bf890600d613d3c565b8551613c05906002613d3c565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613b3f565b600096505b60088763ffffffff161015613cdf578660200260e00363ffffffff168b901c848863ffffffff1660088110613cc157fe5b60200201805163ffffffff9201919091169052600190960195613c90565b60008097505b60088863ffffffff161015613d2c578760200260e00363ffffffff16858963ffffffff1660088110613d1357fe5b602002015160019099019863ffffffff16901b17613ce5565b9c9b505050505050505050505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60405180610240016040528060006001600160a01b03168152602001613d87613e6b565b8152602001613d94613e6b565b81526000602082018190526040820181905260608201819052608082015260a001613dbd613f72565b8152602001613dca613f72565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c0820181905260e0820181905261010082018190526101209091015290565b6040518060e001604052806007906020820280368337509192915050565b6040518060c0016040528060008152602001613e48613f8c565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161012081019091526000815260208101613e87613e2e565b8152602001613e94613e2e565b8152602001613ea1613e2e565b8152602001613eae613e2e565b81526000602082018190526040820152606001613ec9613e2e565b8152602001600081525090565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220ea5f97ddf800ef1d37b67ab06fce2218c96be5458b5e971850637bb7db97924b64736f6c634300060c0033"

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[7] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [7][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		TotalMessagesRead *big.Int
		Fields            [7][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.TotalMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([7][32]byte)).(*[7][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[7] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [7][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[7] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [7][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}
