// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofHashFuncSigs = map[string]string{
	"47dda1d6": "executeStep(address[2],uint256,bytes32[2],bytes,bytes)",
	"eba67f6e": "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)",
}

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = "0x608060405234801561001057600080fd5b50613f24806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610159575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610303565b60405180846001600160401b0316815260200183815260200182600460200280838360005b8381101561014457818101518382015260200161012c565b50505050905001935050505060405180910390f35b610225600480360360e081101561016f57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019757600080fd5b8201836020820111156101a957600080fd5b803590602001918460018302840111600160201b831117156101ca57600080fd5b919390929091602081019035600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460018302840111600160201b8311171561021a57600080fd5b5090925090506103c2565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026657818101518382015260200161024e565b50505050905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c65781810151838201526020016102ae565b50505050905090810190601f1680156102f35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030e613ca2565b610316613cc0565b61039a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610487565b90506103a58161093e565b6103ae81610d54565b935093509350509750975097945050505050565b6060806103cd613cc0565b610451898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610487565b905061045c8161093e565b6104698160400151610db7565b92506104788160600151610db7565b91505097509795505050505050565b61048f613cc0565b60008460008151811061049e57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bd57fe5b602001015160f81c60f81b60f81c90506000866002815181106104dc57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050657600080fd5b5060405190808252806020026020018201604052801561054057816020015b61052d613d52565b8152602001906001900390816105255790505b50905060608360040160ff166001600160401b038111801561056157600080fd5b5060405190808252806020026020018201604052801561059b57816020015b610588613d52565b8152602001906001900390816105805790505b50905060005b8560ff168110156105d7576105b68b856110c3565b8483815181106105c257fe5b602090810291909101015293506001016105a1565b5060005b8460ff16811015610611576105f08b856110c3565b8383815181106105fc57fe5b602090810291909101015293506001016105db565b5061061a613d8f565b6106248b85611285565b809250819550505060008b858151811061063a57fe5b01602001516001959095019460f81c9050610653613cc0565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261067e83611325565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061072057508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107cd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561079257818101518382015260200161077a565b50505050905090810190601f1680156107bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107d6613d52565b60ff83166107f7576107f08a83604001516000015161138e565b9050610897565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906108675760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561079257818101518382015260200161077a565b506108948a8360400151600001518860018d0360ff168151811061088757fe5b60200260200101516113f2565b90505b6108a081611476565b60408301515260005b838a0360ff168110156108e8576108e08782815181106108c557fe5b602002602001015184604001516115e390919063ffffffff16565b6001016108a9565b5060005b8860ff168110156109295761092186828151811061090657fe5b602002602001015184604001516115fd90919063ffffffff16565b6001016108ec565b50909f9e505050505050505050505050505050565b6000806000613ded61095785610160015160ff16611617565b935093509350935060008411806109715750846101400151155b80156109835750610100850151518410155b806109ab57508461014001518015610999575083155b80156109ab5750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a1a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561079257818101518382015260200161077a565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a905760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561079257818101518382015260200161077a565b5061010085015151841115610b4e57610aaf610aaa6116f3565b611476565b610ac0866060015160200151611476565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b335760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561079257818101518382015260200161077a565b50610b3f85600561173a565b50610b49856117af565b610c0e565b61012085015151831115610be957610b67610aaa6116f3565b610b78866060015160400151611476565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b335760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561079257818101518382015260200161077a565b610bf3858361173a565b15610c0157610b49856117af565b610c0e858263ffffffff16565b846101e0015115610cb35760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c7557610c7085606001516117ba565b610cb3565b60006101e0860152606085015160c081015190526101408501518015610c99575083155b610ca857610100850151600090525b610120850151600090525b60005b61010086015151811015610cff57610cf7866101000151602001518281518110610cdc57fe5b602002602001015187606001516115e390919063ffffffff16565b600101610cb6565b5060005b61012086015151811015610d4c57610d44866101200151602001518281518110610d2957fe5b602002602001015187606001516115fd90919063ffffffff16565b600101610d03565b505050505050565b600080610d5f613ca2565b8360e0015184608001516040518060800160405280610d8188604001516117c4565b8152602001610d9388606001516117c4565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dc68260000151611888565b610ddb610dd68460200151611476565b611888565b610deb610dd68560400151611476565b610dfb610dd68660600151611476565b610e0b610dd68760800151611476565b610e188760a00151611957565b610e258860c00151611888565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b60208310610e6a5780518252601f199092019160209182019101610e4b565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ec15780518252601f199092019160209182019101610ea2565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f185780518252601f199092019160209182019101610ef9565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f6f5780518252601f199092019160209182019101610f50565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fc65780518252601f199092019160209182019101610fa7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061101d5780518252601f199092019160209182019101610ffe565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110745780518252601f199092019160209182019101611055565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b81525060020197505050505050505060405160208183030381529060405290505b919050565b60006110cd613d52565b83518310611113576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806111208686611a31565b9150915061112c611a58565b60ff168160ff1614156111605760006111458784611a5d565b90935090508261115482611acb565b9450945050505061127e565b611168611b8b565b60ff168160ff16141561118a5761117f8683611b90565b93509350505061127e565b611192611c32565b60ff168160ff1614156111ba5760006111ab8784611a5d565b90935090508261115482611c37565b6111c2611d23565b60ff168160ff1614156111d95761117f8683611d28565b6111e1611dbd565b60ff168160ff161015801561120257506111f9611dc2565b60ff168160ff16105b1561123e576000611211611dbd565b820390506060611222828986611dc7565b90945090508361123182611e6f565b955095505050505061127e565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061128f613d8f565b611297613d8f565b600060e08201819052806112ab8787611a5d565b90965091506112ba8787611d28565b602085015295506112cb8787611d28565b604085015295506112dc87876110c3565b606085015295506112ed87876110c3565b608085015295506112fe8787611a5d565b60a0850152955061130f8787611a5d565b92845260c0840192909252509590945092505050565b61132d613d8f565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611396613d52565b6040805160608101825260ff8516815260208082018590528251600080825291810184526113e9938301916113e1565b6113ce613d52565b8152602001906001900390816113c65790505b509052611fb0565b90505b92915050565b6113fa613d52565b604080516001808252818301909252606091816020015b611419613d52565b815260200190600190039081611411579050509050828160008151811061143c57fe5b602002602001018190525061146d60405180606001604052808760ff16815260200186815260200183815250611fb0565b95945050505050565b6000611480611a58565b60ff16826080015160ff1614156114a357815161149c90612040565b90506110be565b6114ab611b8b565b60ff16826080015160ff1614156114c95761149c8260200151612064565b6114d1611d23565b60ff16826080015160ff1614156114f357815160a083015161149c9190612159565b6114fb611dbd565b60ff16826080015160ff16141561153457611514613d52565b61152183604001516121a7565b905061152c81611476565b9150506110be565b61153c61231c565b60ff16826080015160ff161415611555575080516110be565b61155d611c32565b60ff16826080015160ff1614156115a2575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110be565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6115f1826020015182612321565b82602001819052505050565b61160b826040015182612321565b82604001819052505050565b60008080613ded602085141561163c575060019250600091506007905061239f6116ec565b602185141561165a57506001925060009150600390506123da6116ec565b602285141561167857506002925060009150600890506124046116ec565b60238514156116975750600192506000915061025890506124a66116ec565b60248514156116b55750600392506000915060fa90506126926116ec565b60405162461bcd60e51b815260040180806020018281038252602c815260200180613ec3602c913960400191505060405180910390fd5b9193509193565b6116fb613d52565b604080516000808252602082019092526117359161172f565b61171c613d52565b8152602001906001900390816117145790505b50611e6f565b905090565b6000816001600160401b0316836060015160a00151101561177f575060e0820180516005016001600160401b03169052606082015160001960a09091015260016113ec565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006113ec565b60016101e090910152565b600160e090910152565b600060028260e0015114156117db575060006110be565b60018260e0015114156117f0575060016110be565b8151602083015161180090611476565b61180d8460400151611476565b61181a8560600151611476565b6118278660800151611476565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110be565b60408051818152606081810183529182919060208201818036833701905050905060005b60208110156119505760008482602081106118c357fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b6118e982612750565b8585600202815181106118f857fe5b60200101906001600160f81b031916908160001a90535061191881612750565b85856002026001018151811061192a57fe5b60200101906001600160f81b031916908160001a90535050600190920191506118ac9050565b5092915050565b6060818061197e5750506040805180820190915260018152600360fc1b60208201526110be565b8060005b811561199657600101600a82049150611982565b6060816001600160401b03811180156119ae57600080fd5b506040519080825280601f01601f1916602001820160405280156119d9576020820181803683370190505b50905060001982015b8415611a2757600a850660300160f81b82828060019003935081518110611a0557fe5b60200101906001600160f81b031916908160001a905350600a850494506119e2565b5095945050505050565b60008082600101848481518110611a4457fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611a75575060208385510310155b611ab2576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611ac08585612781565b915091509250929050565b611ad3613d52565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611b29565b611b16613d52565b815260200190600190039081611b0e5790505b50905281526020016000604051908082528060200260200182016040528015611b6c57816020015b611b59613d52565b815260200190600190039081611b515790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611b9a613d52565b82600080611ba6613d52565b6000611bb28986611a31565b9095509350611bc18986611a31565b9095509250600160ff85161415611be257611bdc89866110c3565b90955091505b611bec89866127da565b9095509050600160ff85161415611c175784611c098483856113f2565b96509650505050505061127e565b84611c22848361138e565b9650965050505050509250929050565b600c90565b611c3f613d52565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611c8657600080fd5b50604051908082528060200260200182016040528015611cc057816020015b611cad613d52565b815260200190600190039081611ca55790505b50905281526020016000604051908082528060200260200182016040528015611d0357816020015b611cf0613d52565b815260200190600190039081611ce85790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611d32613d52565b82845110158015611d47575060408385510310155b611d84576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611d9186866127da565b9094509150611da08685611a5d565b909450905083611db083836127eb565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611de657600080fd5b50604051908082528060200260200182016040528015611e2057816020015b611e0d613d52565b815260200190600190039081611e055790505b50905060005b8760ff168160ff161015611e6257611e3e87846110c3565b838360ff1681518110611e4d57fe5b60209081029190910101529250600101611e26565b5090969095509350505050565b611e77613d52565b611e8182516128aa565b611ed2576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f0957838181518110611eec57fe5b602002602001015160a00151820191508080600101915050611ed7565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611f5157600080fd5b50604051908082528060200260200182016040528015611f8b57816020015b611f78613d52565b815260200190600190039081611f705790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611fb8613d52565b6040518060c001604052806000815260200183815260200160006001600160401b0381118015611fe757600080fd5b5060405190808252806020026020018201604052801561202157816020015b61200e613d52565b8152602001906001900390816120065790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061207557fe5b6040820151516120d857612087611b8b565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506110be565b6120e0611b8b565b826000015161210684604001516000815181106120f957fe5b6020026020010151611476565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000612163611dbd565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6121af613d52565b6008825111156121fd576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561221657600080fd5b50604051908082528060200260200182016040528015612240578160200160208202803683370190505b508051909150600160005b828110156122a3576122628682815181106120f957fe5b84828151811061226e57fe5b60200260200101818152505085818151811061228657fe5b602002602001015160a0015182019150808060010191505061224b565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156122e55781810151838201526020016122cd565b505050509050019250505060405160208183030381529060405280519060200120905061231281836127eb565b9695505050505050565b606490565b612329613d52565b6040805160028082526060828101909352816020015b612347613d52565b81526020019060019003908161233f579050509050828160008151811061236a57fe5b6020026020010181905250838160018151811061238357fe5b6020026020010181905250612397816121a7565b949350505050565b6123a7613d52565b6123b58261010001516128b1565b90506123d68261010001516123d16123cc84611476565b611acb565b6128f3565b5050565b6123e2613d52565b6123f08261010001516128b1565b90506123d68261010001516123d18361291d565b61240c613d52565b61241a8261010001516128b1565b9050612424613d52565b6124328361010001516128b1565b905061243d8261294f565b158061244f575061244d8161294f565b155b156124645761245d8361295a565b50506124a3565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d4c906123d183611acb565b50565b6124ae613d52565b6124bc8261010001516128b1565b90506124c781612963565b15806124d95750806040015151600714155b156124ed576124e78261295a565b506124a3565b604081015160005b60078110156125375761251a82828151811061250d57fe5b602002602001015161294f565b61252f576125278461295a565b5050506124a3565b6001016124f5565b50612540613def565b60005b60198110156125a4576040600382160283600483048151811061256257fe5b602002602001015160000151901c6001600160401b0316826005838161258457fe5b0460058406600502016019811061259757fe5b6020020152600101612543565b506125ae81612970565b604080516007808252610100820190925291925060609190816020015b6125d3613d52565b8152602001906001900390816125cb57905050905060005b600781101561261d576125fe6000611acb565b82828151811061260a57fe5b60209081029190910101526001016125eb565b5060005b60198110156126785760406003821602836005830460058406600502016019811061264857fe5b6020020151901b82600483048151811061265e57fe5b602090810291909101015180519091179052600101612621565b5061268b8561010001516123d183611e6f565b5050505050565b61269a613d52565b6126a88261010001516128b1565b90506126b2613d52565b6126c08361010001516128b1565b90506126ca613d52565b6126d88461010001516128b1565b90506126e38361294f565b15806126f557506126f38261294f565b155b8061270657506127048161294f565b155b15612714576125278461295a565b825182518251610100870151604080518082019091528381526020810183905261274791906123d1906123cc908761355e565b50505050505050565b6000600a60f883901c1015612770578160f81c60300160f81b90506110be565b8160f81c60570160f81b90506110be565b600081602001835110156127d1576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611ac08585612781565b6127f3613d52565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612849565b612836613d52565b81526020019060019003908161282e5790505b5090528152602001600060405190808252806020026020018201604052801561288c57816020015b612879613d52565b8152602001906001900390816128715790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128b9613d52565b6128c1613d52565b82602001516001846000015103815181106128d857fe5b60209081029190910101518351600019018452915050919050565b80826020015183600001518151811061290857fe5b60209081029190910101525080516001019052565b612925613d52565b816080015160ff166002141561293f5761149c6003611acb565b6113ec826080015160ff16611acb565b6080015160ff161590565b6124a3816117af565b6080015160ff1660031490565b612978613def565b612980613e0e565b612988613e0e565b612990613def565b612998613e2c565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015613553576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612be157fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612c1c57fe5b0485600460200201516002026001600160401b03161785600260058110612c3f57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110612ea957fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b60200201518751188752600101612abc565b509495945050505050565b6000613568613e4b565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152613833613e4b565b60005b60088163ffffffff1610156138c05763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061386e57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff16604081106138a857fe5b63ffffffff9092166020929092020152600101613836565b5060106000805b60408363ffffffff161015613a1c57600384600f850363ffffffff16604081106138ed57fe5b602002015163ffffffff16901c61391e85600f860363ffffffff166040811061391257fe5b60200201516012613c7b565b61394286600f870363ffffffff166040811061393657fe5b60200201516007613c7b565b18189150600a846002850363ffffffff166040811061395d57fe5b602002015163ffffffff16901c61398e856002860363ffffffff166040811061398257fe5b60200201516013613c7b565b6139b2866002870363ffffffff16604081106139a657fe5b60200201516011613c7b565b1818905080846007850363ffffffff16604081106139cc57fe5b602002015183866010870363ffffffff16604081106139e757fe5b6020020151010101848463ffffffff1660408110613a0157fe5b63ffffffff90921660209290920201526001909201916138c7565b613a24613e6a565b600093505b60088463ffffffff161015613a75578360200260e00363ffffffff1688901c818563ffffffff1660088110613a5a57fe5b63ffffffff9092166020929092020152600190930192613a29565b60008060008096505b60408763ffffffff161015613bca576080840151613a9d906019613c7b565b6080850151613aad90600b613c7b565b6080860151613abd906006613c7b565b18189450878763ffffffff1660408110613ad357fe5b6020020151898863ffffffff1660408110613aea57fe5b6020020151608086015160a087015160c0880151613b09929190613c99565b878760076020020151010101019250613b2a84600060200201516016613c7b565b8451613b3790600d613c7b565b8551613b44906002613c7b565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613a7e565b600096505b60088763ffffffff161015613c1e578660200260e00363ffffffff168b901c848863ffffffff1660088110613c0057fe5b60200201805163ffffffff9201919091169052600190960195613bcf565b60008097505b60088863ffffffff161015613c6b578760200260e00363ffffffff16858963ffffffff1660088110613c5257fe5b602002015160019099019863ffffffff16901b17613c24565b9c9b505050505050505050505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613ce0613d8f565b8152602001613ced613d8f565b81526000602082018190526040820181905260608201819052608082015260a001613d16613e89565b8152602001613d23613e89565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c0016040528060008152602001613d6c613ea3565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101613dab613d52565b8152602001613db8613d52565b8152602001613dc5613d52565b8152602001613dd2613d52565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a264697066735822122011e053acf907c6816894c9c1796f3a5eaa587bf605a37ef17c1619e9a9d4b7a064736f6c634300060c0033"

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}
