// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"9d16dd04": "executeStep(address,uint256,bytes32[2],bytes,bytes)",
	"2ccebb7a": "executeStepDebug(address,uint256,bytes32[2],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b50614175806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ccebb7a14610046578063793deea3146101fd5780639d16dd04146103c4575b600080fd5b61011f600480360360c081101561005c57600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111600160201b831117156100c457600080fd5b919390929091602081019035600160201b8111156100e157600080fd5b8201836020820111156100f357600080fd5b803590602001918460018302840111600160201b8311171561011457600080fd5b5090925090506104ef565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610160578181015183820152602001610148565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102a16004803603602081101561021357600080fd5b810190602081018135600160201b81111561022d57600080fd5b82018360208201111561023f57600080fd5b803590602001918460018302840111600160201b8311171561026057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105b4945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156102ed5781810151838201526020016102d5565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561032c578181015183820152602001610314565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561036b578181015183820152602001610353565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103aa578181015183820152602001610392565b505050509050019850505050505050505060405180910390f35b61049d600480360360c08110156103da57600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561040f57600080fd5b82018360208201111561042157600080fd5b803590602001918460018302840111600160201b8311171561044257600080fd5b919390929091602081019035600160201b81111561045f57600080fd5b82018360208201111561047157600080fd5b803590602001918460018302840111600160201b8311171561049257600080fd5b5090925090506105f0565b60405180846001600160401b0316815260200183815260200182600460200280838360005b838110156104da5781810151838201526020016104c2565b50505050905001935050505060405180910390f35b6060806104fa613f54565b61057e898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e6106af565b905061058981610b63565b6105968160200151610f71565b92506105a58160400151610f71565b91505097509795505050505050565b6060806060806105c2613fea565b6105cb866112e5565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6000806105fb614012565b610603613f54565b6106878a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f6106af565b905061069281610b63565b61069b816113db565b935093509350509750975097945050505050565b6106b7613f54565b6000846000815181106106c657fe5b602001015160f81c60f81b60f81c90506000856001815181106106e557fe5b602001015160f81c60f81b60f81c905060008660028151811061070457fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561072e57600080fd5b5060405190808252806020026020018201604052801561076857816020015b610755614030565b81526020019060019003908161074d5790505b50905060608360040160ff166001600160401b038111801561078957600080fd5b506040519080825280602002602001820160405280156107c357816020015b6107b0614030565b8152602001906001900390816107a85790505b50905060005b8560ff168110156107ff576107de8b8561143e565b8483815181106107ea57fe5b602090810291909101015293506001016107c9565b5060005b8460ff16811015610839576108188b8561143e565b83838151811061082457fe5b60209081029190910101529350600101610803565b5061084261406d565b61084c8b85611600565b809250819550505060008b858151811061086257fe5b01602001516001959095019460f81c905061087b613f54565b6001600160a01b038b16815260208101839052610897836116b1565b6040820152606081018f90528d6000602002013560808201528d60016020908102919091013560a0830152600060c0830181905260408051808201825260ff8c811682528185018a905260e086019190915281518083019092528a8116825292810187905261010084015283821660018114610120850152918b1661014084015261016083018f90526101a083018e90526101c08301526101808201879052158061094557508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906109f25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109b757818101518382015260200161099f565b50505050905090810190601f1680156109e45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109fb614030565b60ff8316610a1c57610a158a836020015160000151611725565b9050610abc565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b81525090610a8c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50610ab98a8360200151600001518860018d0360ff1681518110610aac57fe5b6020026020010151611789565b90505b610ac58161180f565b60208301515260005b838a0360ff16811015610b0d57610b05878281518110610aea57fe5b6020026020010151846020015161197c90919063ffffffff16565b600101610ace565b5060005b8860ff16811015610b4e57610b46868281518110610b2b57fe5b6020026020010151846020015161199690919063ffffffff16565b600101610b11565b50909f9e505050505050505050505050505050565b60008060006140d8610b7c85610140015160ff166119b0565b93509350935093506000841180610b965750846101200151155b8015610ba7575060e0850151518410155b80610bce57508461012001518015610bbd575083155b8015610bce575060e0850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610c3d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50610100850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610cb35760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b5060e085015151841115610d7057610cd1610ccc611ac0565b61180f565b610ce286604001516020015161180f565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610d555760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50610d61856005611b07565b50610d6b85611b7c565b610e30565b61010085015151831115610e0b57610d89610ccc611ac0565b610d9a86604001516040015161180f565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610d555760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b610e158583611b07565b15610e2357610d6b85611b7c565b610e30858263ffffffff16565b846101c0015115610ed25760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201835281519101209086015160c001511415610e9557610e908560400151611b87565b610ed2565b60006101c0860152604085015160c081015190526101208501518015610eb9575083155b610ec75760e0850151600090525b610100850151600090525b60005b60e086015151811015610f1c57610f148660e00151602001518281518110610ef957fe5b6020026020010151876040015161197c90919063ffffffff16565b600101610ed5565b5060005b61010086015151811015610f6957610f61866101000151602001518281518110610f4657fe5b6020026020010151876040015161199690919063ffffffff16565b600101610f20565b505050505050565b6060610f808260000151611b92565b610f95610f90846020015161180f565b611b92565b610fa5610f90856040015161180f565b610fb5610f90866060015161180f565b610fc5610f90876080015161180f565b610fd28760a00151611c61565b610fdf8860c00151611b92565b610fef610f908a60e0015161180f565b60405160200180806709ac2c6d0d2dcca560c31b81525060080189805190602001908083835b602083106110345780518252601f199092019160209182019101611015565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528a516003909101928b0191508083835b6020831061108b5780518252601f19909201916020918201910161106c565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b602083106110e25780518252601f1990920191602091820191016110c3565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b602083106111395780518252601f19909201916020918201910161111a565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b602083106111905780518252601f199092019160209182019101611171565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106111e75780518252601f1990920191602091820191016111c8565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061123e5780518252601f19909201916020918201910161121f565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106112955780518252601f199092019160209182019101611276565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b8152506002019850505050505050505060405160208183030381529060405290505b919050565b6112ed613fea565b606061132c838460008151811061130057fe5b602001015160f81c60f81b8560018151811061131857fe5b01602001516001600160f81b031916611d3b565b90506060611359848560018151811061134157fe5b602001015160f81c60f81b8660028151811061131857fe5b90506060611386858660028151811061136e57fe5b602001015160f81c60f81b8760038151811061131857fe5b905060606113b3868760038151811061139b57fe5b602001015160f81c60f81b8860048151811061131857fe5b6040805160808101825295865260208601949094529284019190915250606082015292915050565b6000806113e6614012565b8360c00151846060015160405180608001604052806114088860200151611dd8565b815260200161141a8860400151611dd8565b8152602001876080015181526020018760a001518152509250925092509193909250565b6000611448614030565b8351831061148e576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061149b8686611eb2565b915091506114a7611ed9565b60ff168160ff1614156114db5760006114c08784611ede565b9093509050826114cf82611f4c565b945094505050506115f9565b6114e361200c565b60ff168160ff161415611505576114fa8683612011565b9350935050506115f9565b61150d6120b3565b60ff168160ff1614156115355760006115268784611ede565b9093509050826114cf826120b8565b61153d6121a4565b60ff168160ff161415611554576114fa86836121a9565b61155c61223e565b60ff168160ff161015801561157d5750611574612243565b60ff168160ff16105b156115b957600061158c61223e565b82039050606061159d828986612248565b9094509050836115ac826122f0565b95509550505050506115f9565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061160a61406d565b61161261406d565b60006101008201819052806116278787611ede565b909650915061163687876121a9565b6020850152955061164787876121a9565b60408501529550611658878761143e565b60608501529550611669878761143e565b6080850152955061167a8787611ede565b60a0850152955061168b8787611ede565b909650905061169a878761143e565b60e085015291835260c08301529590945092505050565b6116b961406d565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b61172d614030565b6040805160608101825260ff85168152602080820185905282516000808252918101845261178093830191611778565b611765614030565b81526020019060019003908161175d5790505b509052612431565b90505b92915050565b611791614030565b604080516001808252818301909252606091816020015b6117b0614030565b8152602001906001900390816117a857905050905082816000815181106117d357fe5b602002602001018190525061180460405180606001604052808760ff16815260200186815260200183815250612431565b9150505b9392505050565b6000611819611ed9565b60ff16826080015160ff16141561183c578151611835906124c1565b90506112e0565b61184461200c565b60ff16826080015160ff1614156118625761183582602001516124e5565b61186a6121a4565b60ff16826080015160ff16141561188c57815160a083015161183591906125da565b61189461223e565b60ff16826080015160ff1614156118cd576118ad614030565b6118ba8360400151612628565b90506118c58161180f565b9150506112e0565b6118d561279d565b60ff16826080015160ff1614156118ee575080516112e0565b6118f66120b3565b60ff16826080015160ff16141561193b575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206112e0565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b61198a8260200151826127a2565b82602001819052505050565b6119a48260400151826127a2565b82604001819052505050565b600080806140d860a18514156119d557506002925060009150600a90506128206105e9565b60a28514156119f357506002925060009150600a90506128d46105e9565b60a3851415611a1157506002925060009150600a90506129666105e9565b60a4851415611a2f57506003925060009150606490506129f86105e9565b60a5851415611a4d5750600392506000915060649050612ae56105e9565b60a6851415611a6b5750600392506000915060649050612bb66105e9565b6070851415611a895750600292506000915060649050612c756105e9565b60405162461bcd60e51b815260040180806020018281038252602c815260200180614114602c913960400191505060405180910390fd5b611ac8614030565b60408051600080825260208201909252611b0291611afc565b611ae9614030565b815260200190600190039081611ae15790505b506122f0565b905090565b6000816001600160401b0316836040015160a001511015611b4c575060c0820180516005016001600160401b03169052604082015160001960a0909101526001611783565b5060c0820180516001600160401b039083018116909152604083015160a001805191831690910390526000611783565b60016101c090910152565b600161010090910152565b60408051818152606081810183529182919060208201818036833701905050905060005b6020811015611c5a576000848260208110611bcd57fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b611bf382612e0f565b858560020281518110611c0257fe5b60200101906001600160f81b031916908160001a905350611c2281612e0f565b858560020260010181518110611c3457fe5b60200101906001600160f81b031916908160001a9053505060019092019150611bb69050565b5092915050565b60608180611c885750506040805180820190915260018152600360fc1b60208201526112e0565b8060005b8115611ca057600101600a82049150611c8c565b6060816001600160401b0381118015611cb857600080fd5b506040519080825280601f01601f191660200182016040528015611ce3576020820181803683370190505b50905060001982015b8415611d3157600a850660300160f81b82828060019003935081518110611d0f57fe5b60200101906001600160f81b031916908160001a905350600a85049450611cec565b5095945050505050565b606060f883811c9083901c81900360ff169082826001600160401b0381118015611d6457600080fd5b50604051908082528060200260200182016040528015611d8e578160200160208202803683370190505b50905060005b83811015611dcd57611dab88828501602002612e40565b60001b828281518110611dba57fe5b6020908102919091010152600101611d94565b509695505050505050565b600060028261010001511415611df0575060006112e0565b60018261010001511415611e06575060016112e0565b81516020830151611e169061180f565b611e23846040015161180f565b611e30856060015161180f565b611e3d866080015161180f565b8660a001518760c00151611e548960e0015161180f565b60405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528051906020012090506112e0565b60008082600101848481518110611ec557fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611ef6575060208385510310155b611f33576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611f418585612e80565b915091509250929050565b611f54614030565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611faa565b611f97614030565b815260200190600190039081611f8f5790505b50905281526020016000604051908082528060200260200182016040528015611fed57816020015b611fda614030565b815260200190600190039081611fd25790505b5081526000602082018190526040820152600160609091015292915050565b600190565b600061201b614030565b82600080612027614030565b60006120338986611eb2565b90955093506120428986611eb2565b9095509250600160ff851614156120635761205d898661143e565b90955091505b61206d8986612ed9565b9095509050600160ff85161415612098578461208a848385611789565b9650965050505050506115f9565b846120a38483611725565b9650965050505050509250929050565b600c90565b6120c0614030565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561210757600080fd5b5060405190808252806020026020018201604052801561214157816020015b61212e614030565b8152602001906001900390816121265790505b5090528152602001600060405190808252806020026020018201604052801561218457816020015b612171614030565b8152602001906001900390816121695790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b60006121b3614030565b828451101580156121c8575060408385510310155b612205576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6000806122128686612ed9565b90945091506122218685611ede565b9094509050836122318383612eea565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b038111801561226757600080fd5b506040519080825280602002602001820160405280156122a157816020015b61228e614030565b8152602001906001900390816122865790505b50905060005b8760ff168160ff1610156122e3576122bf878461143e565b838360ff16815181106122ce57fe5b602090810291909101015292506001016122a7565b5090969095509350505050565b6122f8614030565b6123028251612fa9565b612353576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b835181101561238a5783818151811061236d57fe5b602002602001015160a00151820191508080600101915050612358565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b03811180156123d257600080fd5b5060405190808252806020026020018201604052801561240c57816020015b6123f9614030565b8152602001906001900390816123f15790505b5090528152602081019490945260006040850152600360608501526080909301525090565b612439614030565b6040518060c001604052806000815260200183815260200160006001600160401b038111801561246857600080fd5b506040519080825280602002602001820160405280156124a257816020015b61248f614030565b8152602001906001900390816124875790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b60006002826040015151106124f657fe5b6040820151516125595761250861200c565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506112e0565b61256161200c565b8260000151612587846040015160008151811061257a57fe5b602002602001015161180f565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006125e461223e565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b612630614030565b60088251111561267e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561269757600080fd5b506040519080825280602002602001820160405280156126c1578160200160208202803683370190505b508051909150600160005b82811015612724576126e386828151811061257a57fe5b8482815181106126ef57fe5b60200260200101818152505085818151811061270757fe5b602002602001015160a001518201915080806001019150506126cc565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b8381101561276657818101518382015260200161274e565b50505050905001925050506040516020818303038152906040528051906020012090506127938183612eea565b9695505050505050565b606490565b6127aa614030565b6040805160028082526060828101909352816020015b6127c8614030565b8152602001906001900390816127c057905050905082816000815181106127eb57fe5b6020026020010181905250838160018151811061280457fe5b602002602001018190525061281881612628565b949350505050565b612828614030565b6128358260e00151612fb0565b905061283f614030565b61284c8360e00151612fb0565b905061285782612ff2565b1580612869575061286781613010565b155b1561287e576128778361301d565b50506128d1565b8151600160401b11612893576128778361301d565b60006128b5826060015184600001516128b0876101a001516112e5565b613026565b90506128cd8460e001516128c883611f4c565b613048565b5050505b50565b6128dc614030565b6128e98260e00151612fb0565b90506128f3614030565b6129008360e00151612fb0565b905061290b82612ff2565b158061291d575061291b81613010565b155b1561292b576128778361301d565b815167fffffffffffffff911612944576128778361301d565b60006128b582606001518460000151612961876101a001516112e5565b613072565b61296e614030565b61297b8260e00151612fb0565b9050612985614030565b6129928360e00151612fb0565b905061299d82612ff2565b15806129af57506129ad81613010565b155b156129bd576128778361301d565b815167ffffffffffffffe1116129d6576128778361301d565b60006128b5826060015184600001516129f3876101a001516112e5565b6131d1565b612a00614030565b612a0d8260e00151612fb0565b9050612a17614030565b612a248360e00151612fb0565b9050612a2e614030565b612a3b8460e00151612fb0565b9050612a4683612ff2565b1580612a585750612a5682613304565b155b80612a695750612a6781613010565b155b15612a7f57612a778461301d565b5050506128d1565b8251600160401b111580612a965750815161010011155b15612aa457612a778461301d565b6000612acb826060015185600001518560000151612ac6896101a001516112e5565b61330f565b9050612ade8560e001516128c8836120b8565b5050505050565b612aed614030565b612afa8260e00151612fb0565b9050612b04614030565b612b118360e00151612fb0565b9050612b1b614030565b612b288460e00151612fb0565b9050612b3383612ff2565b1580612b455750612b4382613304565b155b80612b565750612b5481613010565b155b15612b6457612a778461301d565b825167fffffffffffffff9111580612b8157508151600160401b11155b15612b8f57612a778461301d565b6000612acb826060015185600001518560000151612bb1896101a001516112e5565b613358565b612bbe614030565b612bcb8260e00151612fb0565b9050612bd5614030565b612be28360e00151612fb0565b9050612bec614030565b612bf98460e00151612fb0565b9050612c0483612ff2565b1580612c165750612c1482613304565b155b80612c275750612c2581613010565b155b15612c3557612a778461301d565b825167ffffffffffffffe111612c4e57612a778461301d565b6000612acb826060015185600001518560000151612c70896101a001516112e5565b6134a1565b612c7d614030565b612c8a8260e00151612fb0565b9050612c94614030565b612ca18360e00151612fb0565b9050612cac82612ff2565b1580612cbe5750612cbc81613010565b155b15612ccc576128778361301d565b81516127101080612cdc57508151155b15612cea576128778361301d565b826101600151518361018001511415612d6557612d1d81606001518360000151612d18866101a001516112e5565b613573565b15612d5c576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6128778361301d565b61018083015182516101608501516000612d808285856135c7565b905080612d8c8661180f565b14612dcb576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b509091016020908101919091206080850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b6000600a60f883901c1015612e2f578160f81c60300160f81b90506112e0565b8160f81c60570160f81b90506112e0565b600080805b6020811015612e7857600882901b91508481850181518110612e6357fe5b016020015160f81c9190911790600101612e45565b509392505050565b60008160200183511015612ed0576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611f418585612e80565b612ef2614030565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612f48565b612f35614030565b815260200190600190039081612f2d5790505b50905281526020016000604051908082528060200260200182016040528015612f8b57816020015b612f78614030565b815260200190600190039081612f705790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612fb8614030565b612fc0614030565b8260200151600184600001510381518110612fd757fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff1615801561178357505051600160401b1190565b6080015160ff16600c1490565b6128d181611b7c565b600061281861303e856020865b0485600001516135f9565b6020855b06613767565b80826020015183600001518151811061305d57fe5b60209081029190910101525080516001019052565b6040805160088082528183019092526000916060919060208201818036833701905050905060006130ac866020875b0486600001516135f9565b905060208086066008011061317f5760006130d3876020885b0460010187604001516135f9565b905060005b6018601f881660080301811015613127576130f9838260208a5b0601613767565b60f81b84828151811061310857fe5b60200101906001600160f81b031916908160001a9053506001016130d8565b506018601f8716600803015b60088110156131785761314a826020898401613042565b60f81b84828151811061315957fe5b60200101906001600160f81b031916908160001a905350600101613133565b50506131c8565b60005b60088110156131c65761319882826020896130f2565b60f81b8382815181106131a757fe5b60200101906001600160f81b031916908160001a905350600101613182565b505b61279382613774565b604080516020808252818301909252600091606091906020820181803683370190505090506000613204866020876130a1565b90506020808606602001106132bd576000613221876020886130c5565b905060005b601f871660200381101561326f57613241838260208a6130f2565b60f81b84828151811061325057fe5b60200101906001600160f81b031916908160001a905350600101613226565b50601f86166008035b60208110156131785761328f826020898401613042565b60f81b84828151811061329e57fe5b60200101906001600160f81b031916908160001a905350600101613278565b60005b60208110156131c6576132d682826020896130f2565b60f81b8382815181106132e557fe5b60200101906001600160f81b031916908160001a9053506001016132c0565b6080015160ff161590565b60008061331e86602087613033565b905060006133308260208806876137aa565b9050600061334c886020890484886000015189602001516137e9565b98975050505050505050565b600060606133658461388f565b90506000613375876020886130a1565b9050602080870660080111156134575760005b6018601f8816600803018110156133d0576133c6826020898401068584601801815181106133b257fe5b01602001516001600160f81b0319166138f9565b9150600101613388565b506133ea876020885b0483876000015188602001516137e9565b965060006133fa886020896130c5565b90506018601f8816600803015b6008811015613433576134298260208a8401068684601801815181106133b257fe5b9150600101613407565b5061344f886020890460010183886040015189606001516137e9565b975050613496565b60005b60088110156134865761347c828260208a06018584601801815181106133b257fe5b915060010161345a565b50613493876020886133d9565b96505b509495945050505050565b600060606134ae8461388f565b905060006134be876020886130a1565b9050602080870660200111156135505760005b601f8716602003811015613500576134f6828260208a5b06018584815181106133b257fe5b91506001016134d1565b5061350d876020886133d9565b9650600061351d886020896130c5565b9050601f87166020035b6020811015613433576135468260208a8401068684815181106133b257fe5b9150600101613527565b60005b602081101561348657613569828260208a6134e8565b9150600101613553565b60008061358285602086613033565b9050601f84165b60208110156135b45761359c8282613767565b156135ac57600092505050611808565b600101613589565b5061180485602086048560000151613915565b6000806135df85856135d886613a91565b6001613abc565b508551909150611804906135f4607b84613b90565b613b90565b60008151600014156136625761360f60006124c1565b841461365a576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000611808565b60006136818360008151811061367457fe5b60200260200101516124c1565b905060015b83518110156136eb5784600116600114156136bf576136b88482815181106136aa57fe5b602002602001015183613b90565b91506136df565b6136dc828583815181106136cf57fe5b6020026020010151613b90565b91505b600194851c9401613686565b50848114613738576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315613748575060009050611808565b8260008151811061375557fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015611c5a57600882901b915083818151811061379557fe5b016020015160f81c9190911790600101613779565b600060606137b78561388f565b90508260f81b8185815181106137c957fe5b60200101906001600160f81b031916908160001a90535061180481613774565b60008151600314613841576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b612793868686868660008151811061385557fe5b602002602001015160001c8760018151811061386d57fe5b60200260200101518860028151811061388257fe5b6020026020010151613bbc565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b6020811015612e78578260f81b8282601f03815181106138d357fe5b60200101906001600160f81b031916908160001a90535060089290921c916001016138b7565b600060606139068561388f565b9050828185815181106137c957fe5b600081516000141561397e5761392b60006124c1565b8414613976576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001611808565b60006139908360008151811061367457fe5b90506001606061399e613e36565b905060015b8551811015613a325786600116600114156139dc576139d58682815181106139c757fe5b602002602001015185613b90565b9350613a26565b6139ec848783815181106136cf57fe5b9350828015613a235750816001820381518110613a0557fe5b6020026020010151868281518110613a1957fe5b6020026020010151145b92505b600196871c96016139a3565b50868314613a7f576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8515611d315760019350505050611808565b600060018211613aa3575060016112e0565b613ab260026001840104613a91565b60020290506112e0565b60008060208411613b105785518510613ae457613ad960006124c1565b600191509150613b87565b6000613af8613af38888613ed7565b6124c1565b905080613b0560006124c1565b909350149050613b87565b600080613b29886002880489016002895b046000613abc565b91509150808015613b375750845b15613b5657613b4b88886002890488613abc565b935093505050613b87565b600080613b668a8a60028b613b21565b91509150613b748285613b90565b818015613b7e5750835b95509550505050505b94509492505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080613bc8876124c1565b9050613bd58989886135f9565b506060613be0613e36565b905060018751036001901b8910613ca45787613c00578992505050613e2b565b6000613c0b8a613f2e565b88519091505b60018203811015613c3957613c2f8c8460018403815181106136cf57fe5b9b50600101613c11565b5060015b60018203811015613c8f578a60011660011415613c6d57613c668360018303815181106139c757fe5b9350613c83565b613c80848460018403815181106136cf57fe5b93505b60019a8b1c9a01613c3d565b50613c9a8b84613b90565b9350505050613e2b565b60015b8751811015613d245760008a600116600114613cc35783613cd8565b888281518110613ccf57fe5b60200260200101515b905060008b600116600114613d0057898381518110613cf357fe5b6020026020010151613d02565b845b9050613d0e8282613b90565b60019c8d1c9c909550929092019150613ca79050565b508715613d3357509050613e2b565b600086613d41575084613db6565b818781518110613d4d57fe5b6020026020010151851415613da9576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b613db38686613b90565b90505b80875b60018a5103811015613ddf57613dd5828583815181106136cf57fe5b9150600101613db9565b50838114613e25576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b60408051818152610820810182526060918291906020820161080080368337019050509050613e6560006124c1565b81600081518110613e7257fe5b602090810291909101015260015b6040811015613ed157613eb2826001830381518110613e9b57fe5b60200260200101518360018403815181106136cf57fe5b828281518110613ebe57fe5b6020908102919091010152600101613e80565b50905090565b600080805b6020811015612e7857600882901b91506000818501865111613eff576000613f1d565b8582860181518110613f0d57fe5b01602001516001600160f81b0319165b60f81c929092179150600101613edc565b600081613f3d575060016112e0565b613f4a600183901c613f2e565b60010190506112e0565b604051806101e0016040528060006001600160a01b03168152602001613f7861406d565b8152602001613f8561406d565b81526000602082018190526040820181905260608201819052608082015260a001613fae6140da565b8152602001613fbb6140da565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b6040518060c001604052806000815260200161404a6140f4565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161012081019091526000815260208101614089614030565b8152602001614096614030565b81526020016140a3614030565b81526020016140b0614030565b815260006020820181905260408201526060016140cb614030565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a264697066735822122095bfc16c19d8f0de1392b2aec3796fe5b394901b065dfc1371467f9f97c05a0f64736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		TotalMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.TotalMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStepDebug(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStepDebug", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
