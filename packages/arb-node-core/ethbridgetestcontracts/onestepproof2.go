// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"3a06aeec": "executeStep(bytes32[3],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b50613a1f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a06aeec1461003b578063793deea314610149575b600080fd5b610100600480360360a081101561005157600080fd5b81018160808101606082013564010000000081111561006f57600080fd5b82018360208201111561008157600080fd5b803590602001918460018302840111640100000000831117156100a357600080fd5b9193909290916020810190356401000000008111156100c157600080fd5b8201836020820111156100d357600080fd5b803590602001918460018302840111640100000000831117156100f557600080fd5b509092509050610312565b60405167ffffffffffffffff83168152602081018260a080838360005b8381101561013557818101518382015260200161011d565b505050509050019250505060405180910390f35b6101ef6004803603602081101561015f57600080fd5b81019060208101813564010000000081111561017a57600080fd5b82018360208201111561018c57600080fd5b803590602001918460018302840111640100000000831117156101ae57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103c4945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561023b578181015183820152602001610223565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561027a578181015183820152602001610262565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102b95781810151838201526020016102a1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156102f85781810151838201526020016102e0565b505050509050019850505050505050505060405180910390f35b600061031c6137ef565b61032461380d565b604080516020601f890181900481028201810183528882526103a1928b3592828d013592918d0135918c908c908190840183828082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061040092505050565b90506103ac816108d0565b6103b581610c2f565b92509250509550959350505050565b6060806060806103d2613892565b6103db86610c92565b80516020820151604083015160609093015191975095509093509150505b9193509193565b61040861380d565b60008360008151811061041757fe5b602001015160f81c60f81b60f81c905060008460018151811061043657fe5b016020015160f81c9050600260606004840160ff1667ffffffffffffffff8111801561046157600080fd5b5060405190808252806020026020018201604052801561049b57816020015b6104886138ba565b8152602001906001900390816104805790505b50905060608360040160ff1667ffffffffffffffff811180156104bd57600080fd5b506040519080825280602002602001820160405280156104f757816020015b6104e46138ba565b8152602001906001900390816104dc5790505b50905060005b8560ff16811015610533576105128985610d8a565b84838151811061051e57fe5b602090810291909101015293506001016104fd565b5060005b8460ff1681101561056d5761054c8985610d8a565b83838151811061055857fe5b60209081029190910101529350600101610537565b506105766138f7565b6105808985610f4c565b909450905061058d61380d565b604051806101a001604052808381526020016105a884610ffd565b81526020018e81526020018d81526020018c8152602001600067ffffffffffffffff16815260200160405180604001604052808a60ff16815260200187815250815260200160405180604001604052808960ff1681526020018681525081526020018b878151811061061657fe5b602001015160f81c60f81b60f81c60ff16600114151581526020018b876001018151811061064057fe5b0160209081015160f81c825281018c90526002870160408201526060018a90528a519091506000908b908790811061067457fe5b602001015160f81c60f81b60f81c905060008b876001018151811061069557fe5b01602001516002979097019660f81c905060ff821615806106b957508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072b578181015183820152602001610713565b50505050905090810190601f1680156107585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061076f6138ba565b60ff831661078c57835151610785908390611071565b905061082c565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906107fc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072b578181015183820152602001610713565b50610829828560000151600001518960018e0360ff168151811061081c57fe5b60200260200101516110d5565b90505b6108358161115b565b84515260005b838b0360ff1681101561087a5761087288828151811061085757fe5b602002602001015186600001516112c890919063ffffffff16565b60010161083b565b5060005b8960ff168110156108bb576108b387828151811061089857fe5b602002602001015186600001516112e290919063ffffffff16565b60010161087e565b50929f9e505050505050505050505050505050565b60008060006139626108e985610120015160ff166112fc565b93509350935093506108fb858361140c565b156109095750505050610c2c565b60c0850151518411156109bd57610926610921611478565b61115b565b61093786602001516020015161115b565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b815250906109aa5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072b578181015183820152602001610713565b506109b4856114bf565b50505050610c2c565b60e085015151831115610a57576109d5610921611478565b6109e686602001516040015161115b565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b815250906109aa5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072b578181015183820152602001610713565b6000841180610a695750846101000151155b8015610a79575060c08501515184145b80610aa057508461010001518015610a8f575083155b8015610aa0575060c0850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610b0f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072b578181015183820152602001610713565b5060e0850151516040805180820190915260088152674155585f4d414e5960c01b6020820152908414610b835760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072b578181015183820152602001610713565b50610b91858263ffffffff16565b60005b60c086015151811015610bdb57610bd38660c00151602001518281518110610bb857fe5b602002602001015187602001516112c890919063ffffffff16565b600101610b94565b5060005b60e086015151811015610c2657610c1e8660e00151602001518281518110610c0357fe5b602002602001015187602001516112e290919063ffffffff16565b600101610bdf565b50505050505b50565b6000610c396137ef565b8260a001516040518060a00160405280610c568660000151611528565b8152602001610c688660200151611528565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b610c9a613892565b6060610cd98384600081518110610cad57fe5b602001015160f81c60f81b85600181518110610cc557fe5b01602001516001600160f81b031916611602565b90506060610d068485600181518110610cee57fe5b602001015160f81c60f81b86600281518110610cc557fe5b90506060610d338586600281518110610d1b57fe5b602001015160f81c60f81b87600381518110610cc557fe5b90506060610d608687600381518110610d4857fe5b602001015160f81c60f81b88600481518110610cc557fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b6000610d946138ba565b83518310610dda576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610de786866116a0565b91509150610df36116c7565b60ff168160ff161415610e27576000610e0c87846116cc565b909350905082610e1b8261173a565b94509450505050610f45565b610e2f6117fa565b60ff168160ff161415610e5157610e4686836117ff565b935093505050610f45565b610e596118a1565b60ff168160ff161415610e81576000610e7287846116cc565b909350905082610e1b826118a6565b610e89611993565b60ff168160ff161415610ea057610e468683611998565b610ea8611a2d565b60ff168160ff1610158015610ec95750610ec0611a32565b60ff168160ff16105b15610f05576000610ed8611a2d565b820390506060610ee9828986611a37565b909450905083610ef882611ae0565b9550955050505050610f45565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610f566138f7565b610f5e6138f7565b6000610100820181905280610f7387876116cc565b9096509150610f828787611998565b60208501529550610f938787611998565b60408501529550610fa48787610d8a565b60608501529550610fb58787610d8a565b60808501529550610fc687876116cc565b60a08501529550610fd787876116cc565b9096509050610fe68787610d8a565b60e085015291835260c08301529590945092505050565b6110056138f7565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b6110796138ba565b6040805160608101825260ff8516815260208082018590528251600080825291810184526110cc938301916110c4565b6110b16138ba565b8152602001906001900390816110a95790505b509052611c22565b90505b92915050565b6110dd6138ba565b604080516001808252818301909252606091816020015b6110fc6138ba565b8152602001906001900390816110f4579050509050828160008151811061111f57fe5b602002602001018190525061115060405180606001604052808760ff16815260200186815260200183815250611c22565b9150505b9392505050565b60006111656116c7565b60ff16826080015160ff16141561118857815161118190611cb3565b9050610d85565b6111906117fa565b60ff16826080015160ff1614156111ae576111818260200151611cd7565b6111b6611993565b60ff16826080015160ff1614156111d857815160a08301516111819190611dcc565b6111e0611a2d565b60ff16826080015160ff161415611219576111f96138ba565b6112068360400151611e1a565b90506112118161115b565b915050610d85565b611221611f90565b60ff16826080015160ff16141561123a57508051610d85565b6112426118a1565b60ff16826080015160ff161415611287575060608082015160408051607b60208083019190915281830193909352815180820383018152930190528151910120610d85565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6112d6826020015182611f95565b82602001819052505050565b6112f0826040015182611f95565b82604001819052505050565b6000808061396260a185141561132157506002925060009150600a90506120136103f9565b60a285141561133f57506002925060009150600a90506120f86103f9565b60a385141561135d57506002925060009150600a90506121be6103f9565b60a485141561137b57506003925060009150606490506122846103f9565b60a585141561139957506003925060009150606490506123936103f9565b60a68514156113b757506003925060009150606490506124866103f9565b60708514156113d557506002925060009150606490506125796103f9565b60405162461bcd60e51b815260040180806020018281038252602c8152602001806139be602c913960400191505060405180910390fd5b60a0808301805167ffffffffffffffff90840181169091526020840151909101516000918316111561145757602083015160001960a09091015261144f836114bf565b5060016110cf565b50602082015160a001805167ffffffffffffffff83169003905260006110cf565b6114806138ba565b604080516000808252602082019092526114ba916114b4565b6114a16138ba565b8152602001906001900390816114995790505b50611ae0565b905090565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c00151141561151b576115168160200151612704565b610c2c565b6020015160c08101519052565b60006002826101000151141561154057506000610d85565b6001826101000151141561155657506001610d85565b815160208301516115669061115b565b611573846040015161115b565b611580856060015161115b565b61158d866080015161115b565b8660a001518760c001516115a48960e0015161115b565b6040516020018089815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200198505050505050505050604051602081830303815290604052805190602001209050610d85565b606060f883811c9083901c81900360ff1690828267ffffffffffffffff8111801561162c57600080fd5b50604051908082528060200260200182016040528015611656578160200160208202803683370190505b50905060005b83811015611695576116738882850160200261270f565b60001b82828151811061168257fe5b602090810291909101015260010161165c565b509695505050505050565b600080826001018484815181106116b357fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156116e4575060208385510310155b611721576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6020830161172f858561274f565b915091509250929050565b6117426138ba565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611798565b6117856138ba565b81526020019060019003908161177d5790505b509052815260200160006040519080825280602002602001820160405280156117db57816020015b6117c86138ba565b8152602001906001900390816117c05790505b5081526000602082018190526040820152600160609091015292915050565b600190565b60006118096138ba565b826000806118156138ba565b600061182189866116a0565b909550935061183089866116a0565b9095509250600160ff851614156118515761184b8986610d8a565b90955091505b61185b89866127a8565b9095509050600160ff8516141561188657846118788483856110d5565b965096505050505050610f45565b846118918483611071565b9650965050505050509250929050565b600c90565b6118ae6138ba565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff811180156118f657600080fd5b5060405190808252806020026020018201604052801561193057816020015b61191d6138ba565b8152602001906001900390816119155790505b5090528152602001600060405190808252806020026020018201604052801561197357816020015b6119606138ba565b8152602001906001900390816119585790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b60006119a26138ba565b828451101580156119b7575060408385510310155b6119f4576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611a0186866127a8565b9094509150611a1086856116cc565b909450905083611a2083836127b9565b9350935050509250929050565b600390565b600d90565b60006060828160ff871667ffffffffffffffff81118015611a5757600080fd5b50604051908082528060200260200182016040528015611a9157816020015b611a7e6138ba565b815260200190600190039081611a765790505b50905060005b8760ff168160ff161015611ad357611aaf8784610d8a565b838360ff1681518110611abe57fe5b60209081029190910101529250600101611a97565b5090969095509350505050565b611ae86138ba565b611af28251612878565b611b43576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611b7a57838181518110611b5d57fe5b602002602001015160a00151820191508080600101915050611b48565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff81118015611bc357600080fd5b50604051908082528060200260200182016040528015611bfd57816020015b611bea6138ba565b815260200190600190039081611be25790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611c2a6138ba565b6040518060c0016040528060008152602001838152602001600067ffffffffffffffff81118015611c5a57600080fd5b50604051908082528060200260200182016040528015611c9457816020015b611c816138ba565b815260200190600190039081611c795790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611ce857fe5b604082015151611d4b57611cfa6117fa565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b81526001018281526020019350505050604051602081830303815290604052805190602001209050610d85565b611d536117fa565b8260000151611d798460400151600081518110611d6c57fe5b602002602001015161115b565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611dd6611a2d565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611e226138ba565b600882511115611e70576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825167ffffffffffffffff81118015611e8a57600080fd5b50604051908082528060200260200182016040528015611eb4578160200160208202803683370190505b508051909150600160005b82811015611f1757611ed6868281518110611d6c57fe5b848281518110611ee257fe5b602002602001018181525050858181518110611efa57fe5b602002602001015160a00151820191508080600101915050611ebf565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b83811015611f59578181015183820152602001611f41565b5050505090500192505050604051602081830303815290604052805190602001209050611f8681836127b9565b9695505050505050565b606490565b611f9d6138ba565b6040805160028082526060828101909352816020015b611fbb6138ba565b815260200190600190039081611fb35790505090508281600081518110611fde57fe5b60200260200101819052508381600181518110611ff757fe5b602002602001018190525061200b81611e1a565b949350505050565b61201b6138ba565b6120288260c0015161287f565b90506120326138ba565b61203f8360c0015161287f565b905061204a826128c1565b158061205c575061205a816128df565b155b156120715761206a836128ec565b5050610c2c565b8151600160401b116120b8576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b60006120da826060015184600001516120d5876101800151610c92565b612909565b90506120f28460c001516120ed8361173a565b61292b565b50505050565b6121006138ba565b61210d8260c0015161287f565b90506121176138ba565b6121248360c0015161287f565b905061212f826128c1565b1580612141575061213f816128df565b155b1561214f5761206a836128ec565b600160401b82600001516007011061219c576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b60006120da826060015184600001516121b9876101800151610c92565b612955565b6121c66138ba565b6121d38260c0015161287f565b90506121dd6138ba565b6121ea8360c0015161287f565b90506121f5826128c1565b15806122075750612205816128df565b155b156122155761206a836128ec565b600160401b8260000151601f0110612262576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b60006120da8260600151846000015161227f876101800151610c92565b612ab4565b61228c6138ba565b6122998260c0015161287f565b90506122a36138ba565b6122b08360c0015161287f565b90506122ba6138ba565b6122c78460c0015161287f565b90506122d2836128c1565b15806122e457506122e282612be7565b155b806122f557506122f3816128df565b155b1561230b57612303846128ec565b505050610c2c565b8251600160401b11612352576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b6000612379826060015185600001518560000151612374896101800151610c92565b612bf2565b905061238c8560c001516120ed836118a6565b5050505050565b61239b6138ba565b6123a88260c0015161287f565b90506123b26138ba565b6123bf8360c0015161287f565b90506123c96138ba565b6123d68460c0015161287f565b90506123e1836128c1565b15806123f357506123f182612be7565b155b806124045750612402816128df565b155b1561241257612303846128ec565b600160401b83600001516007011061245f576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b6000612379826060015185600001518560000151612481896101800151610c92565b612c3b565b61248e6138ba565b61249b8260c0015161287f565b90506124a56138ba565b6124b28360c0015161287f565b90506124bc6138ba565b6124c98460c0015161287f565b90506124d4836128c1565b15806124e657506124e482612be7565b155b806124f757506124f5816128df565b155b1561250557612303846128ec565b600160401b8360000151601f0110612552576040805162461bcd60e51b815260206004820152601b602482015260008051602061399e833981519152604482015290519081900360640190fd5b6000612379826060015185600001518560000151612574896101800151610c92565b612d83565b6125816138ba565b61258e8260c0015161287f565b90506125986138ba565b6125a58360c0015161287f565b90506125b0826128c1565b15806125c257506125c0816128df565b155b156125d05761206a836128ec565b815161271010156125e45761206a836128ec565b8261014001515183610160015110156126975761016083015182516101408501516000612612828585612e54565b90508061261e8661115b565b1461265d576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5060209201820120606085810180516040805180870192909252818101949094528351808203850181529201909252805192019190912090525b6126b7816060015183600001516126b2866101800151610c92565b612e72565b156126f6576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6126ff836128ec565b505050565b600161010090910152565b600080805b602081101561274757600882901b9150848185018151811061273257fe5b016020015160f81c9190911790600101612714565b509392505050565b6000816020018351101561279f576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6000806020830161172f858561274f565b6127c16138ba565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612817565b6128046138ba565b8152602001906001900390816127fc5790505b5090528152602001600060405190808252806020026020018201604052801561285a57816020015b6128476138ba565b81526020019060019003908161283f5790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128876138ba565b61288f6138ba565b82602001516001846000015103815181106128a657fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff161580156110cf57505051600160401b1190565b6080015160ff16600c1490565b6128f5816114bf565b60c081015160009081905260e09091015152565b600061200b612921856020865b048560000151612ec6565b6020855b06613034565b80826020015183600001518151811061294057fe5b60209081029190910101525080516001019052565b60408051600880825281830190925260009160609190602082018180368337019050509050600061298f866020875b048660000151612ec6565b9050602080860660080110612a625760006129b6876020885b046001018760400151612ec6565b905060005b6018601f881660080301811015612a0a576129dc838260208a5b0601613034565b60f81b8482815181106129eb57fe5b60200101906001600160f81b031916908160001a9053506001016129bb565b506018601f8716600803015b6008811015612a5b57612a2d826020898401612925565b60f81b848281518110612a3c57fe5b60200101906001600160f81b031916908160001a905350600101612a16565b5050612aab565b60005b6008811015612aa957612a7b82826020896129d5565b60f81b838281518110612a8a57fe5b60200101906001600160f81b031916908160001a905350600101612a65565b505b611f8682613041565b604080516020808252818301909252600091606091906020820181803683370190505090506000612ae786602087612984565b9050602080860660200110612ba0576000612b04876020886129a8565b905060005b601f8716602003811015612b5257612b24838260208a6129d5565b60f81b848281518110612b3357fe5b60200101906001600160f81b031916908160001a905350600101612b09565b50601f86166008035b6020811015612a5b57612b72826020898401612925565b60f81b848281518110612b8157fe5b60200101906001600160f81b031916908160001a905350600101612b5b565b60005b6020811015612aa957612bb982826020896129d5565b60f81b838281518110612bc857fe5b60200101906001600160f81b031916908160001a905350600101612ba3565b6080015160ff161590565b600080612c0186602087612916565b90506000612c1382602088068761307e565b90506000612c2f886020890484886000015189602001516130bd565b98975050505050505050565b60006060612c4884613163565b90506000612c5887602088612984565b9050602080870660080110612d395760005b6018601f881660080301811015612cb257612ca882602089840106858460180181518110612c9457fe5b01602001516001600160f81b0319166131cd565b9150600101612c6a565b50612ccc876020885b0483876000015188602001516130bd565b96506000612cdc886020896129a8565b90506018601f8816600803015b6008811015612d1557612d0b8260208a840106868460180181518110612c9457fe5b9150600101612ce9565b50612d31886020890460010183886040015189606001516130bd565b975050612d78565b60005b6008811015612d6857612d5e828260208a0601858460180181518110612c9457fe5b9150600101612d3c565b50612d7587602088612cbb565b96505b509495945050505050565b60006060612d9084613163565b90506000612da087602088612984565b9050602080870660200110612e315760005b601f8716602003811015612de157612dd7828260208a5b0601858481518110612c9457fe5b9150600101612db2565b50612dee87602088612cbb565b96506000612dfe886020896129a8565b9050601f87166020035b6020811015612d1557612e278260208a840106868481518110612c9457fe5b9150600101612e08565b60005b6020811015612d6857612e4a828260208a612dc9565b9150600101612e34565b825160009061200b90612e6d607b8188888860016131e9565b613290565b600080612e8185602086612916565b9050601f84165b6020811015612eb357612e9b8282613034565b15612eab57600092505050611154565b600101612e88565b50611150856020860485600001516132bc565b6000815160001415612f2f57612edc6000611cb3565b8414612f27576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000611154565b6000612f4e83600081518110612f4157fe5b6020026020010151611cb3565b905060015b8351811015612fb8578460011660011415612f8c57612f85848281518110612f7757fe5b602002602001015183613290565b9150612fac565b612fa982858381518110612f9c57fe5b6020026020010151613290565b91505b600194851c9401612f53565b50848114613005576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315613015575060009050611154565b8260008151811061302257fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b835181101561307757600882901b915083818151811061306257fe5b016020015160f81c9190911790600101613046565b5092915050565b6000606061308b85613163565b90508260f81b81858151811061309d57fe5b60200101906001600160f81b031916908160001a90535061115081613041565b60008151600314613115576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b611f86868686868660008151811061312957fe5b602002602001015160001c8760018151811061314157fe5b60200260200101518860028151811061315657fe5b6020026020010151613442565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b6020811015612747578260f81b8282601f03815181106131a757fe5b60200101906001600160f81b031916908160001a90535060089290921c9160010161318b565b600060606131da85613163565b90508281858151811061309d57fe5b60006020831161321e578451841061320c576132056000611cb3565b905061200b565b61320561321986866136d1565b611cb3565b6000613236866002860487016002875b0460006131e9565b90506132426000611cb3565b8114801561324d5750825b1561326a5761326286866002870460016131e9565b91505061200b565b6000613279878760028861322e565b90506132858183613290565b979650505050505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000815160001415613325576132d26000611cb3565b841461331d576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001611154565b600061333783600081518110612f4157fe5b905060016060613345613728565b905060015b85518110156133d95786600116600114156133835761337c86828151811061336e57fe5b602002602001015185613290565b93506133cd565b61339384878381518110612f9c57fe5b93508280156133ca57508160018203815181106133ac57fe5b60200260200101518682815181106133c057fe5b6020026020010151145b92505b600196871c960161334a565b50868314613426576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b85156134385760019350505050611154565b5095945050505050565b60008061344e87611cb3565b905061345b898988612ec6565b506060613466613728565b905060018751036001901b891061352a5787613486578992505050613285565b60006134918a6137c9565b88519091505b600182038110156134bf576134b58c846001840381518110612f9c57fe5b9b50600101613497565b5060015b60018203811015613515578a600116600114156134f3576134ec83600183038151811061336e57fe5b9350613509565b61350684846001840381518110612f9c57fe5b93505b60019a8b1c9a016134c3565b506135208b84613290565b9350505050613285565b60015b87518110156135aa5760008a600116600114613549578361355e565b88828151811061355557fe5b60200260200101515b905060008b6001166001146135865789838151811061357957fe5b6020026020010151613588565b845b90506135948282613290565b60019c8d1c9c90955092909201915061352d9050565b5087156135b957509050613285565b8086815181106135c557fe5b6020026020010151841415806135d9575085155b61362a576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b600086156136415761363c8686613290565b613643565b855b9050861561365357600019909601955b80875b60018a510381101561367c5761367282858381518110612f9c57fe5b9150600101613656565b508381146136c2576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b509a9950505050505050505050565b600080805b602081101561274757600882901b915060008185018651116136f9576000613717565b858286018151811061370757fe5b01602001516001600160f81b0319165b60f81c9290921791506001016136d6565b604080518181526108208101825260609182919060208201610800803683370190505090506137576000611cb3565b8160008151811061376457fe5b602090810291909101015260015b60408110156137c3576137a482600183038151811061378d57fe5b6020026020010151836001840381518110612f9c57fe5b8282815181106137b057fe5b6020908102919091010152600101613772565b50905090565b6000816137d857506001610d85565b6137e5600183901c6137c9565b6001019050610d85565b6040518060a001604052806005906020820280368337509192915050565b604051806101a001604052806138216138f7565b815260200161382e6138f7565b81526000602082018190526040820181905260608201819052608082015260a001613857613964565b8152602001613864613964565b8152602001600015158152602001600060ff1681526020016060815260200160008152602001606081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c00160405280600081526020016138d461397e565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610120810190915260008152602081016139136138ba565b81526020016139206138ba565b815260200161392d6138ba565b815260200161393a6138ba565b815260006020820181905260408201526060016139556138ba565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe62756666657220696e646578206d7573742062652036342d626974000000000075736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220493c5de6740d6c220549953f1e3f904bcf2b0937828dbbaaa517b5355061934964736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, _machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", _machineFields, proof, bproof)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(_machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, _machineFields, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(_machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, _machineFields, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
