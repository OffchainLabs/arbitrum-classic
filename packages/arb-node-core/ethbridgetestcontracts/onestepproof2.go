// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"47dda1d6": "executeStep(address[2],uint256,bytes32[2],bytes,bytes)",
	"eba67f6e": "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b506140c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806347dda1d614610046578063793deea314610164578063eba67f6e1461032b575b600080fd5b610112600480360360e081101561005c57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111600160201b831117156100b757600080fd5b919390929091602081019035600160201b8111156100d457600080fd5b8201836020820111156100e657600080fd5b803590602001918460018302840111600160201b8311171561010757600080fd5b5090925090506104d5565b60405180846001600160401b0316815260200183815260200182600460200280838360005b8381101561014f578181015183820152602001610137565b50505050905001935050505060405180910390f35b6102086004803603602081101561017a57600080fd5b810190602081018135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460018302840111600160201b831117156101c757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610594945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561025457818101518382015260200161023c565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561029357818101518382015260200161027b565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102d25781810151838201526020016102ba565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103115781810151838201526020016102f9565b505050509050019850505050505050505060405180910390f35b6103f7600480360360e081101561034157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561036957600080fd5b82018360208201111561037b57600080fd5b803590602001918460018302840111600160201b8311171561039c57600080fd5b919390929091602081019035600160201b8111156103b957600080fd5b8201836020820111156103cb57600080fd5b803590602001918460018302840111600160201b831117156103ec57600080fd5b5090925090506105d0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610438578181015183820152602001610420565b50505050905090810190601f1680156104655780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610498578181015183820152602001610480565b50505050905090810190601f1680156104c55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000806104e0613eb4565b6104e8613ed2565b61056c8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610695565b905061057781610b44565b61058081610f5a565b935093509350509750975097945050505050565b6060806060806105a2613f64565b6105ab86610fbd565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6060806105db613ed2565b61065f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610695565b905061066a81610b44565b61067781604001516110b5565b925061068681606001516110b5565b91505097509795505050505050565b61069d613ed2565b6000846000815181106106ac57fe5b602001015160f81c60f81b60f81c90506000856001815181106106cb57fe5b602001015160f81c60f81b60f81c90506000866002815181106106ea57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561071457600080fd5b5060405190808252806020026020018201604052801561074e57816020015b61073b613f8c565b8152602001906001900390816107335790505b50905060608360040160ff166001600160401b038111801561076f57600080fd5b506040519080825280602002602001820160405280156107a957816020015b610796613f8c565b81526020019060019003908161078e5790505b50905060005b8560ff168110156107e5576107c48b856113be565b8483815181106107d057fe5b602090810291909101015293506001016107af565b5060005b8460ff1681101561081f576107fe8b856113be565b83838151811061080a57fe5b602090810291909101015293506001016107e9565b50610828613fc9565b6108328b85611580565b809250819550505060008b858151811061084857fe5b01602001516001959095019460f81c9050610861613ed2565b6001600160a01b038b351680825260208201526040810183905261088483611620565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061092657508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906109d35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610998578181015183820152602001610980565b50505050905090810190601f1680156109c55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109dc613f8c565b60ff83166109fd576109f68a836040015160000151611689565b9050610a9d565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b81525090610a6d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610998578181015183820152602001610980565b50610a9a8a8360400151600001518860018d0360ff1681518110610a8d57fe5b60200260200101516116ed565b90505b610aa681611773565b60408301515260005b838a0360ff16811015610aee57610ae6878281518110610acb57fe5b602002602001015184604001516118e090919063ffffffff16565b600101610aaf565b5060005b8860ff16811015610b2f57610b27868281518110610b0c57fe5b602002602001015184604001516118fa90919063ffffffff16565b600101610af2565b50909f9e505050505050505050505050505050565b6000806000614027610b5d85610160015160ff16611914565b93509350935093506000841180610b775750846101400151155b8015610b895750610100850151518410155b80610bb157508461014001518015610b9f575083155b8015610bb15750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610c205760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610998578181015183820152602001610980565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610c965760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610998578181015183820152602001610980565b5061010085015151841115610d5457610cb5610cb0611a24565b611773565b610cc6866060015160200151611773565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610d395760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610998578181015183820152602001610980565b50610d45856005611a6b565b50610d4f85611ae0565b610e14565b61012085015151831115610def57610d6d610cb0611a24565b610d7e866060015160400151611773565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610d395760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610998578181015183820152602001610980565b610df98583611a6b565b15610e0757610d4f85611ae0565b610e14858263ffffffff16565b846101e0015115610eb95760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610e7b57610e768560600151611aeb565b610eb9565b60006101e0860152606085015160c081015190526101408501518015610e9f575083155b610eae57610100850151600090525b610120850151600090525b60005b61010086015151811015610f0557610efd866101000151602001518281518110610ee257fe5b602002602001015187606001516118e090919063ffffffff16565b600101610ebc565b5060005b61012086015151811015610f5257610f4a866101200151602001518281518110610f2f57fe5b602002602001015187606001516118fa90919063ffffffff16565b600101610f09565b505050505050565b600080610f65613eb4565b8360e0015184608001516040518060800160405280610f878860400151611af5565b8152602001610f998860600151611af5565b81526020018760a0015181526020018760c001518152509250925092509193909250565b610fc5613f64565b60606110048384600081518110610fd857fe5b602001015160f81c60f81b85600181518110610ff057fe5b01602001516001600160f81b031916611bb9565b90506060611031848560018151811061101957fe5b602001015160f81c60f81b86600281518110610ff057fe5b9050606061105e858660028151811061104657fe5b602001015160f81c60f81b87600381518110610ff057fe5b9050606061108b868760038151811061107357fe5b602001015160f81c60f81b88600481518110610ff057fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b60606110c48260000151611c56565b6110d96110d48460200151611773565b611c56565b6110e96110d48560400151611773565b6110f96110d48660600151611773565b6111096110d48760800151611773565b6111168760a00151611d25565b6111238860c00151611c56565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b602083106111685780518252601f199092019160209182019101611149565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b602083106111bf5780518252601f1990920191602091820191016111a0565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b602083106112165780518252601f1990920191602091820191016111f7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b6020831061126d5780518252601f19909201916020918201910161124e565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106112c45780518252601f1990920191602091820191016112a5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061131b5780518252601f1990920191602091820191016112fc565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106113725780518252601f199092019160209182019101611353565b5181516020939093036101000a600019018019909116921691909117905261148560f11b92019182525060408051808303601d19018152600290920190529a9950505050505050505050565b60006113c8613f8c565b8351831061140e576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061141b8686611dff565b91509150611427611e26565b60ff168160ff16141561145b5760006114408784611e2b565b90935090508261144f82611e99565b94509450505050611579565b611463611f59565b60ff168160ff1614156114855761147a8683611f5e565b935093505050611579565b61148d612000565b60ff168160ff1614156114b55760006114a68784611e2b565b90935090508261144f82612005565b6114bd6120f1565b60ff168160ff1614156114d45761147a86836120f6565b6114dc61218b565b60ff168160ff16101580156114fd57506114f4612190565b60ff168160ff16105b1561153957600061150c61218b565b82039050606061151d828986612195565b90945090508361152c8261223d565b9550955050505050611579565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061158a613fc9565b611592613fc9565b600060e08201819052806115a68787611e2b565b90965091506115b587876120f6565b602085015295506115c687876120f6565b604085015295506115d787876113be565b606085015295506115e887876113be565b608085015295506115f98787611e2b565b60a0850152955061160a8787611e2b565b92845260c0840192909252509590945092505050565b611628613fc9565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611691613f8c565b6040805160608101825260ff8516815260208082018590528251600080825291810184526116e4938301916116dc565b6116c9613f8c565b8152602001906001900390816116c15790505b50905261237e565b90505b92915050565b6116f5613f8c565b604080516001808252818301909252606091816020015b611714613f8c565b81526020019060019003908161170c579050509050828160008151811061173757fe5b602002602001018190525061176860405180606001604052808760ff1681526020018681526020018381525061237e565b9150505b9392505050565b600061177d611e26565b60ff16826080015160ff1614156117a05781516117999061240e565b90506110b0565b6117a8611f59565b60ff16826080015160ff1614156117c6576117998260200151612432565b6117ce6120f1565b60ff16826080015160ff1614156117f057815160a08301516117999190612527565b6117f861218b565b60ff16826080015160ff16141561183157611811613f8c565b61181e8360400151612575565b905061182981611773565b9150506110b0565b6118396126ea565b60ff16826080015160ff161415611852575080516110b0565b61185a612000565b60ff16826080015160ff16141561189f575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110b0565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6118ee8260200151826126ef565b82602001819052505050565b6119088260400151826126ef565b82604001819052505050565b6000808061402760a185141561193957506002925060009150600a905061276d6105c9565b60a285141561195757506002925060009150600a90506128246105c9565b60a385141561197557506002925060009150600a90506128b86105c9565b60a4851415611993575060039250600091506064905061294c6105c9565b60a58514156119b15750600392506000915060649050612a3d6105c9565b60a68514156119cf5750600392506000915060649050612b116105c9565b60708514156119ed5750600292506000915060649050612bd36105c9565b60405162461bcd60e51b815260040180806020018281038252602c815260200180614063602c913960400191505060405180910390fd5b611a2c613f8c565b60408051600080825260208201909252611a6691611a60565b611a4d613f8c565b815260200190600190039081611a455790505b5061223d565b905090565b6000816001600160401b0316836060015160a001511015611ab0575060e0820180516005016001600160401b03169052606082015160001960a09091015260016116e7565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006116e7565b60016101e090910152565b600160e090910152565b600060028260e001511415611b0c575060006110b0565b60018260e001511415611b21575060016110b0565b81516020830151611b3190611773565b611b3e8460400151611773565b611b4b8560600151611773565b611b588660800151611773565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110b0565b606060f883811c9083901c81900360ff169082826001600160401b0381118015611be257600080fd5b50604051908082528060200260200182016040528015611c0c578160200160208202803683370190505b50905060005b83811015611c4b57611c2988828501602002612d6f565b60001b828281518110611c3857fe5b6020908102919091010152600101611c12565b509695505050505050565b60408051818152606081810183529182919060208201818036833701905050905060005b6020811015611d1e576000848260208110611c9157fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b611cb782612daf565b858560020281518110611cc657fe5b60200101906001600160f81b031916908160001a905350611ce681612daf565b858560020260010181518110611cf857fe5b60200101906001600160f81b031916908160001a9053505060019092019150611c7a9050565b5092915050565b60608180611d4c5750506040805180820190915260018152600360fc1b60208201526110b0565b8060005b8115611d6457600101600a82049150611d50565b6060816001600160401b0381118015611d7c57600080fd5b506040519080825280601f01601f191660200182016040528015611da7576020820181803683370190505b50905060001982015b8415611df557600a850660300160f81b82828060019003935081518110611dd357fe5b60200101906001600160f81b031916908160001a905350600a85049450611db0565b5095945050505050565b60008082600101848481518110611e1257fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611e43575060208385510310155b611e80576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611e8e8585612de0565b915091509250929050565b611ea1613f8c565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611ef7565b611ee4613f8c565b815260200190600190039081611edc5790505b50905281526020016000604051908082528060200260200182016040528015611f3a57816020015b611f27613f8c565b815260200190600190039081611f1f5790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611f68613f8c565b82600080611f74613f8c565b6000611f808986611dff565b9095509350611f8f8986611dff565b9095509250600160ff85161415611fb057611faa89866113be565b90955091505b611fba8986612e39565b9095509050600160ff85161415611fe55784611fd78483856116ed565b965096505050505050611579565b84611ff08483611689565b9650965050505050509250929050565b600c90565b61200d613f8c565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561205457600080fd5b5060405190808252806020026020018201604052801561208e57816020015b61207b613f8c565b8152602001906001900390816120735790505b509052815260200160006040519080825280602002602001820160405280156120d157816020015b6120be613f8c565b8152602001906001900390816120b65790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000612100613f8c565b82845110158015612115575060408385510310155b612152576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60008061215f8686612e39565b909450915061216e8685611e2b565b90945090508361217e8383612e4a565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b03811180156121b457600080fd5b506040519080825280602002602001820160405280156121ee57816020015b6121db613f8c565b8152602001906001900390816121d35790505b50905060005b8760ff168160ff1610156122305761220c87846113be565b838360ff168151811061221b57fe5b602090810291909101015292506001016121f4565b5090969095509350505050565b612245613f8c565b61224f8251612f09565b6122a0576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156122d7578381815181106122ba57fe5b602002602001015160a001518201915080806001019150506122a5565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561231f57600080fd5b5060405190808252806020026020018201604052801561235957816020015b612346613f8c565b81526020019060019003908161233e5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b612386613f8c565b6040518060c001604052806000815260200183815260200160006001600160401b03811180156123b557600080fd5b506040519080825280602002602001820160405280156123ef57816020015b6123dc613f8c565b8152602001906001900390816123d45790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061244357fe5b6040820151516124a657612455611f59565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506110b0565b6124ae611f59565b82600001516124d484604001516000815181106124c757fe5b6020026020010151611773565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061253161218b565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b61257d613f8c565b6008825111156125cb576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b03811180156125e457600080fd5b5060405190808252806020026020018201604052801561260e578160200160208202803683370190505b508051909150600160005b82811015612671576126308682815181106124c757fe5b84828151811061263c57fe5b60200260200101818152505085818151811061265457fe5b602002602001015160a00151820191508080600101915050612619565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156126b357818101518382015260200161269b565b50505050905001925050506040516020818303038152906040528051906020012090506126e08183612e4a565b9695505050505050565b606490565b6126f7613f8c565b6040805160028082526060828101909352816020015b612715613f8c565b81526020019060019003908161270d579050509050828160008151811061273857fe5b6020026020010181905250838160018151811061275157fe5b602002602001018190525061276581612575565b949350505050565b612775613f8c565b612783826101000151612f10565b905061278d613f8c565b61279b836101000151612f10565b90506127a682612f52565b15806127b857506127b681612f70565b155b156127cd576127c683612f7d565b5050612821565b8151600160401b116127e2576127c683612f7d565b6000612804826060015184600001516127ff876101c00151610fbd565b612f86565b905061281d84610100015161281883611e99565b612fa8565b5050505b50565b61282c613f8c565b61283a826101000151612f10565b9050612844613f8c565b612852836101000151612f10565b905061285d82612f52565b158061286f575061286d81612f70565b155b1561287d576127c683612f7d565b815167fffffffffffffff911612896576127c683612f7d565b6000612804826060015184600001516128b3876101c00151610fbd565b612fd2565b6128c0613f8c565b6128ce826101000151612f10565b90506128d8613f8c565b6128e6836101000151612f10565b90506128f182612f52565b1580612903575061290181612f70565b155b15612911576127c683612f7d565b815167ffffffffffffffe11161292a576127c683612f7d565b600061280482606001518460000151612947876101c00151610fbd565b613131565b612954613f8c565b612962826101000151612f10565b905061296c613f8c565b61297a836101000151612f10565b9050612984613f8c565b612992846101000151612f10565b905061299d83612f52565b15806129af57506129ad82613264565b155b806129c057506129be81612f70565b155b156129d6576129ce84612f7d565b505050612821565b8251600160401b1115806129ed5750815161010011155b156129fb576129ce84612f7d565b6000612a22826060015185600001518560000151612a1d896101c00151610fbd565b61326f565b9050612a3685610100015161281883612005565b5050505050565b612a45613f8c565b612a53826101000151612f10565b9050612a5d613f8c565b612a6b836101000151612f10565b9050612a75613f8c565b612a83846101000151612f10565b9050612a8e83612f52565b1580612aa05750612a9e82613264565b155b80612ab15750612aaf81612f70565b155b15612abf576129ce84612f7d565b825167fffffffffffffff9111580612adc57508151600160401b11155b15612aea576129ce84612f7d565b6000612a22826060015185600001518560000151612b0c896101c00151610fbd565b6132b8565b612b19613f8c565b612b27826101000151612f10565b9050612b31613f8c565b612b3f836101000151612f10565b9050612b49613f8c565b612b57846101000151612f10565b9050612b6283612f52565b1580612b745750612b7282613264565b155b80612b855750612b8381612f70565b155b15612b93576129ce84612f7d565b825167ffffffffffffffe111612bac576129ce84612f7d565b6000612a22826060015185600001518560000151612bce896101c00151610fbd565b613401565b612bdb613f8c565b612be9826101000151612f10565b9050612bf3613f8c565b612c01836101000151612f10565b9050612c0c82612f52565b1580612c1e5750612c1c81612f70565b155b15612c2c576127c683612f7d565b81516127101080612c3c57508151155b15612c4a576127c683612f7d565b82610180015151836101a001511415612cc557612c7d81606001518360000151612c78866101c00151610fbd565b6134d3565b15612cbc576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6127c683612f7d565b6101a083015182516101808501516000612ce0828585613527565b905080612cec86611773565b14612d2b576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5090910160209081019190912060a0850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b600080805b6020811015612da757600882901b91508481850181518110612d9257fe5b016020015160f81c9190911790600101612d74565b509392505050565b6000600a60f883901c1015612dcf578160f81c60300160f81b90506110b0565b8160f81c60570160f81b90506110b0565b60008160200183511015612e30576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611e8e8585612de0565b612e52613f8c565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612ea8565b612e95613f8c565b815260200190600190039081612e8d5790505b50905281526020016000604051908082528060200260200182016040528015612eeb57816020015b612ed8613f8c565b815260200190600190039081612ed05790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612f18613f8c565b612f20613f8c565b8260200151600184600001510381518110612f3757fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff161580156116e757505051600160401b1190565b6080015160ff16600c1490565b61282181611ae0565b6000612765612f9e856020865b048560000151613559565b6020855b066136c7565b808260200151836000015181518110612fbd57fe5b60209081029190910101525080516001019052565b60408051600880825281830190925260009160609190602082018180368337019050509050600061300c866020875b048660000151613559565b90506020808606600801106130df576000613033876020885b046001018760400151613559565b905060005b6018601f88166008030181101561308757613059838260208a5b06016136c7565b60f81b84828151811061306857fe5b60200101906001600160f81b031916908160001a905350600101613038565b506018601f8716600803015b60088110156130d8576130aa826020898401612fa2565b60f81b8482815181106130b957fe5b60200101906001600160f81b031916908160001a905350600101613093565b5050613128565b60005b6008811015613126576130f88282602089613052565b60f81b83828151811061310757fe5b60200101906001600160f81b031916908160001a9053506001016130e2565b505b6126e0826136d4565b60408051602080825281830190925260009160609190602082018180368337019050509050600061316486602087613001565b905060208086066020011061321d57600061318187602088613025565b905060005b601f87166020038110156131cf576131a1838260208a613052565b60f81b8482815181106131b057fe5b60200101906001600160f81b031916908160001a905350600101613186565b50601f86166008035b60208110156130d8576131ef826020898401612fa2565b60f81b8482815181106131fe57fe5b60200101906001600160f81b031916908160001a9053506001016131d8565b60005b6020811015613126576132368282602089613052565b60f81b83828151811061324557fe5b60200101906001600160f81b031916908160001a905350600101613220565b6080015160ff161590565b60008061327e86602087612f93565b9050600061329082602088068761370a565b905060006132ac88602089048488600001518960200151613749565b98975050505050505050565b600060606132c5846137ef565b905060006132d587602088613001565b9050602080870660080111156133b75760005b6018601f881660080301811015613330576133268260208984010685846018018151811061331257fe5b01602001516001600160f81b031916613859565b91506001016132e8565b5061334a876020885b048387600001518860200151613749565b9650600061335a88602089613025565b90506018601f8816600803015b6008811015613393576133898260208a84010686846018018151811061331257fe5b9150600101613367565b506133af88602089046001018388604001518960600151613749565b9750506133f6565b60005b60088110156133e6576133dc828260208a060185846018018151811061331257fe5b91506001016133ba565b506133f387602088613339565b96505b509495945050505050565b6000606061340e846137ef565b9050600061341e87602088613001565b9050602080870660200111156134b05760005b601f871660200381101561346057613456828260208a5b060185848151811061331257fe5b9150600101613431565b5061346d87602088613339565b9650600061347d88602089613025565b9050601f87166020035b6020811015613393576134a68260208a84010686848151811061331257fe5b9150600101613487565b60005b60208110156133e6576134c9828260208a613448565b91506001016134b3565b6000806134e285602086612f93565b9050601f84165b6020811015613514576134fc82826136c7565b1561350c5760009250505061176c565b6001016134e9565b5061176885602086048560000151613875565b60008061353f8585613538866139f1565b6001613a1c565b50855190915061176890613554607b84613af0565b613af0565b60008151600014156135c25761356f600061240e565b84146135ba576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b50600061176c565b60006135e1836000815181106135d457fe5b602002602001015161240e565b905060015b835181101561364b57846001166001141561361f5761361884828151811061360a57fe5b602002602001015183613af0565b915061363f565b61363c8285838151811061362f57fe5b6020026020010151613af0565b91505b600194851c94016135e6565b50848114613698576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b83156136a857506000905061176c565b826000815181106136b557fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015611d1e57600882901b91508381815181106136f557fe5b016020015160f81c91909117906001016136d9565b60006060613717856137ef565b90508260f81b81858151811061372957fe5b60200101906001600160f81b031916908160001a905350611768816136d4565b600081516003146137a1576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b6126e086868686866000815181106137b557fe5b602002602001015160001c876001815181106137cd57fe5b6020026020010151886002815181106137e257fe5b6020026020010151613b1c565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b6020811015612da7578260f81b8282601f038151811061383357fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101613817565b60006060613866856137ef565b90508281858151811061372957fe5b60008151600014156138de5761388b600061240e565b84146138d6576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b50600161176c565b60006138f0836000815181106135d457fe5b9050600160606138fe613d96565b905060015b855181101561399257866001166001141561393c5761393586828151811061392757fe5b602002602001015185613af0565b9350613986565b61394c8487838151811061362f57fe5b9350828015613983575081600182038151811061396557fe5b602002602001015186828151811061397957fe5b6020026020010151145b92505b600196871c9601613903565b508683146139df576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8515611df5576001935050505061176c565b600060018211613a03575060016110b0565b613a12600260018401046139f1565b60020290506110b0565b60008060208411613a705785518510613a4457613a39600061240e565b600191509150613ae7565b6000613a58613a538888613e37565b61240e565b905080613a65600061240e565b909350149050613ae7565b600080613a89886002880489016002895b046000613a1c565b91509150808015613a975750845b15613ab657613aab88886002890488613a1c565b935093505050613ae7565b600080613ac68a8a60028b613a81565b91509150613ad48285613af0565b818015613ade5750835b95509550505050505b94509492505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080613b288761240e565b9050613b35898988613559565b506060613b40613d96565b905060018751036001901b8910613c045787613b60578992505050613d8b565b6000613b6b8a613e8e565b88519091505b60018203811015613b9957613b8f8c84600184038151811061362f57fe5b9b50600101613b71565b5060015b60018203811015613bef578a60011660011415613bcd57613bc683600183038151811061392757fe5b9350613be3565b613be08484600184038151811061362f57fe5b93505b60019a8b1c9a01613b9d565b50613bfa8b84613af0565b9350505050613d8b565b60015b8751811015613c845760008a600116600114613c235783613c38565b888281518110613c2f57fe5b60200260200101515b905060008b600116600114613c6057898381518110613c5357fe5b6020026020010151613c62565b845b9050613c6e8282613af0565b60019c8d1c9c909550929092019150613c079050565b508715613c9357509050613d8b565b600086613ca1575084613d16565b818781518110613cad57fe5b6020026020010151851415613d09576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b613d138686613af0565b90505b80875b60018a5103811015613d3f57613d358285838151811061362f57fe5b9150600101613d19565b50838114613d85576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b60408051818152610820810182526060918291906020820161080080368337019050509050613dc5600061240e565b81600081518110613dd257fe5b602090810291909101015260015b6040811015613e3157613e12826001830381518110613dfb57fe5b602002602001015183600184038151811061362f57fe5b828281518110613e1e57fe5b6020908102919091010152600101613de0565b50905090565b600080805b6020811015612da757600882901b91506000818501865111613e5f576000613e7d565b8582860181518110613e6d57fe5b01602001516001600160f81b0319165b60f81c929092179150600101613e3c565b600081613e9d575060016110b0565b613eaa600183901c613e8e565b60010190506110b0565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613ef2613fc9565b8152602001613eff613fc9565b81526000602082018190526040820181905260608201819052608082015260a001613f28614029565b8152602001613f35614029565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c0016040528060008152602001613fa6614043565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101613fe5613f8c565b8152602001613ff2613f8c565b8152602001613fff613f8c565b815260200161400c613f8c565b81526000602082018190526040820181905260609091015290565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220a5dadd2cf0ba718fb200661e9a0f148a4a22c3be1fc973e6c652ed400efbbd3964736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
