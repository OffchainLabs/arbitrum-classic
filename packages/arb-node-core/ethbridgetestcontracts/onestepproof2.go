// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"47dda1d6": "executeStep(address[2],uint256,bytes32[2],bytes,bytes)",
	"eba67f6e": "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b506140cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806347dda1d614610046578063793deea314610164578063eba67f6e1461032b575b600080fd5b610112600480360360e081101561005c57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111600160201b831117156100b757600080fd5b919390929091602081019035600160201b8111156100d457600080fd5b8201836020820111156100e657600080fd5b803590602001918460018302840111600160201b8311171561010757600080fd5b5090925090506104d5565b60405180846001600160401b0316815260200183815260200182600460200280838360005b8381101561014f578181015183820152602001610137565b50505050905001935050505060405180910390f35b6102086004803603602081101561017a57600080fd5b810190602081018135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460018302840111600160201b831117156101c757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610594945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561025457818101518382015260200161023c565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561029357818101518382015260200161027b565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102d25781810151838201526020016102ba565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103115781810151838201526020016102f9565b505050509050019850505050505050505060405180910390f35b6103f7600480360360e081101561034157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561036957600080fd5b82018360208201111561037b57600080fd5b803590602001918460018302840111600160201b8311171561039c57600080fd5b919390929091602081019035600160201b8111156103b957600080fd5b8201836020820111156103cb57600080fd5b803590602001918460018302840111600160201b831117156103ec57600080fd5b5090925090506105d0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610438578181015183820152602001610420565b50505050905090810190601f1680156104655780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610498578181015183820152602001610480565b50505050905090810190601f1680156104c55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000806104e0613ebf565b6104e8613edd565b61056c8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610695565b905061057781610b4c565b61058081610f62565b935093509350509750975097945050505050565b6060806060806105a2613f6f565b6105ab86610fc5565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6060806105db613edd565b61065f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610695565b905061066a81610b4c565b61067781604001516110bd565b925061068681606001516110bd565b91505097509795505050505050565b61069d613edd565b6000846000815181106106ac57fe5b602001015160f81c60f81b60f81c90506000856001815181106106cb57fe5b602001015160f81c60f81b60f81c90506000866002815181106106ea57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561071457600080fd5b5060405190808252806020026020018201604052801561074e57816020015b61073b613f97565b8152602001906001900390816107335790505b50905060608360040160ff166001600160401b038111801561076f57600080fd5b506040519080825280602002602001820160405280156107a957816020015b610796613f97565b81526020019060019003908161078e5790505b50905060005b8560ff168110156107e5576107c48b856113c6565b8483815181106107d057fe5b602090810291909101015293506001016107af565b5060005b8460ff1681101561081f576107fe8b856113c6565b83838151811061080a57fe5b602090810291909101015293506001016107e9565b50610828613fd4565b6108328b85611588565b809250819550505060008b858151811061084857fe5b01602001516001959095019460f81c9050610861613edd565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261088c83611628565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061092e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906109db5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109a0578181015183820152602001610988565b50505050905090810190601f1680156109cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109e4613f97565b60ff8316610a05576109fe8a836040015160000151611691565b9050610aa5565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b81525090610a755760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610aa28a8360400151600001518860018d0360ff1681518110610a9557fe5b60200260200101516116f5565b90505b610aae8161177b565b60408301515260005b838a0360ff16811015610af657610aee878281518110610ad357fe5b602002602001015184604001516118e890919063ffffffff16565b600101610ab7565b5060005b8860ff16811015610b3757610b2f868281518110610b1457fe5b6020026020010151846040015161190290919063ffffffff16565b600101610afa565b50909f9e505050505050505050505050505050565b6000806000614032610b6585610160015160ff1661191c565b93509350935093506000841180610b7f5750846101400151155b8015610b915750610100850151518410155b80610bb957508461014001518015610ba7575083155b8015610bb95750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610c285760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610c9e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b5061010085015151841115610d5c57610cbd610cb8611a2c565b61177b565b610cce86606001516020015161177b565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610d4d856005611a73565b50610d5785611ae8565b610e1c565b61012085015151831115610df757610d75610cb8611a2c565b610d8686606001516040015161177b565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b610e018583611a73565b15610e0f57610d5785611ae8565b610e1c858263ffffffff16565b846101e0015115610ec15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610e8357610e7e8560600151611af3565b610ec1565b60006101e0860152606085015160c081015190526101408501518015610ea7575083155b610eb657610100850151600090525b610120850151600090525b60005b61010086015151811015610f0d57610f05866101000151602001518281518110610eea57fe5b602002602001015187606001516118e890919063ffffffff16565b600101610ec4565b5060005b61012086015151811015610f5a57610f52866101200151602001518281518110610f3757fe5b6020026020010151876060015161190290919063ffffffff16565b600101610f11565b505050505050565b600080610f6d613ebf565b8360e0015184608001516040518060800160405280610f8f8860400151611afd565b8152602001610fa18860600151611afd565b81526020018760a0015181526020018760c001518152509250925092509193909250565b610fcd613f6f565b606061100c8384600081518110610fe057fe5b602001015160f81c60f81b85600181518110610ff857fe5b01602001516001600160f81b031916611bc1565b90506060611039848560018151811061102157fe5b602001015160f81c60f81b86600281518110610ff857fe5b90506060611066858660028151811061104e57fe5b602001015160f81c60f81b87600381518110610ff857fe5b90506060611093868760038151811061107b57fe5b602001015160f81c60f81b88600481518110610ff857fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b60606110cc8260000151611c5e565b6110e16110dc846020015161177b565b611c5e565b6110f16110dc856040015161177b565b6111016110dc866060015161177b565b6111116110dc876080015161177b565b61111e8760a00151611d2d565b61112b8860c00151611c5e565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b602083106111705780518252601f199092019160209182019101611151565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b602083106111c75780518252601f1990920191602091820191016111a8565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b6020831061121e5780518252601f1990920191602091820191016111ff565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b602083106112755780518252601f199092019160209182019101611256565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106112cc5780518252601f1990920191602091820191016112ad565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b602083106113235780518252601f199092019160209182019101611304565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b6020831061137a5780518252601f19909201916020918201910161135b565b5181516020939093036101000a600019018019909116921691909117905261148560f11b92019182525060408051808303601d19018152600290920190529a9950505050505050505050565b60006113d0613f97565b83518310611416576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806114238686611e07565b9150915061142f611e2e565b60ff168160ff1614156114635760006114488784611e33565b90935090508261145782611ea1565b94509450505050611581565b61146b611f61565b60ff168160ff16141561148d576114828683611f66565b935093505050611581565b611495612008565b60ff168160ff1614156114bd5760006114ae8784611e33565b9093509050826114578261200d565b6114c56120f9565b60ff168160ff1614156114dc5761148286836120fe565b6114e4612193565b60ff168160ff161015801561150557506114fc612198565b60ff168160ff16105b15611541576000611514612193565b82039050606061152582898661219d565b90945090508361153482612245565b9550955050505050611581565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611592613fd4565b61159a613fd4565b600060e08201819052806115ae8787611e33565b90965091506115bd87876120fe565b602085015295506115ce87876120fe565b604085015295506115df87876113c6565b606085015295506115f087876113c6565b608085015295506116018787611e33565b60a085015295506116128787611e33565b92845260c0840192909252509590945092505050565b611630613fd4565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611699613f97565b6040805160608101825260ff8516815260208082018590528251600080825291810184526116ec938301916116e4565b6116d1613f97565b8152602001906001900390816116c95790505b509052612386565b90505b92915050565b6116fd613f97565b604080516001808252818301909252606091816020015b61171c613f97565b815260200190600190039081611714579050509050828160008151811061173f57fe5b602002602001018190525061177060405180606001604052808760ff16815260200186815260200183815250612386565b9150505b9392505050565b6000611785611e2e565b60ff16826080015160ff1614156117a85781516117a190612416565b90506110b8565b6117b0611f61565b60ff16826080015160ff1614156117ce576117a1826020015161243a565b6117d66120f9565b60ff16826080015160ff1614156117f857815160a08301516117a1919061252f565b611800612193565b60ff16826080015160ff16141561183957611819613f97565b611826836040015161257d565b90506118318161177b565b9150506110b8565b6118416126f2565b60ff16826080015160ff16141561185a575080516110b8565b611862612008565b60ff16826080015160ff1614156118a7575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110b8565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6118f68260200151826126f7565b82602001819052505050565b6119108260400151826126f7565b82604001819052505050565b6000808061403260a185141561194157506002925060009150600a90506127756105c9565b60a285141561195f57506002925060009150600a905061282c6105c9565b60a385141561197d57506002925060009150600a90506128c06105c9565b60a485141561199b57506003925060009150606490506129546105c9565b60a58514156119b95750600392506000915060649050612a456105c9565b60a68514156119d75750600392506000915060649050612b196105c9565b60708514156119f55750600292506000915060649050612bdb6105c9565b60405162461bcd60e51b815260040180806020018281038252602c81526020018061406e602c913960400191505060405180910390fd5b611a34613f97565b60408051600080825260208201909252611a6e91611a68565b611a55613f97565b815260200190600190039081611a4d5790505b50612245565b905090565b6000816001600160401b0316836060015160a001511015611ab8575060e0820180516005016001600160401b03169052606082015160001960a09091015260016116ef565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006116ef565b60016101e090910152565b600160e090910152565b600060028260e001511415611b14575060006110b8565b60018260e001511415611b29575060016110b8565b81516020830151611b399061177b565b611b46846040015161177b565b611b53856060015161177b565b611b60866080015161177b565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110b8565b606060f883811c9083901c81900360ff169082826001600160401b0381118015611bea57600080fd5b50604051908082528060200260200182016040528015611c14578160200160208202803683370190505b50905060005b83811015611c5357611c3188828501602002612d77565b60001b828281518110611c4057fe5b6020908102919091010152600101611c1a565b509695505050505050565b60408051818152606081810183529182919060208201818036833701905050905060005b6020811015611d26576000848260208110611c9957fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b611cbf82612db7565b858560020281518110611cce57fe5b60200101906001600160f81b031916908160001a905350611cee81612db7565b858560020260010181518110611d0057fe5b60200101906001600160f81b031916908160001a9053505060019092019150611c829050565b5092915050565b60608180611d545750506040805180820190915260018152600360fc1b60208201526110b8565b8060005b8115611d6c57600101600a82049150611d58565b6060816001600160401b0381118015611d8457600080fd5b506040519080825280601f01601f191660200182016040528015611daf576020820181803683370190505b50905060001982015b8415611dfd57600a850660300160f81b82828060019003935081518110611ddb57fe5b60200101906001600160f81b031916908160001a905350600a85049450611db8565b5095945050505050565b60008082600101848481518110611e1a57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611e4b575060208385510310155b611e88576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611e968585612de8565b915091509250929050565b611ea9613f97565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611eff565b611eec613f97565b815260200190600190039081611ee45790505b50905281526020016000604051908082528060200260200182016040528015611f4257816020015b611f2f613f97565b815260200190600190039081611f275790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611f70613f97565b82600080611f7c613f97565b6000611f888986611e07565b9095509350611f978986611e07565b9095509250600160ff85161415611fb857611fb289866113c6565b90955091505b611fc28986612e41565b9095509050600160ff85161415611fed5784611fdf8483856116f5565b965096505050505050611581565b84611ff88483611691565b9650965050505050509250929050565b600c90565b612015613f97565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561205c57600080fd5b5060405190808252806020026020018201604052801561209657816020015b612083613f97565b81526020019060019003908161207b5790505b509052815260200160006040519080825280602002602001820160405280156120d957816020015b6120c6613f97565b8152602001906001900390816120be5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000612108613f97565b8284511015801561211d575060408385510310155b61215a576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6000806121678686612e41565b90945091506121768685611e33565b9094509050836121868383612e52565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b03811180156121bc57600080fd5b506040519080825280602002602001820160405280156121f657816020015b6121e3613f97565b8152602001906001900390816121db5790505b50905060005b8760ff168160ff1610156122385761221487846113c6565b838360ff168151811061222357fe5b602090810291909101015292506001016121fc565b5090969095509350505050565b61224d613f97565b6122578251612f11565b6122a8576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156122df578381815181106122c257fe5b602002602001015160a001518201915080806001019150506122ad565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561232757600080fd5b5060405190808252806020026020018201604052801561236157816020015b61234e613f97565b8152602001906001900390816123465790505b5090528152602081019490945260006040850152600360608501526080909301525090565b61238e613f97565b6040518060c001604052806000815260200183815260200160006001600160401b03811180156123bd57600080fd5b506040519080825280602002602001820160405280156123f757816020015b6123e4613f97565b8152602001906001900390816123dc5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061244b57fe5b6040820151516124ae5761245d611f61565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506110b8565b6124b6611f61565b82600001516124dc84604001516000815181106124cf57fe5b602002602001015161177b565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000612539612193565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b612585613f97565b6008825111156125d3576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b03811180156125ec57600080fd5b50604051908082528060200260200182016040528015612616578160200160208202803683370190505b508051909150600160005b82811015612679576126388682815181106124cf57fe5b84828151811061264457fe5b60200260200101818152505085818151811061265c57fe5b602002602001015160a00151820191508080600101915050612621565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156126bb5781810151838201526020016126a3565b50505050905001925050506040516020818303038152906040528051906020012090506126e88183612e52565b9695505050505050565b606490565b6126ff613f97565b6040805160028082526060828101909352816020015b61271d613f97565b815260200190600190039081612715579050509050828160008151811061274057fe5b6020026020010181905250838160018151811061275957fe5b602002602001018190525061276d8161257d565b949350505050565b61277d613f97565b61278b826101000151612f18565b9050612795613f97565b6127a3836101000151612f18565b90506127ae82612f5a565b15806127c057506127be81612f78565b155b156127d5576127ce83612f85565b5050612829565b8151600160401b116127ea576127ce83612f85565b600061280c82606001518460000151612807876101c00151610fc5565b612f8e565b905061282584610100015161282083611ea1565b612fb0565b5050505b50565b612834613f97565b612842826101000151612f18565b905061284c613f97565b61285a836101000151612f18565b905061286582612f5a565b1580612877575061287581612f78565b155b15612885576127ce83612f85565b815167fffffffffffffff91161289e576127ce83612f85565b600061280c826060015184600001516128bb876101c00151610fc5565b612fda565b6128c8613f97565b6128d6826101000151612f18565b90506128e0613f97565b6128ee836101000151612f18565b90506128f982612f5a565b158061290b575061290981612f78565b155b15612919576127ce83612f85565b815167ffffffffffffffe111612932576127ce83612f85565b600061280c8260600151846000015161294f876101c00151610fc5565b613139565b61295c613f97565b61296a826101000151612f18565b9050612974613f97565b612982836101000151612f18565b905061298c613f97565b61299a846101000151612f18565b90506129a583612f5a565b15806129b757506129b58261326c565b155b806129c857506129c681612f78565b155b156129de576129d684612f85565b505050612829565b8251600160401b1115806129f55750815161010011155b15612a03576129d684612f85565b6000612a2a826060015185600001518560000151612a25896101c00151610fc5565b613277565b9050612a3e8561010001516128208361200d565b5050505050565b612a4d613f97565b612a5b826101000151612f18565b9050612a65613f97565b612a73836101000151612f18565b9050612a7d613f97565b612a8b846101000151612f18565b9050612a9683612f5a565b1580612aa85750612aa68261326c565b155b80612ab95750612ab781612f78565b155b15612ac7576129d684612f85565b825167fffffffffffffff9111580612ae457508151600160401b11155b15612af2576129d684612f85565b6000612a2a826060015185600001518560000151612b14896101c00151610fc5565b6132c0565b612b21613f97565b612b2f826101000151612f18565b9050612b39613f97565b612b47836101000151612f18565b9050612b51613f97565b612b5f846101000151612f18565b9050612b6a83612f5a565b1580612b7c5750612b7a8261326c565b155b80612b8d5750612b8b81612f78565b155b15612b9b576129d684612f85565b825167ffffffffffffffe111612bb4576129d684612f85565b6000612a2a826060015185600001518560000151612bd6896101c00151610fc5565b613409565b612be3613f97565b612bf1826101000151612f18565b9050612bfb613f97565b612c09836101000151612f18565b9050612c1482612f5a565b1580612c265750612c2481612f78565b155b15612c34576127ce83612f85565b81516127101080612c4457508151155b15612c52576127ce83612f85565b82610180015151836101a001511415612ccd57612c8581606001518360000151612c80866101c00151610fc5565b6134db565b15612cc4576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6127ce83612f85565b6101a083015182516101808501516000612ce882858561352f565b905080612cf48661177b565b14612d33576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5090910160209081019190912060a0850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b600080805b6020811015612daf57600882901b91508481850181518110612d9a57fe5b016020015160f81c9190911790600101612d7c565b509392505050565b6000600a60f883901c1015612dd7578160f81c60300160f81b90506110b8565b8160f81c60570160f81b90506110b8565b60008160200183511015612e38576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611e968585612de8565b612e5a613f97565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612eb0565b612e9d613f97565b815260200190600190039081612e955790505b50905281526020016000604051908082528060200260200182016040528015612ef357816020015b612ee0613f97565b815260200190600190039081612ed85790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612f20613f97565b612f28613f97565b8260200151600184600001510381518110612f3f57fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff161580156116ef57505051600160401b1190565b6080015160ff16600c1490565b61282981611ae8565b600061276d612fa6856020865b048560000151613558565b6020855b066136c6565b808260200151836000015181518110612fc557fe5b60209081029190910101525080516001019052565b604080516008808252818301909252600091606091906020820181803683370190505090506000613014866020875b048660000151613558565b90506020808606600801106130e757600061303b876020885b046001018760400151613558565b905060005b6018601f88166008030181101561308f57613061838260208a5b06016136c6565b60f81b84828151811061307057fe5b60200101906001600160f81b031916908160001a905350600101613040565b506018601f8716600803015b60088110156130e0576130b2826020898401612faa565b60f81b8482815181106130c157fe5b60200101906001600160f81b031916908160001a90535060010161309b565b5050613130565b60005b600881101561312e57613100828260208961305a565b60f81b83828151811061310f57fe5b60200101906001600160f81b031916908160001a9053506001016130ea565b505b6126e8826136d3565b60408051602080825281830190925260009160609190602082018180368337019050509050600061316c86602087613009565b90506020808606602001106132255760006131898760208861302d565b905060005b601f87166020038110156131d7576131a9838260208a61305a565b60f81b8482815181106131b857fe5b60200101906001600160f81b031916908160001a90535060010161318e565b50601f86166008035b60208110156130e0576131f7826020898401612faa565b60f81b84828151811061320657fe5b60200101906001600160f81b031916908160001a9053506001016131e0565b60005b602081101561312e5761323e828260208961305a565b60f81b83828151811061324d57fe5b60200101906001600160f81b031916908160001a905350600101613228565b6080015160ff161590565b60008061328686602087612f9b565b90506000613298826020880687613709565b905060006132b488602089048488600001518960200151613748565b98975050505050505050565b600060606132cd846137ee565b905060006132dd87602088613009565b9050602080870660080111156133bf5760005b6018601f8816600803018110156133385761332e8260208984010685846018018151811061331a57fe5b01602001516001600160f81b031916613858565b91506001016132f0565b50613352876020885b048387600001518860200151613748565b965060006133628860208961302d565b90506018601f8816600803015b600881101561339b576133918260208a84010686846018018151811061331a57fe5b915060010161336f565b506133b788602089046001018388604001518960600151613748565b9750506133fe565b60005b60088110156133ee576133e4828260208a060185846018018151811061331a57fe5b91506001016133c2565b506133fb87602088613341565b96505b509495945050505050565b60006060613416846137ee565b9050600061342687602088613009565b9050602080870660200111156134b85760005b601f87166020038110156134685761345e828260208a5b060185848151811061331a57fe5b9150600101613439565b5061347587602088613341565b965060006134858860208961302d565b9050601f87166020035b602081101561339b576134ae8260208a84010686848151811061331a57fe5b915060010161348f565b60005b60208110156133ee576134d1828260208a613450565b91506001016134bb565b6000806134ea85602086612f9b565b9050601f84165b602081101561351c5761350482826136c6565b1561351457600092505050611774565b6001016134f1565b5061177085602086048560000151613874565b60008061354a8584860186613543876139f0565b6001613a1b565b509050611770607b82613af3565b60008151600014156135c15761356e6000612416565b84146135b9576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000611774565b60006135e0836000815181106135d357fe5b6020026020010151612416565b905060015b835181101561364a57846001166001141561361e5761361784828151811061360957fe5b602002602001015183613af3565b915061363e565b61363b8285838151811061362e57fe5b6020026020010151613af3565b91505b600194851c94016135e5565b50848114613697576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b83156136a7575060009050611774565b826000815181106136b457fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015611d2657600882901b91508381815181106136f457fe5b016020015160f81c91909117906001016136d8565b60006060613716856137ee565b90508260f81b81858151811061372857fe5b60200101906001600160f81b031916908160001a905350611770816136d3565b600081516003146137a0576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b6126e886868686866000815181106137b457fe5b602002602001015160001c876001815181106137cc57fe5b6020026020010151886002815181106137e157fe5b6020026020010151613b1f565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b6020811015612daf578260f81b8282601f038151811061383257fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101613816565b60006060613865856137ee565b90508281858151811061372857fe5b60008151600014156138dd5761388a6000612416565b84146138d5576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001611774565b60006138ef836000815181106135d357fe5b9050600160606138fd613d99565b905060015b855181101561399157866001166001141561393b5761393486828151811061392657fe5b602002602001015185613af3565b9350613985565b61394b8487838151811061362e57fe5b9350828015613982575081600182038151811061396457fe5b602002602001015186828151811061397857fe5b6020026020010151145b92505b600196871c9601613902565b508683146139de576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8515611dfd5760019350505050611774565b600060018211613a02575060016110b8565b613a11600260018401046139f0565b60020290506110b8565b60008060208411613a6f57858510613a4257613a376000612416565b600191509150613ae9565b6000613a57613a5289888a613e3a565b612416565b905080613a646000612416565b909350149050613ae9565b600080613a898989600289048a0160028a5b046000613a1b565b91509150808015613a975750845b15613ab757613aac89898960028a0489613a1b565b935093505050613ae9565b600080613ac88b8b8b60028c613a81565b91509150613ad68285613af3565b818015613ae05750835b95509550505050505b9550959350505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080613b2b87612416565b9050613b38898988613558565b506060613b43613d99565b905060018751036001901b8910613c075787613b63578992505050613d8e565b6000613b6e8a613e99565b88519091505b60018203811015613b9c57613b928c84600184038151811061362e57fe5b9b50600101613b74565b5060015b60018203811015613bf2578a60011660011415613bd057613bc983600183038151811061392657fe5b9350613be6565b613be38484600184038151811061362e57fe5b93505b60019a8b1c9a01613ba0565b50613bfd8b84613af3565b9350505050613d8e565b60015b8751811015613c875760008a600116600114613c265783613c3b565b888281518110613c3257fe5b60200260200101515b905060008b600116600114613c6357898381518110613c5657fe5b6020026020010151613c65565b845b9050613c718282613af3565b60019c8d1c9c909550929092019150613c0a9050565b508715613c9657509050613d8e565b600086613ca4575084613d19565b818781518110613cb057fe5b6020026020010151851415613d0c576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b613d168686613af3565b90505b80875b60018a5103811015613d4257613d388285838151811061362e57fe5b9150600101613d1c565b50838114613d88576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b60408051818152610820810182526060918291906020820161080080368337019050509050613dc86000612416565b81600081518110613dd557fe5b602090810291909101015260015b6040811015613e3457613e15826001830381518110613dfe57fe5b602002602001015183600184038151811061362e57fe5b828281518110613e2157fe5b6020908102919091010152600101613de3565b50905090565b600080805b6020811015613e9057600882901b915060008186018511613e61576000613e7f565b8682870181518110613e6f57fe5b01602001516001600160f81b0319165b60f81c929092179150600101613e3f565b50949350505050565b600081613ea8575060016110b8565b613eb5600183901c613e99565b60010190506110b8565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613efd613fd4565b8152602001613f0a613fd4565b81526000602082018190526040820181905260608201819052608082015260a001613f33614034565b8152602001613f40614034565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c0016040528060008152602001613fb161404e565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101613ff0613f97565b8152602001613ffd613f97565b815260200161400a613f97565b8152602001614017613f97565b81526000602082018190526040820181905260609091015290565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a264697066735822122053e678afe260b87b7e1d6695bda93812f669d654b9461a474d6229142876008d64736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
