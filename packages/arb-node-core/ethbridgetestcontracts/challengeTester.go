// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChallengeTesterABI is the input ABI used to generate the binding from.
const ChallengeTesterABI = "[{\"inputs\":[{\"internalType\":\"contractIOneStepProof[]\",\"name\":\"_executors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_loser\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"contractIOneStepProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft\",\"type\":\"uint256\"},{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"startChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ChallengeTesterFuncSigs maps the 4-byte function signature to its string representation.
var ChallengeTesterFuncSigs = map[string]string{
	"d2ef7398": "challenge()",
	"e1022602": "challengeCompleted()",
	"fa7803e6": "completeChallenge(address,address)",
	"f97a05df": "executors(uint256)",
	"e82898b3": "loser()",
	"00b1f0d5": "startChallenge(bytes32,uint256,address,address,uint256,uint256,address)",
	"dfbf53ae": "winner()",
}

// ChallengeTesterBin is the compiled bytecode used for deploying new contracts.
var ChallengeTesterBin = "0x608060405234801561001057600080fd5b506040516132753803806132758339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825186602082028301116401000000008211171561008557600080fd5b82525081516020918201928201910280838360005b838110156100b257818101518382015260200161009a565b5050505091909101604052505082516100d492506000915060208401906100db565b505061015f565b828054828255906000526020600020908101928215610130579160200282015b8281111561013057825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100fb565b5061013c929150610140565b5090565b5b8082111561013c5780546001600160a01b0319168155600101610141565b6131078061016e6000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c8063e10226021161005b578063e1022602146100ff578063e82898b31461011b578063f97a05df14610123578063fa7803e6146101405761007c565b8062b1f0d514610081578063d2ef7398146100d3578063dfbf53ae146100f7575b600080fd5b6100d1600480360360e081101561009757600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160808201359160a08101359160c0909101351661016e565b005b6100db6102d0565b604080516001600160a01b039092168252519081900360200190f35b6100db6102df565b6101076102ee565b604080519115158252519081900360200190f35b6100db6102fe565b6100db6004803603602081101561013957600080fd5b503561030d565b6100d16004803603604081101561015657600080fd5b506001600160a01b0381358116916020013516610334565b600060405161017c90610375565b604051809103906000f080158015610198573d6000803e3d6000fd5b509050806001600160a01b03166332f8c24f6000308b8b8b8b8b8b8b6040518a63ffffffff1660e01b815260040180806020018a6001600160a01b03168152602001898152602001888152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001836001600160a01b0316815260200182810382528b818154815260200191508054801561026657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610248575b50509a5050505050505050505050600060405180830381600087803b15801561028e57600080fd5b505af11580156102a2573d6000803e3d6000fd5b5050600180546001600160a01b0319166001600160a01b039490941693909317909255505050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031681565b600154600160a01b900460ff1681565b6003546001600160a01b031681565b6000818154811061031a57fe5b6000918252602090912001546001600160a01b0316905081565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556001805460ff60a01b1916600160a01b179055565b612d4f806103838339019056fe608060405234801561001057600080fd5b506000805460ff19166001179055612d228061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638e7b84c5116100b8578063bb4af0b11161007c578063bb4af0b114610599578063d3b5fd35146105a1578063e78cea92146105ca578063e87e3589146105d2578063f1d1b9d6146105da578063f97a05df146107ac57610137565b80638e7b84c51461039a578063925f9a961461047d5780639a9e4f4414610485578063a5f59af11461048d578063a63bde8d1461051957610137565b806370dea79a116100ff57806370dea79a14610269578063843d5a5c1461027157806386f63a57146102795780638a8cd2181461038a5780638b2999031461039257610137565b806304baa00b1461013c57806332f8c24f1461016557806341e8510c1461020f578063534db0e2146102295780636f791d291461024d575b600080fd5b6101446107c9565b6040518082600281111561015457fe5b815260200191505060405180910390f35b61020d600480360361012081101561017c57600080fd5b810190602081018135600160201b81111561019657600080fd5b8201836020820111156101a857600080fd5b803590602001918460208302840111600160201b831117156101c957600080fd5b91935091506001600160a01b0381358116916020810135916040820135916060810135821691608082013581169160a08101359160c08201359160e00135166107d2565b005b610217610954565b60408051918252519081900360200190f35b61023161095a565b604080516001600160a01b039092168252519081900360200190f35b610255610969565b604080519115158252519081900360200190f35b61020d610973565b610217610a94565b61020d600480360361012081101561029057600080fd5b813591602081013591604082013591606081019181019060e0810160c0820135600160201b8111156102c157600080fd5b8201836020820111156102d357600080fd5b803590602001918460018302840111600160201b831117156102f457600080fd5b919390929091602081019035600160201b81111561031157600080fd5b82018360208201111561032357600080fd5b803590602001918460018302840111600160201b8311171561034457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610a9a9050565b610231610f58565b610144610ff1565b61020d60048036036101008110156103b157600080fd5b810190602081018135600160201b8111156103cb57600080fd5b8201836020820111156103dd57600080fd5b803590602001918460208302840111600160201b831117156103fe57600080fd5b9193909282359260208101359260408201359260608301359260808101359260a082013592909160e081019060c00135600160201b81111561043f57600080fd5b82018360208201111561045157600080fd5b803590602001918460208302840111600160201b8311171561047257600080fd5b509092509050610fff565b6102176114eb565b6102176114f1565b61020d600480360360e08110156104a357600080fd5b810190602081018135600160201b8111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460208302840111600160201b831117156104f057600080fd5b919350915080359060208101359060408101359060608101359060808101359060a001356114f7565b61020d600480360360a081101561052f57600080fd5b813591602081013591810190606081016040820135600160201b81111561055557600080fd5b82018360208201111561056757600080fd5b803590602001918460208302840111600160201b8311171561058857600080fd5b9193509150803590602001356117e6565b610231611bd2565b61020d600480360360608110156105b757600080fd5b5080359060208101359060400135611be1565b610231611e2b565b610217611e3a565b61020d60048036036101a08110156105f157600080fd5b810190602081018135600160201b81111561060b57600080fd5b82018360208201111561061d57600080fd5b803590602001918460208302840111600160201b8311171561063e57600080fd5b6040805160608181018352949693958335956020850135959385013594818101359460808201359460a0830135949193919261012081019260c090910190600390839083908082843760009201919091525091949392602081019250359050600160201b8111156106ae57600080fd5b8201836020820111156106c057600080fd5b803590602001918460018302840111600160201b831117156106e157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561073357600080fd5b82018360208201111561074557600080fd5b803590602001918460018302840111600160201b8311171561076657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150611e8a9050565b610231600480360360208110156107c257600080fd5b50356123df565b600b5460ff1681565b6000600b54610100900460ff1660028111156107ea57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b8152509061089c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610861578181015183820152602001610849565b50505050905090810190601f16801561088e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108a960018b8b612c4c565b50600380546001600160a01b038a81166001600160a01b0319928316179092556004899055600588905560068054888416908316179055600780548784169083161790556009859055600a849055600b805461ffff19166102001790556000600c81905543600855600280549092169284169290921790556040517f7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de9190a150505050505050505050565b600a5481565b6007546001600160a01b031681565b60005460ff165b90565b600061098a6008544361240690919063ffffffff16565b9050610994611e3a565b81116040518060400160405280601081526020016f54494d454f55545f444541444c494e4560801b81525090610a0b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506001600b54610100900460ff166002811115610a2457fe5b1415610a60576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610a5b612448565b610a91565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610a916124c6565b50565b600c5481565b610aa2610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610b255760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b50610b2e611e3a565b600854610b3c904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610baf5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506002600b5460ff166002811115610bc357fe5b14610c02576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6000610c0c612caf565b60018360ff1681548110610c1c57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316639d16dd04600260009054906101000a90046001600160a01b03168c60405180604001604052808e81526020018d8152508a8a8a6040518763ffffffff1660e01b815260040180876001600160a01b0316815260200186815260200185600260200280838360005b83811015610cc3578181015183820152602001610cab565b50505050905001806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015610d30578181015183820152602001610d18565b50505050905090810190601f168015610d5d5780820380516001836020036101000a031916815260200191505b509850505050505050505060c06040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610db957600080fd5b50602081015160055490935060409091019150821115610e14576040805162461bcd60e51b8152602060048201526011602482015270544f4f5f4d414e595f4d4553534147455360781b604482015290519081900360640190fd5b600454610e4e8b8b8b8b60038060200260405190810160405280929190826003602002808284376000920191909152508891506125219050565b14610e8c576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1610ebd612557565b5060029050600b54610100900460ff166002811115610ed857fe5b1415610f1657610eff610ef66008544361240690919063ffffffff16565b600a5490612406565b600a55600b805461ff001916610100179055610f4a565b610f37610f2e6008544361240690919063ffffffff16565b60095490612406565b600955600b805461ff0019166102001790555b505043600855505050505050565b60006001600b54610100900460ff166002811115610f7257fe5b1415610f8a57506006546001600160a01b0316610970565b6002600b54610100900460ff166002811115610fa257fe5b1415610fba57506007546001600160a01b0316610970565b6040805162461bcd60e51b81526020600482015260076024820152662727afaa2aa92760c91b604482015290519081900360640190fd5b600b54610100900460ff1681565b6002600b5460ff16600281111561101257fe5b141561102b57600b805460ff1916600117905560006004555b6000600b5460ff16600281111561103e57fe5b14156110615760048054600c55600b805460ff19166001179055600090556110b3565b6001600b5460ff16600281111561107457fe5b146110b3576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6110bb610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b8152509061113e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b50611147611e3a565b600854611155904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906111c85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506001861161120a576040805162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b604482015290519081900360640190fd5b6112168661019061258a565b6001018114611258576040805162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b604482015290519081900360640190fd5b848282600019810181811061126957fe5b9050602002013514156112ae576040805162461bcd60e51b815260206004820152600860248201526714d0535157d1539160c21b604482015290519081900360640190fd5b6112b884846125a2565b828260008181106112c557fe5b9050602002013514611313576040805162461bcd60e51b81526020600482015260126024820152717365676d656e74207072652d6669656c647360701b604482015290519081900360640190fd5b61131d87876125ce565b8410611369576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840e6cacedacadce840d8cadccee8d60531b604482015290519081900360640190fd5b600061138a88888585600081811061137d57fe5b905060200201358961261c565b9050611398818c8c8c61265a565b6113eb8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92506113e691508990506113e0838d6125ce565b90612406565b612712565b50600c547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d8989868660405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2506002600b54610100900460ff16600281111561147b57fe5b14156114b057611499610ef66008544361240690919063ffffffff16565b600a55600b805461ff0019166101001790556114db565b6114c8610f2e6008544361240690919063ffffffff16565b600955600b805461ff0019166102001790555b5050436008555050505050505050565b60085481565b60095481565b6002600b5460ff16600281111561150a57fe5b141561152357600b805460ff1916600117905560006004555b6000600b5460ff16600281111561153657fe5b14156115595760048054600c55600b805460ff19166001179055600090556115ab565b6001600b5460ff16600281111561156c57fe5b146115ab576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6115b3610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906116365760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b5061163f611e3a565b60085461164d904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906116c05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b5060018411611702576040805162461bcd60e51b81526020600482015260096024820152681513d3c814d213d49560ba1b604482015290519081900360640190fd5b600061170e83836125a2565b9050600061171e8787848861261c565b905061172c818b8b8b61265a565b61173687876125ce565b841015611774576040805162461bcd60e51b81526020600482015260076024820152664241445f47415360c81b604482015290519081900360640190fd5b848214156117b5576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b6040517f6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa55890600090a1610ebd612557565b6117ee610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906118715760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b5061187a611e3a565b600854611888904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906118fb5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506000600b5460ff16600281111561190f57fe5b1461194c576040805162461bcd60e51b815260206004820152600860248201526710905117d2d2539160c21b604482015290519081900360640190fd5b6000821161198e576040805162461bcd60e51b815260206004820152600a6024820152690848288be988a9c8ea8960b31b604482015290519081900360640190fd5b61199a8261019061258a565b60010183146119dc576040805162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b604482015290519081900360640190fd5b858210611a1b576040805162461bcd60e51b8152602060048201526008602482015267544f4f5f4c4f4e4760c01b604482015290519081900360640190fd5b600454611a2b600088848961261c565b14611a68576040805162461bcd60e51b815260206004820152600860248201526708a9c88be9082a6960c31b604482015290519081900360640190fd5b611aa6848480806020026020016040519081016040528093929190818152602001838360200280828437600092018290525092508691506127129050565b5083836000198101818110611ab757fe5b602002919091013560045550600b80546002919060ff19166001830217905550600c547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d600088878760405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a26002600b54610100900460ff166002811115611b6657fe5b1415611b9b57611b84610ef66008544361240690919063ffffffff16565b600a55600b805461ff001916610100179055611bc6565b611bb3610f2e6008544361240690919063ffffffff16565b600955600b805461ff0019166102001790555b50504360085550505050565b6006546001600160a01b031681565b611be9610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611c6c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b50611c75611e3a565b600854611c83904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611cf65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506000600b5460ff166002811115611d0a57fe5b14611d49576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b600454611d59600085848661261c565b14611d98576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6004819055600b805460ff19166002908117918290559060ff6101009091041681811115611dc257fe5b1415611df757611de0610ef66008544361240690919063ffffffff16565b600a55600b805461ff001916610100179055611e22565b611e0f610f2e6008544361240690919063ffffffff16565b600955600b805461ff0019166102001790555b50504360085550565b6002546001600160a01b031681565b60006001600b54610100900460ff166002811115611e5457fe5b1415611e635750600954610970565b6002600b54610100900460ff166002811115611e7b57fe5b1415610fba5750600a54610970565b6002600b5460ff166002811115611e9d57fe5b1415611eb657600b805460ff1916600117905560006004555b6000600b5460ff166002811115611ec957fe5b1415611eec5760048054600c55600b805460ff1916600117905560009055611f3e565b6001600b5460ff166002811115611eff57fe5b14611f3e576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b611f46610f58565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611fc95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b50611fd2611e3a565b600854611fe0904390612406565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906120535760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b506000806000612061612caf565b60018560ff168154811061207157fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316639d16dd04600260009054906101000a90046001600160a01b03168d60405180604001604052808f81526020018e8152508b8b6040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184600260200280838360005b838110156121175781810151838201526020016120ff565b505050509050018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561215b578181015183820152602001612143565b50505050905090810190601f1680156121885780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156121bb5781810151838201526020016121a3565b50505050905090810190601f1680156121e85780820380516001836020036101000a031916815260200191505b5097505050505050505060c06040518083038186803b15801561220a57600080fd5b505afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561224357600080fd5b50805160208201516005549195509350604090910191508211156122a2576040805162461bcd60e51b8152602060048201526011602482015270544f4f5f4d414e595f4d4553534147455360781b604482015290519081900360640190fd5b6122b08a8a8a86868661284f565b8c14156122f0576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b6123128d8467ffffffffffffffff1661230c8e8e8e8e88612521565b8f61261c565b9350505050612323818e8e8e61265a565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1612354612557565b506002600b54610100900460ff16600281111561236d57fe5b14156123a25761238b610ef66008544361240690919063ffffffff16565b600a55600b805461ff0019166101001790556123cd565b6123ba610f2e6008544361240690919063ffffffff16565b600955600b805461ff0019166102001790555b50504360085550505050505050505050565b600181815481106123ec57fe5b6000918252602090912001546001600160a01b0316905081565b600061243f8383604051806040016040528060148152602001737375627472616374696f6e206f766572666c6f7760601b8152506128d3565b90505b92915050565b60035460075460065460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b505050506124c43361292d565b565b60035460065460075460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b1580156124a357600080fd5b815181516020840151604085015160009361254d939092612548928b92918b918b906129ad565b6125a2565b9695505050505050565b6001600b54610100900460ff16600281111561256f57fe5b14156125825761257d6124c6565b6124c4565b6124c4612448565b60008183101561259b575081612442565b5080612442565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60008282018381101561243f576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b61269a8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508592508891506129f89050565b600c5414604051806040016040528060088152602001672124a9afa82922ab60c11b8152509061270b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b5050505050565b82516000906000190160608167ffffffffffffffff8111801561273457600080fd5b5060405190808252806020026020018201604052801561275e578160200160208202803683370190505b509050600061276d8584612ac6565b905060008690506127a881838a60008151811061278657fe5b60200260200101518b60018151811061279b57fe5b602002602001015161261c565b836000815181106127b557fe5b60209081029190910101526127ca81836125ce565b90506127d68685612ae4565b915060015b848110156128365761280b82848b84815181106127f457fe5b60200260200101518c856001018151811061279b57fe5b84828151811061281757fe5b602090810291909101015261282c82846125ce565b91506001016127db565b5061284083612af7565b600c5550929695505050505050565b60006128c861287067ffffffffffffffff861687845b6020020151906125ce565b6020840151604085015161254891879161289f8d8214612891576001612894565b60005b60ff168c6001612865565b60608901516128c38e82146128b55760016128b8565b60005b60ff168e6002612865565b6129ad565b979650505050505050565b600081848411156129255760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b505050900390565b6000546040805180820190915260098152684e4f545f434c4f4e4560b81b60208201529060ff16156129a05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610861578181015183820152602001610849565b50806001600160a01b0316ff5b60408051602080820198909852808201969096526060860194909452608085019290925260a084015260c0808401919091528151808403909101815260e09092019052805191012090565b8251600090610100811115612a0c57600080fd5b8260005b82811015612abc5760028606612a6957868181518110612a2c57fe5b6020026020010151826040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209150612aae565b81878281518110612a7657fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b600286049550600101612a10565b5095945050505050565b6000818381612ad157fe5b06828481612adb57fe5b04019392505050565b6000818381612aef57fe5b049392505050565b6000815b600181511115612c2f5760606002825160010181612b1557fe5b0467ffffffffffffffff81118015612b2c57600080fd5b50604051908082528060200260200182016040528015612b56578160200160208202803683370190505b50905060005b8151811015612c27578251816002026001011015612bef57828160020281518110612b8357fe5b6020026020010151838260020260010181518110612b9d57fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110612bde57fe5b602002602001018181525050612c1f565b828160020281518110612bfe57fe5b6020026020010151828281518110612c1257fe5b6020026020010181815250505b600101612b5c565b509050612afb565b80600081518110612c3c57fe5b6020026020010151915050919050565b828054828255906000526020600020908101928215612c9f579160200282015b82811115612c9f5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c6c565b50612cab929150612ccd565b5090565b60405180608001604052806004906020820280368337509192915050565b5b80821115612cab5780546001600160a01b0319168155600101612cce56fea2646970667358221220fad8b4d14480237d9451775f1e8064367eae88ebfed1968c910499a7489189aa64736f6c634300060c0033a26469706673582212204372444485903996e02cba59cbf844bdc1b42f2bac86331ddecb98fd90cd033564736f6c634300060c0033"

// DeployChallengeTester deploys a new Ethereum contract, binding an instance of ChallengeTester to it.
func DeployChallengeTester(auth *bind.TransactOpts, backend bind.ContractBackend, _executors []common.Address) (common.Address, *types.Transaction, *ChallengeTester, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChallengeTesterBin), backend, _executors)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChallengeTester{ChallengeTesterCaller: ChallengeTesterCaller{contract: contract}, ChallengeTesterTransactor: ChallengeTesterTransactor{contract: contract}, ChallengeTesterFilterer: ChallengeTesterFilterer{contract: contract}}, nil
}

// ChallengeTester is an auto generated Go binding around an Ethereum contract.
type ChallengeTester struct {
	ChallengeTesterCaller     // Read-only binding to the contract
	ChallengeTesterTransactor // Write-only binding to the contract
	ChallengeTesterFilterer   // Log filterer for contract events
}

// ChallengeTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChallengeTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChallengeTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChallengeTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChallengeTesterSession struct {
	Contract     *ChallengeTester  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChallengeTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChallengeTesterCallerSession struct {
	Contract *ChallengeTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ChallengeTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChallengeTesterTransactorSession struct {
	Contract     *ChallengeTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ChallengeTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChallengeTesterRaw struct {
	Contract *ChallengeTester // Generic contract binding to access the raw methods on
}

// ChallengeTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChallengeTesterCallerRaw struct {
	Contract *ChallengeTesterCaller // Generic read-only contract binding to access the raw methods on
}

// ChallengeTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChallengeTesterTransactorRaw struct {
	Contract *ChallengeTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChallengeTester creates a new instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTester(address common.Address, backend bind.ContractBackend) (*ChallengeTester, error) {
	contract, err := bindChallengeTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChallengeTester{ChallengeTesterCaller: ChallengeTesterCaller{contract: contract}, ChallengeTesterTransactor: ChallengeTesterTransactor{contract: contract}, ChallengeTesterFilterer: ChallengeTesterFilterer{contract: contract}}, nil
}

// NewChallengeTesterCaller creates a new read-only instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterCaller(address common.Address, caller bind.ContractCaller) (*ChallengeTesterCaller, error) {
	contract, err := bindChallengeTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterCaller{contract: contract}, nil
}

// NewChallengeTesterTransactor creates a new write-only instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*ChallengeTesterTransactor, error) {
	contract, err := bindChallengeTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterTransactor{contract: contract}, nil
}

// NewChallengeTesterFilterer creates a new log filterer instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*ChallengeTesterFilterer, error) {
	contract, err := bindChallengeTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterFilterer{contract: contract}, nil
}

// bindChallengeTester binds a generic wrapper to an already deployed contract.
func bindChallengeTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChallengeTester *ChallengeTesterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChallengeTester.Contract.ChallengeTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChallengeTester *ChallengeTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChallengeTester.Contract.ChallengeTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChallengeTester *ChallengeTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChallengeTester.Contract.ChallengeTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChallengeTester *ChallengeTesterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChallengeTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChallengeTester *ChallengeTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChallengeTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChallengeTester *ChallengeTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChallengeTester.Contract.contract.Transact(opts, method, params...)
}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Challenge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "challenge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Challenge() (common.Address, error) {
	return _ChallengeTester.Contract.Challenge(&_ChallengeTester.CallOpts)
}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Challenge() (common.Address, error) {
	return _ChallengeTester.Contract.Challenge(&_ChallengeTester.CallOpts)
}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterCaller) ChallengeCompleted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "challengeCompleted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterSession) ChallengeCompleted() (bool, error) {
	return _ChallengeTester.Contract.ChallengeCompleted(&_ChallengeTester.CallOpts)
}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterCallerSession) ChallengeCompleted() (bool, error) {
	return _ChallengeTester.Contract.ChallengeCompleted(&_ChallengeTester.CallOpts)
}

// Executors is a free data retrieval call binding the contract method 0xf97a05df.
//
// Solidity: function executors(uint256 ) view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Executors(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0xf97a05df.
//
// Solidity: function executors(uint256 ) view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Executors(arg0 *big.Int) (common.Address, error) {
	return _ChallengeTester.Contract.Executors(&_ChallengeTester.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0xf97a05df.
//
// Solidity: function executors(uint256 ) view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Executors(arg0 *big.Int) (common.Address, error) {
	return _ChallengeTester.Contract.Executors(&_ChallengeTester.CallOpts, arg0)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Loser(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "loser")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Loser() (common.Address, error) {
	return _ChallengeTester.Contract.Loser(&_ChallengeTester.CallOpts)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Loser() (common.Address, error) {
	return _ChallengeTester.Contract.Loser(&_ChallengeTester.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Winner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "winner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Winner() (common.Address, error) {
	return _ChallengeTester.Contract.Winner(&_ChallengeTester.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Winner() (common.Address, error) {
	return _ChallengeTester.Contract.Winner(&_ChallengeTester.CallOpts)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterTransactor) CompleteChallenge(opts *bind.TransactOpts, _winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.contract.Transact(opts, "completeChallenge", _winner, _loser)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterSession) CompleteChallenge(_winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.CompleteChallenge(&_ChallengeTester.TransactOpts, _winner, _loser)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterTransactorSession) CompleteChallenge(_winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.CompleteChallenge(&_ChallengeTester.TransactOpts, _winner, _loser)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x00b1f0d5.
//
// Solidity: function startChallenge(bytes32 executionHash, uint256 maxMessageCount, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterTransactor) StartChallenge(opts *bind.TransactOpts, executionHash [32]byte, maxMessageCount *big.Int, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.contract.Transact(opts, "startChallenge", executionHash, maxMessageCount, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x00b1f0d5.
//
// Solidity: function startChallenge(bytes32 executionHash, uint256 maxMessageCount, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterSession) StartChallenge(executionHash [32]byte, maxMessageCount *big.Int, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.StartChallenge(&_ChallengeTester.TransactOpts, executionHash, maxMessageCount, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x00b1f0d5.
//
// Solidity: function startChallenge(bytes32 executionHash, uint256 maxMessageCount, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterTransactorSession) StartChallenge(executionHash [32]byte, maxMessageCount *big.Int, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.StartChallenge(&_ChallengeTester.TransactOpts, executionHash, maxMessageCount, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}
