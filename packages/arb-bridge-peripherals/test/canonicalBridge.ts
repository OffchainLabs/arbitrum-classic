/*
 * Copyright 2019-2020, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-env node, mocha */
import { ethers } from 'hardhat'
import { assert, expect } from 'chai'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address'
import { Contract, ContractFactory } from 'ethers'

describe('Bridge peripherals layer 2', () => {
  let accounts: SignerWithAddress[]
  let TestBridge: ContractFactory
  let testBridge: Contract

  before(async function () {
    accounts = await ethers.getSigners()
    TestBridge = await ethers.getContractFactory('TestBridge')
    testBridge = await TestBridge.deploy()

    // deploy 1820 registry contract
    const registry1820 = await ethers.provider.getCode(
      '0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24'
    )
    if (registry1820 === '0x') {
      await accounts[0].sendTransaction({
        to: '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96',
        value: ethers.utils.parseEther('0.08'),
      })
      await ethers.provider.sendTransaction(
        '0xf90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820'
      )
    }
  })

  it('should calculate proxy address correctly', async function () {
    const address: string = (await testBridge.functions.templateERC20())[0]
    // OZ's init code not the same as in https://eips.ethereum.org/EIPS/eip-1167
    const proxyBytecode =
      '0x3d602d80600a3d3981f3363d3d373d3d3d363d73' +
      address.substr(2) +
      '5af43d82803e903d91602b57fd5bf3'

    const l1ERC20 = '0x0000000000000000000000000000000000000001'
    const l2ERC20Address = await testBridge.calculateBridgedERC20Address(
      l1ERC20
    )
    const l2AddressExpected = ethers.utils.getCreate2Address(
      testBridge.address,
      ethers.utils.hexZeroPad(l1ERC20, 32),
      ethers.utils.keccak256(proxyBytecode)
    )
    assert.equal(
      l2ERC20Address,
      l2AddressExpected,
      'Address calculated incorrectly'
    )
  })
  it('should mint erc20 tokens correctly', async function () {
    const l1ERC20 = '0x0000000000000000000000000000000000000001'
    const account = '0x0000000000000000000000000000000000000002'
    const amount = '1'
    const decimals = '18'

    const l2ERC20Address = await testBridge.calculateBridgedERC20Address(
      l1ERC20
    )

    const preTokenCode = await ethers.provider.getCode(l2ERC20Address)
    assert.equal(preTokenCode, '0x', 'Something already deployed to address')

    const tx = await testBridge.mintERC20FromL1(
      l1ERC20,
      account,
      amount,
      decimals
    )

    const postTokenCode = await ethers.provider.getCode(l2ERC20Address)
    assert.notEqual(
      postTokenCode,
      '0x',
      'Token not deployed to correct address'
    )

    const Erc20 = await ethers.getContractFactory('StandardArbERC20')
    const erc20 = await Erc20.attach(l2ERC20Address)

    const balance = await erc20.balanceOf(account)
    assert.equal(balance.toString(), amount, 'Tokens not minted correctly')
  })

  it('should mint erc777 tokens correctly', async function () {
    const l1ERC20 = '0x0000000000000000000000000000000000000001'
    const account = '0x0000000000000000000000000000000000000002'
    const amount = '10'
    const decimals = '18'

    const l2ERC777Address = await testBridge.calculateBridgedERC777Address(
      l1ERC20
    )

    const preTokenCode = await ethers.provider.getCode(l2ERC777Address)
    assert.equal(preTokenCode, '0x', 'Something already deployed to address')

    const tx = await testBridge.mintERC777FromL1(
      l1ERC20,
      account,
      amount,
      decimals
    )

    const postTokenCode = await ethers.provider.getCode(l2ERC777Address)
    assert.notEqual(
      postTokenCode,
      '0x',
      'Token not deployed to correct address'
    )

    const Erc777 = await ethers.getContractFactory('StandardArbERC777')
    const erc777 = await Erc777.attach(l2ERC777Address)

    const balance = await erc777.balanceOf(account)
    assert.equal(balance.toString(), amount, 'Tokens not minted correctly')
  })

  it('should burn and mint tokens correctly on migrate', async function () {
    const l1ERC20 = '0x0000000000000000000000000000000000000002'
    const account = accounts[0].address
    const amount = '1'
    const decimals = '18'

    const tx20 = await testBridge.mintERC20FromL1(
      l1ERC20,
      account,
      amount,
      decimals
    )
    const tx777 = await testBridge.mintERC777FromL1(
      l1ERC20,
      account,
      amount,
      decimals
    )

    const l2ERC20Address = await testBridge.calculateBridgedERC20Address(
      l1ERC20
    )
    const l2ERC777Address = await testBridge.calculateBridgedERC777Address(
      l1ERC20
    )

    const Erc20 = await ethers.getContractFactory('StandardArbERC20')
    const erc20 = await Erc20.attach(l2ERC20Address)
    const Erc777 = await ethers.getContractFactory('StandardArbERC777')
    const erc777 = await Erc777.attach(l2ERC777Address)

    // const balance20 = await erc20.balanceOf(account)
    // const balance777 = await erc777.balanceOf(account)

    const migrate = await erc20.migrate(amount, l2ERC777Address)

    const newBalance777 = await erc777.balanceOf(account)
    const newBalance20 = await erc20.balanceOf(account)
    assert.equal(
      newBalance777.toString(),
      '2',
      'Tokens not migrated correctly on mint'
    )
    assert.equal(
      newBalance20.toString(),
      '0',
      'Tokens not migrated correctly on burn'
    )
  })

  it.skip('should fail to migrate from erc20 to non-deployed erc777', async function () {})

  it.skip('should burn on withdraw', async function () {})

  it.skip('should only allow transaction from self in symmetric bridge', async function () {})
})
