/*
 * Copyright 2019-2020, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-env node, mocha */
import { ethers } from 'hardhat'
import { assert, expect } from 'chai'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address'
import { Contract, ContractFactory } from 'ethers'

describe('Buddy bridge layer 2', () => {
  let accounts: SignerWithAddress[]
  let L2Deployer: ContractFactory
  let l2Deployer: Contract

  before(async function () {
    accounts = await ethers.getSigners()
    L2Deployer = await ethers.getContractFactory('BuddyDeployer')
    l2Deployer = await L2Deployer.deploy()
  })

  it('should deploy contract in L2 correctly', async function () {
    const greeterCreationCode =
      '0x608060405234801561001057600080fd5b506040516107e03803806107e08339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186600182028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019080838360005b838110156100ba57808201518184015260208101905061009f565b50505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b5060405250505080600090805190602001906101049291906101d9565b507fc0839fdc143643f6de6384e6b45e2b4eedc610eaf3b016c86c64801d4ac554f460006040518080602001806020018381038352600081526020016020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101c45780601f10610199576101008083540402835291602001916101c4565b820191906000526020600020905b8154815290600101906020018083116101a757829003601f168201915b5050935050505060405180910390a150610276565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061021a57805160ff1916838001178555610248565b82800160010185558215610248579182015b8281111561024757825182559160200191906001019061022c565b5b5090506102559190610259565b5090565b5b8082111561027257600081600090555060010161025a565b5090565b61055b806102856000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610101578063ef690cc014610184575b600080fd5b6100ff6004803603602081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610207565b005b610109610348565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61018c6103ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cc5780820151818401526020810190506101b1565b50505050905090810190601f1680156101f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b7fc0839fdc143643f6de6384e6b45e2b4eedc610eaf3b016c86c64801d4ac554f46000826040518080602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102b85780601f1061028d576101008083540402835291602001916102b8565b820191906000526020600020905b81548152906001019060200180831161029b57829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b838110156102f25780820151818401526020810190506102d7565b50505050905090810190601f16801561031f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18060009080519060200190610344929190610488565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103e05780601f106103b5576101008083540402835291602001916103e0565b820191906000526020600020905b8154815290600101906020018083116103c357829003601f168201915b5050505050905090565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104c957805160ff19168380011785556104f7565b828001600101855582156104f7579182015b828111156104f65782518255916020019190600101906104db565b5b5090506105049190610508565b5090565b5b80821115610521576000816000905550600101610509565b509056fea26469706673582212206fcfc25f8e56fdcc990e12c3dd35a821a28860cb79a69103ed81a9b5c931294164736f6c6343000703003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000011496e697469616c204772656574696e672e000000000000000000000000000000'

    const tx = await l2Deployer.executeBuddyDeploy(greeterCreationCode)
    const receipt = await tx.wait()

    const log = receipt.events
      .filter(
        (e: any) =>
          e.eventSignature && e.eventSignature === 'Deployed(address,address,uint256,bool)'
      )
      .pop()

    const [sender, contractAddress, withdrawalId, success] = log.args
    assert.equal(success, true, 'Not able to deploy greeter contract');
  })

  it('should deploy contract with correct constructor logic and bytecode', async function() {
    const Mock = await ethers.getContractFactory('Mock')

    const constructorMessage = "created one, create two";
    const mock = await Mock.deploy(constructorMessage);

    assert.equal(await mock.mocked(), constructorMessage, 'Not able to read constructor message from mock');
    
    const tx = await l2Deployer.executeBuddyDeploy(mock.deployTransaction.data)
    const receipt = await tx.wait()

    const log = receipt.events
      .filter(
        (e: any) =>
          e.eventSignature && e.eventSignature === 'Deployed(address,address,uint256,bool)'
      )
      .pop()

    const [sender, contractAddress, withdrawalId, success] = log.args
    assert.equal(success, true, 'Not able to deploy mock contract with create2');
    
    const create2Mock = Mock.attach(contractAddress);

    assert.notEqual(mock.address, create2Mock.address, 'Not able to deploy greeter contract');
    assert.equal(await create2Mock.mocked(), constructorMessage, 'Not able to read constructor message from create2 mock');
  })
})
